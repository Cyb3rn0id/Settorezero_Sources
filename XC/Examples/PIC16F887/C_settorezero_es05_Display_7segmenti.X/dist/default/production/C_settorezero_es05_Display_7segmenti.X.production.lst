

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Oct 06 16:23:20 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 1.44
    19                           ; Generated 14/09/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F887 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  0105                     	;# 
   116  0107                     	;# 
   117  0108                     	;# 
   118  0109                     	;# 
   119  010C                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0185                     	;# 
   125  0187                     	;# 
   126  0188                     	;# 
   127  0189                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130                           
   131                           	psect	strings
   132  0328                     __pstrings:	
   133  0328                     stringtab:	
   134  0328                     __stringtab:	
   135  0328                     stringcode:	
   136                           ;	String table - string pointers are 1 byte each
   137                           
   138  0328                     stringdir:	
   139  0328  3003               	movlw	high stringdir
   140  0329  008A               	movwf	10
   141  032A  0804               	movf	4,w
   142  032B  0A84               	incf	4,f
   143  032C  0782               	addwf	2,f
   144  032D                     __stringbase:	
   145  032D  3400               	retlw	0
   146  032E                     __end_of__stringtab:	
   147  032E                     _dispnum:	
   148  032E  343F               	retlw	63
   149  032F  3406               	retlw	6
   150  0330  345B               	retlw	91
   151  0331  344F               	retlw	79
   152  0332  3466               	retlw	102
   153  0333  346D               	retlw	109
   154  0334  347D               	retlw	125
   155  0335  3407               	retlw	7
   156  0336  347F               	retlw	127
   157  0337  346F               	retlw	111
   158  0338                     __end_of_dispnum:	
   159  0008                     _PORTD	set	8
   160  0005                     _PORTAbits	set	5
   161  0009                     _PORTEbits	set	9
   162  0001                     _TMR0	set	1
   163  000B                     _INTCONbits	set	11
   164  001F                     _ADCON0bits	set	31
   165  0006                     _PORTBbits	set	6
   166  005F                     _GIE	set	95
   167  0081                     _OPTION_REGbits	set	129
   168  0089                     _TRISE	set	137
   169  0088                     _TRISD	set	136
   170  0087                     _TRISC	set	135
   171  0086                     _TRISB	set	134
   172  0085                     _TRISA	set	133
   173  0189                     _ANSELH	set	393
   174  0188                     _ANSEL	set	392
   175                           
   176                           ; #config settings
   177  0000                     
   178                           	psect	cinit
   179  0015                     start_initialization:	
   180  0015                     __initialization:	
   181                           
   182                           ; Clear objects allocated to BANK0
   183  0015  1283               	bcf	3,5	;RP0=0, select bank0
   184  0016  1303               	bcf	3,6	;RP1=0, select bank0
   185  0017  01A0               	clrf	__pbssBANK0& (0+127)
   186  0018  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   187  0019  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   188  001A  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   189  001B  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   190  001C  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   191  001D  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   192  001E                     end_of_initialization:	
   193                           ;End of C runtime variable initialization code
   194                           
   195  001E                     __end_of__initialization:	
   196  001E  0183               	clrf	3
   197  001F  120A  118A  2A41   	ljmp	_main	;jump to C main() function
   198                           
   199                           	psect	bssBANK0
   200  0020                     __pbssBANK0:	
   201  0020                     _counter:	
   202  0020                     	ds	2
   203  0022                     _start:	
   204  0022                     	ds	1
   205  0023                     _flash:	
   206  0023                     	ds	1
   207  0024                     _actdisplay:	
   208  0024                     	ds	1
   209  0025                     _muxcount:	
   210  0025                     	ds	1
   211  0026                     _counterinc:	
   212  0026                     	ds	1
   213                           
   214                           	psect	cstackCOMMON
   215  0070                     __pcstackCOMMON:	
   216  0070                     ?_settings:	
   217  0070                     ?_reset:	
   218                           ; 1 bytes @ 0x0
   219                           
   220  0070                     ?_main:	
   221                           ; 1 bytes @ 0x0
   222                           
   223  0070                     ?_isr:	
   224                           ; 1 bytes @ 0x0
   225                           
   226  0070                     ?___wmul:	
   227                           ; 1 bytes @ 0x0
   228                           
   229  0070                     ?___lwdiv:	
   230                           ; 2 bytes @ 0x0
   231                           
   232  0070                     ___wmul@multiplier:	
   233                           ; 2 bytes @ 0x0
   234                           
   235  0070                     ___lwdiv@divisor:	
   236                           ; 2 bytes @ 0x0
   237                           
   238                           
   239                           ; 2 bytes @ 0x0
   240  0070                     	ds	2
   241  0072                     ___wmul@multiplicand:	
   242  0072                     ___lwdiv@dividend:	
   243                           ; 2 bytes @ 0x2
   244                           
   245                           
   246                           ; 2 bytes @ 0x2
   247  0072                     	ds	2
   248  0074                     ??___wmul:	
   249  0074                     ??___lwdiv:	
   250                           ; 1 bytes @ 0x4
   251                           
   252  0074                     ___wmul@product:	
   253                           ; 1 bytes @ 0x4
   254                           
   255                           
   256                           ; 2 bytes @ 0x4
   257  0074                     	ds	1
   258  0075                     ___lwdiv@quotient:	
   259                           
   260                           ; 2 bytes @ 0x5
   261  0075                     	ds	2
   262  0077                     ___lwdiv@counter:	
   263                           
   264                           ; 1 bytes @ 0x7
   265  0077                     	ds	1
   266  0078                     ??_isr:	
   267                           
   268                           ; 1 bytes @ 0x8
   269  0078                     	ds	6
   270                           
   271                           	psect	cstackBANK0
   272  0027                     __pcstackBANK0:	
   273  0027                     isr@a:	
   274                           
   275                           ; 2 bytes @ 0x0
   276  0027                     	ds	2
   277  0029                     isr@result:	
   278                           
   279                           ; 2 bytes @ 0x2
   280  0029                     	ds	2
   281  002B                     ??_settings:	
   282  002B                     ??_reset:	
   283                           ; 1 bytes @ 0x4
   284                           
   285  002B                     ??_main:	
   286                           ; 1 bytes @ 0x4
   287                           
   288                           
   289                           ; 1 bytes @ 0x4
   290  002B                     	ds	3
   291                           
   292                           	psect	maintext
   293  0241                     __pmaintext:	
   294 ;;
   295 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   296 ;;
   297 ;; *************** function _main *****************
   298 ;; Defined at:
   299 ;;		line 140 in file "main.c"
   300 ;; Parameters:    Size  Location     Type
   301 ;;		None
   302 ;; Auto vars:     Size  Location     Type
   303 ;;		None
   304 ;; Return value:  Size  Location     Type
   305 ;;                  1    wreg      void 
   306 ;; Registers used:
   307 ;;		wreg, status,2, status,0, pclath, cstack
   308 ;; Tracked objects:
   309 ;;		On entry : B00/0
   310 ;;		On exit  : 0/0
   311 ;;		Unchanged: 0/0
   312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   313 ;;      Params:         0       0       0       0       0
   314 ;;      Locals:         0       0       0       0       0
   315 ;;      Temps:          0       3       0       0       0
   316 ;;      Totals:         0       3       0       0       0
   317 ;;Total ram usage:        3 bytes
   318 ;; Hardware stack levels required when called:    3
   319 ;; This function calls:
   320 ;;		_reset
   321 ;;		_settings
   322 ;; This function is called by:
   323 ;;		Startup code after reset
   324 ;; This function uses a non-reentrant model
   325 ;;
   326                           
   327                           
   328                           ;psect for function _main
   329  0241                     _main:	
   330                           
   331                           ;main.c: 142: settings();
   332                           
   333                           ;incstack = 0
   334                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   335  0241  120A  118A  2309  120A  118A  	fcall	_settings
   336                           
   337                           ;main.c: 143: reset();
   338  0246  120A  118A  2338  120A  118A  	fcall	_reset
   339                           
   340                           ;main.c: 144: (GIE = 1);
   341  024B  178B               	bsf	11,7	;volatile
   342  024C                     l808:	
   343                           ;main.c: 146: while(1)
   344                           
   345                           
   346                           ;main.c: 147: {
   347                           ;main.c: 149: if (!PORTBbits.RB4)
   348  024C  1283               	bcf	3,5	;RP0=0, select bank0
   349  024D  1303               	bcf	3,6	;RP1=0, select bank0
   350  024E  1A06               	btfsc	6,4	;volatile
   351  024F  2A7D               	goto	l820
   352                           
   353                           ;main.c: 150: {
   354                           ;main.c: 151: _delay((unsigned long)((50)*(20000000/4000.0)));
   355  0250  3002               	movlw	2
   356  0251  1283               	bcf	3,5	;RP0=0, select bank0
   357  0252  1303               	bcf	3,6	;RP1=0, select bank0
   358  0253  00AD               	movwf	??_main+2
   359  0254  3045               	movlw	69
   360  0255  00AC               	movwf	??_main+1
   361  0256  30A9               	movlw	169
   362  0257  00AB               	movwf	??_main
   363  0258                     u657:	
   364  0258  0BAB               	decfsz	??_main,f
   365  0259  2A58               	goto	u657
   366  025A  0BAC               	decfsz	??_main+1,f
   367  025B  2A58               	goto	u657
   368  025C  0BAD               	decfsz	??_main+2,f
   369  025D  2A58               	goto	u657
   370                           
   371                           ;main.c: 152: if (!PORTBbits.RB4)
   372  025E  1283               	bcf	3,5	;RP0=0, select bank0
   373  025F  1303               	bcf	3,6	;RP1=0, select bank0
   374  0260  1A06               	btfsc	6,4	;volatile
   375  0261  2A6D               	goto	l61
   376                           
   377                           ;main.c: 153: {
   378                           ;main.c: 154: start^=1;
   379  0262  3001               	movlw	1
   380  0263  00AB               	movwf	??_main
   381  0264  082B               	movf	??_main,w
   382  0265  06A2               	xorwf	_start,f	;volatile
   383                           
   384                           ;main.c: 156: if (!start)
   385  0266  0822               	movf	_start,w	;volatile
   386  0267  1D03               	btfss	3,2
   387  0268  2A6D               	goto	l61
   388                           
   389                           ;main.c: 157: {
   390                           ;main.c: 158: flash=1;
   391  0269  3001               	movlw	1
   392  026A  00AB               	movwf	??_main
   393  026B  082B               	movf	??_main,w
   394  026C  00A3               	movwf	_flash	;volatile
   395  026D                     l61:	
   396                           ;main.c: 159: }
   397                           ;main.c: 160: }
   398                           ;main.c: 161: while(!PORTBbits.RB4);
   399                           
   400  026D  1E06               	btfss	6,4	;volatile
   401  026E  2A6D               	goto	l61
   402                           
   403                           ;main.c: 162: _delay((unsigned long)((50)*(20000000/4000.0)));
   404  026F  3002               	movlw	2
   405  0270  1283               	bcf	3,5	;RP0=0, select bank0
   406  0271  1303               	bcf	3,6	;RP1=0, select bank0
   407  0272  00AD               	movwf	??_main+2
   408  0273  3045               	movlw	69
   409  0274  00AC               	movwf	??_main+1
   410  0275  30A9               	movlw	169
   411  0276  00AB               	movwf	??_main
   412  0277                     u667:	
   413  0277  0BAB               	decfsz	??_main,f
   414  0278  2A77               	goto	u667
   415  0279  0BAC               	decfsz	??_main+1,f
   416  027A  2A77               	goto	u667
   417  027B  0BAD               	decfsz	??_main+2,f
   418  027C  2A77               	goto	u667
   419  027D                     l820:	
   420                           
   421                           ;main.c: 163: }
   422                           ;main.c: 165: if (!PORTBbits.RB5)
   423  027D  1283               	bcf	3,5	;RP0=0, select bank0
   424  027E  1303               	bcf	3,6	;RP1=0, select bank0
   425  027F  1A86               	btfsc	6,5	;volatile
   426  0280  2A4C               	goto	l808
   427                           
   428                           ;main.c: 166: {
   429                           ;main.c: 167: _delay((unsigned long)((1500)*(20000000/4000.0)));
   430  0281  3027               	movlw	39
   431  0282  1283               	bcf	3,5	;RP0=0, select bank0
   432  0283  1303               	bcf	3,6	;RP1=0, select bank0
   433  0284  00AD               	movwf	??_main+2
   434  0285  300D               	movlw	13
   435  0286  00AC               	movwf	??_main+1
   436  0287  3025               	movlw	37
   437  0288  00AB               	movwf	??_main
   438  0289                     u677:	
   439  0289  0BAB               	decfsz	??_main,f
   440  028A  2A89               	goto	u677
   441  028B  0BAC               	decfsz	??_main+1,f
   442  028C  2A89               	goto	u677
   443  028D  0BAD               	decfsz	??_main+2,f
   444  028E  2A89               	goto	u677
   445  028F  2A90               	nop2
   446                           
   447                           ;main.c: 168: if (!PORTBbits.RB5)
   448  0290  1283               	bcf	3,5	;RP0=0, select bank0
   449  0291  1303               	bcf	3,6	;RP1=0, select bank0
   450  0292  1A86               	btfsc	6,5	;volatile
   451  0293  2A4C               	goto	l808
   452                           
   453                           ;main.c: 169: {
   454                           ;main.c: 170: reset();
   455  0294  120A  118A  2338  120A  118A  	fcall	_reset
   456  0299                     l66:	
   457                           ;main.c: 171: while(!PORTBbits.RB5);
   458                           
   459  0299  1283               	bcf	3,5	;RP0=0, select bank0
   460  029A  1303               	bcf	3,6	;RP1=0, select bank0
   461  029B  1E86               	btfss	6,5	;volatile
   462  029C  2A99               	goto	l66
   463                           
   464                           ;main.c: 172: _delay((unsigned long)((50)*(20000000/4000.0)));
   465  029D  3002               	movlw	2
   466  029E  1283               	bcf	3,5	;RP0=0, select bank0
   467  029F  1303               	bcf	3,6	;RP1=0, select bank0
   468  02A0  00AD               	movwf	??_main+2
   469  02A1  3045               	movlw	69
   470  02A2  00AC               	movwf	??_main+1
   471  02A3  30A9               	movlw	169
   472  02A4  00AB               	movwf	??_main
   473  02A5                     u687:	
   474  02A5  0BAB               	decfsz	??_main,f
   475  02A6  2AA5               	goto	u687
   476  02A7  0BAC               	decfsz	??_main+1,f
   477  02A8  2AA5               	goto	u687
   478  02A9  0BAD               	decfsz	??_main+2,f
   479  02AA  2AA5               	goto	u687
   480  02AB  2A4C               	goto	l808
   481  02AC                     __end_of_main:	
   482                           
   483                           	psect	text1
   484  0309                     __ptext1:	
   485 ;; *************** function _settings *****************
   486 ;; Defined at:
   487 ;;		line 187 in file "main.c"
   488 ;; Parameters:    Size  Location     Type
   489 ;;		None
   490 ;; Auto vars:     Size  Location     Type
   491 ;;		None
   492 ;; Return value:  Size  Location     Type
   493 ;;                  1    wreg      void 
   494 ;; Registers used:
   495 ;;		wreg, status,2, status,0
   496 ;; Tracked objects:
   497 ;;		On entry : 0/0
   498 ;;		On exit  : 0/0
   499 ;;		Unchanged: 0/0
   500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   501 ;;      Params:         0       0       0       0       0
   502 ;;      Locals:         0       0       0       0       0
   503 ;;      Temps:          0       0       0       0       0
   504 ;;      Totals:         0       0       0       0       0
   505 ;;Total ram usage:        0 bytes
   506 ;; Hardware stack levels used:    1
   507 ;; Hardware stack levels required when called:    2
   508 ;; This function calls:
   509 ;;		Nothing
   510 ;; This function is called by:
   511 ;;		_main
   512 ;; This function uses a non-reentrant model
   513 ;;
   514                           
   515                           
   516                           ;psect for function _settings
   517  0309                     _settings:	
   518                           
   519                           ;main.c: 189: ANSEL=0;
   520                           
   521                           ;incstack = 0
   522                           ; Regs used in _settings: [wreg+status,2+status,0]
   523  0309  1683               	bsf	3,5	;RP0=1, select bank3
   524  030A  1703               	bsf	3,6	;RP1=1, select bank3
   525  030B  0188               	clrf	8	;volatile
   526                           
   527                           ;main.c: 190: ANSELH=0;
   528  030C  0189               	clrf	9	;volatile
   529                           
   530                           ;main.c: 191: ADCON0bits.ADON=0;
   531  030D  1283               	bcf	3,5	;RP0=0, select bank0
   532  030E  1303               	bcf	3,6	;RP1=0, select bank0
   533  030F  101F               	bcf	31,0	;volatile
   534                           
   535                           ;main.c: 192: TRISA=0b11011111;
   536  0310  30DF               	movlw	223
   537  0311  1683               	bsf	3,5	;RP0=1, select bank1
   538  0312  1303               	bcf	3,6	;RP1=0, select bank1
   539  0313  0085               	movwf	5	;volatile
   540                           
   541                           ;main.c: 193: TRISB=0xFF;
   542  0314  30FF               	movlw	255
   543  0315  0086               	movwf	6	;volatile
   544                           
   545                           ;main.c: 194: TRISC=0xFF;
   546  0316  30FF               	movlw	255
   547  0317  0087               	movwf	7	;volatile
   548                           
   549                           ;main.c: 195: TRISD=0;
   550  0318  0188               	clrf	8	;volatile
   551                           
   552                           ;main.c: 196: TRISE=0b11111000;
   553  0319  30F8               	movlw	248
   554  031A  0089               	movwf	9	;volatile
   555                           
   556                           ;main.c: 199: OPTION_REGbits.T0CS=0;
   557  031B  1281               	bcf	1,5	;volatile
   558                           
   559                           ;main.c: 200: OPTION_REGbits.PSA=0;
   560  031C  1181               	bcf	1,3	;volatile
   561                           
   562                           ;main.c: 201: OPTION_REGbits.PS=0b100;
   563  031D  0801               	movf	1,w	;volatile
   564  031E  39F8               	andlw	-8
   565  031F  3804               	iorlw	4
   566  0320  0081               	movwf	1	;volatile
   567                           
   568                           ;main.c: 202: OPTION_REGbits.nRBPU=0;
   569  0321  1381               	bcf	1,7	;volatile
   570                           
   571                           ;main.c: 205: INTCONbits.T0IE=1;
   572  0322  168B               	bsf	11,5	;volatile
   573                           
   574                           ;main.c: 206: TMR0=100;
   575  0323  3064               	movlw	100
   576  0324  1283               	bcf	3,5	;RP0=0, select bank0
   577  0325  1303               	bcf	3,6	;RP1=0, select bank0
   578  0326  0081               	movwf	1	;volatile
   579  0327  0008               	return
   580  0328                     __end_of_settings:	
   581                           
   582                           	psect	text2
   583  0338                     __ptext2:	
   584 ;; *************** function _reset *****************
   585 ;; Defined at:
   586 ;;		line 179 in file "main.c"
   587 ;; Parameters:    Size  Location     Type
   588 ;;		None
   589 ;; Auto vars:     Size  Location     Type
   590 ;;		None
   591 ;; Return value:  Size  Location     Type
   592 ;;                  1    wreg      void 
   593 ;; Registers used:
   594 ;;		status,2
   595 ;; Tracked objects:
   596 ;;		On entry : 0/0
   597 ;;		On exit  : 0/0
   598 ;;		Unchanged: 0/0
   599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   600 ;;      Params:         0       0       0       0       0
   601 ;;      Locals:         0       0       0       0       0
   602 ;;      Temps:          0       0       0       0       0
   603 ;;      Totals:         0       0       0       0       0
   604 ;;Total ram usage:        0 bytes
   605 ;; Hardware stack levels used:    1
   606 ;; Hardware stack levels required when called:    2
   607 ;; This function calls:
   608 ;;		Nothing
   609 ;; This function is called by:
   610 ;;		_main
   611 ;; This function uses a non-reentrant model
   612 ;;
   613                           
   614                           
   615                           ;psect for function _reset
   616  0338                     _reset:	
   617                           
   618                           ;main.c: 181: counter=0;
   619                           
   620                           ;incstack = 0
   621                           ; Regs used in _reset: [status,2]
   622  0338  1283               	bcf	3,5	;RP0=0, select bank0
   623  0339  1303               	bcf	3,6	;RP1=0, select bank0
   624  033A  01A0               	clrf	_counter	;volatile
   625  033B  01A1               	clrf	_counter+1	;volatile
   626                           
   627                           ;main.c: 182: counterinc=0;
   628  033C  01A6               	clrf	_counterinc	;volatile
   629                           
   630                           ;main.c: 183: flash=0;
   631  033D  01A3               	clrf	_flash	;volatile
   632                           
   633                           ;main.c: 184: start=0;
   634  033E  01A2               	clrf	_start	;volatile
   635  033F  0008               	return
   636  0340                     __end_of_reset:	
   637                           
   638                           	psect	text3
   639  0022                     __ptext3:	
   640 ;; *************** function _isr *****************
   641 ;; Defined at:
   642 ;;		line 210 in file "main.c"
   643 ;; Parameters:    Size  Location     Type
   644 ;;		None
   645 ;; Auto vars:     Size  Location     Type
   646 ;;  result          2    2[BANK0 ] unsigned int 
   647 ;;  a               2    0[BANK0 ] unsigned int 
   648 ;; Return value:  Size  Location     Type
   649 ;;                  1    wreg      void 
   650 ;; Registers used:
   651 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   652 ;; Tracked objects:
   653 ;;		On entry : 0/0
   654 ;;		On exit  : 0/0
   655 ;;		Unchanged: 0/0
   656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   657 ;;      Params:         0       0       0       0       0
   658 ;;      Locals:         0       4       0       0       0
   659 ;;      Temps:          6       0       0       0       0
   660 ;;      Totals:         6       4       0       0       0
   661 ;;Total ram usage:       10 bytes
   662 ;; Hardware stack levels used:    1
   663 ;; Hardware stack levels required when called:    1
   664 ;; This function calls:
   665 ;;		___lwdiv
   666 ;;		___wmul
   667 ;; This function is called by:
   668 ;;		Interrupt level 1
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           
   673                           ;psect for function _isr
   674  0022                     _isr:	
   675                           
   676                           ;main.c: 212: if (INTCONbits.T0IF)
   677  0022  1D0B               	btfss	11,2	;volatile
   678  0023  2A36               	goto	i1l110
   679                           
   680                           ;main.c: 213: {
   681                           ;main.c: 215: TMR0=100;
   682  0024  3064               	movlw	100
   683  0025  0081               	movwf	1	;volatile
   684                           
   685                           ;main.c: 216: if (start)
   686  0026  0822               	movf	_start,w	;volatile
   687  0027  1903               	btfsc	3,2
   688  0028  2841               	goto	i1l83
   689                           
   690                           ;main.c: 217: {
   691                           ;main.c: 225: counterinc++;
   692  0029  3001               	movlw	1
   693  002A  00F8               	movwf	??_isr
   694  002B  0878               	movf	??_isr,w
   695  002C  07A6               	addwf	_counterinc,f	;volatile
   696                           
   697                           ;main.c: 226: if (counterinc==10)
   698  002D  300A               	movlw	10
   699  002E  0626               	xorwf	_counterinc,w	;volatile
   700  002F  1D03               	btfss	3,2
   701  0030  2841               	goto	i1l83
   702                           
   703                           ;main.c: 227: {
   704                           ;main.c: 228: counterinc=0;
   705  0031  01A6               	clrf	_counterinc	;volatile
   706                           
   707                           ;main.c: 229: counter++;
   708  0032  3001               	movlw	1
   709  0033  07A0               	addwf	_counter,f	;volatile
   710  0034  1803               	skipnc
   711  0035  0AA1               	incf	_counter+1,f	;volatile
   712  0036  3000               	movlw	0
   713  0037  07A1               	addwf	_counter+1,f	;volatile
   714                           
   715                           ;main.c: 231: if (counter>9999)
   716  0038  3027               	movlw	39
   717  0039  0221               	subwf	_counter+1,w	;volatile
   718  003A  3010               	movlw	16
   719  003B  1903               	skipnz
   720  003C  0220               	subwf	_counter,w	;volatile
   721  003D  1C03               	skipc
   722  003E  2841               	goto	i1l83
   723                           
   724                           ;main.c: 232: {
   725                           ;main.c: 233: counter=0;
   726  003F  01A0               	clrf	_counter	;volatile
   727  0040  01A1               	clrf	_counter+1	;volatile
   728  0041                     i1l83:	
   729                           
   730                           ;main.c: 234: }
   731                           ;main.c: 235: }
   732                           ;main.c: 243: }
   733                           ;main.c: 245: uint16_t a=0;
   734  0041  01A7               	clrf	isr@a
   735  0042  01A8               	clrf	isr@a+1
   736                           
   737                           ;main.c: 246: uint16_t result=0;
   738  0043  01A9               	clrf	isr@result
   739  0044  01AA               	clrf	isr@result+1
   740                           
   741                           ;main.c: 260: muxcount++;
   742  0045  3001               	movlw	1
   743  0046  00F8               	movwf	??_isr
   744  0047  0878               	movf	??_isr,w
   745  0048  07A5               	addwf	_muxcount,f	;volatile
   746                           
   747                           ;main.c: 262: switch (actdisplay)
   748  0049  29DD               	goto	i1l882
   749  004A                     i1l87:	
   750                           ;main.c: 263: {
   751                           ;main.c: 264: case 0:
   752                           
   753                           
   754                           ;main.c: 265: PORTEbits.RE2=0;
   755  004A  1109               	bcf	9,2	;volatile
   756                           
   757                           ;main.c: 267: a=counter/1000;
   758  004B  30E8               	movlw	232
   759  004C  00F0               	movwf	___lwdiv@divisor
   760  004D  3003               	movlw	3
   761  004E  00F1               	movwf	___lwdiv@divisor+1
   762  004F  0821               	movf	_counter+1,w	;volatile
   763  0050  00F3               	movwf	___lwdiv@dividend+1
   764  0051  0820               	movf	_counter,w	;volatile
   765  0052  00F2               	movwf	___lwdiv@dividend
   766  0053  120A  118A  22AC  120A  118A  	fcall	___lwdiv
   767  0058  0871               	movf	?___lwdiv+1,w
   768  0059  1283               	bcf	3,5	;RP0=0, select bank0
   769  005A  1303               	bcf	3,6	;RP1=0, select bank0
   770  005B  00A8               	movwf	isr@a+1
   771  005C  0870               	movf	?___lwdiv,w
   772  005D  00A7               	movwf	isr@a
   773                           
   774                           ;main.c: 269: result=counter-(a*1000);
   775  005E  0828               	movf	isr@a+1,w
   776  005F  00F1               	movwf	___wmul@multiplier+1
   777  0060  0827               	movf	isr@a,w
   778  0061  00F0               	movwf	___wmul@multiplier
   779  0062  30E8               	movlw	232
   780  0063  00F2               	movwf	___wmul@multiplicand
   781  0064  3003               	movlw	3
   782  0065  00F3               	movwf	___wmul@multiplicand+1
   783  0066  120A  118A  22E8  120A  118A  	fcall	___wmul
   784  006B  0970               	comf	?___wmul,w
   785  006C  00F8               	movwf	??_isr
   786  006D  0971               	comf	?___wmul+1,w
   787  006E  00F9               	movwf	??_isr+1
   788  006F  0AF8               	incf	??_isr,f
   789  0070  1903               	skipnz
   790  0071  0AF9               	incf	??_isr+1,f
   791  0072  1283               	bcf	3,5	;RP0=0, select bank0
   792  0073  1303               	bcf	3,6	;RP1=0, select bank0
   793  0074  0820               	movf	_counter,w	;volatile
   794  0075  0778               	addwf	??_isr,w
   795  0076  00A9               	movwf	isr@result
   796  0077  0821               	movf	_counter+1,w	;volatile
   797  0078  1803               	skipnc
   798  0079  0A21               	incf	_counter+1,w	;volatile
   799  007A  0779               	addwf	??_isr+1,w
   800  007B  00AA               	movwf	isr@result+1
   801                           
   802                           ;main.c: 270: a=result/100;
   803  007C  3064               	movlw	100
   804  007D  00F0               	movwf	___lwdiv@divisor
   805  007E  3000               	movlw	0
   806  007F  00F1               	movwf	___lwdiv@divisor+1
   807  0080  082A               	movf	isr@result+1,w
   808  0081  00F3               	movwf	___lwdiv@dividend+1
   809  0082  0829               	movf	isr@result,w
   810  0083  00F2               	movwf	___lwdiv@dividend
   811  0084  120A  118A  22AC  120A  118A  	fcall	___lwdiv
   812  0089  0871               	movf	?___lwdiv+1,w
   813  008A  1283               	bcf	3,5	;RP0=0, select bank0
   814  008B  1303               	bcf	3,6	;RP1=0, select bank0
   815  008C  00A8               	movwf	isr@a+1
   816  008D  0870               	movf	?___lwdiv,w
   817  008E  00A7               	movwf	isr@a
   818                           
   819                           ;main.c: 271: result=result-(a*100);
   820  008F  0828               	movf	isr@a+1,w
   821  0090  00F1               	movwf	___wmul@multiplier+1
   822  0091  0827               	movf	isr@a,w
   823  0092  00F0               	movwf	___wmul@multiplier
   824  0093  3064               	movlw	100
   825  0094  00F2               	movwf	___wmul@multiplicand
   826  0095  3000               	movlw	0
   827  0096  00F3               	movwf	___wmul@multiplicand+1
   828  0097  120A  118A  22E8  120A  118A  	fcall	___wmul
   829  009C  0970               	comf	?___wmul,w
   830  009D  00F8               	movwf	??_isr
   831  009E  0971               	comf	?___wmul+1,w
   832  009F  00F9               	movwf	??_isr+1
   833  00A0  0AF8               	incf	??_isr,f
   834  00A1  1903               	skipnz
   835  00A2  0AF9               	incf	??_isr+1,f
   836  00A3  1283               	bcf	3,5	;RP0=0, select bank0
   837  00A4  1303               	bcf	3,6	;RP1=0, select bank0
   838  00A5  0829               	movf	isr@result,w
   839  00A6  0778               	addwf	??_isr,w
   840  00A7  00A9               	movwf	isr@result
   841  00A8  082A               	movf	isr@result+1,w
   842  00A9  1803               	skipnc
   843  00AA  0A2A               	incf	isr@result+1,w
   844  00AB  0779               	addwf	??_isr+1,w
   845  00AC  00AA               	movwf	isr@result+1
   846                           
   847                           ;main.c: 272: a=result/10;
   848  00AD  300A               	movlw	10
   849  00AE  00F0               	movwf	___lwdiv@divisor
   850  00AF  3000               	movlw	0
   851  00B0  00F1               	movwf	___lwdiv@divisor+1
   852  00B1  082A               	movf	isr@result+1,w
   853  00B2  00F3               	movwf	___lwdiv@dividend+1
   854  00B3  0829               	movf	isr@result,w
   855  00B4  00F2               	movwf	___lwdiv@dividend
   856  00B5  120A  118A  22AC  120A  118A  	fcall	___lwdiv
   857  00BA  0871               	movf	?___lwdiv+1,w
   858  00BB  1283               	bcf	3,5	;RP0=0, select bank0
   859  00BC  1303               	bcf	3,6	;RP1=0, select bank0
   860  00BD  00A8               	movwf	isr@a+1
   861  00BE  0870               	movf	?___lwdiv,w
   862  00BF  00A7               	movwf	isr@a
   863                           
   864                           ;main.c: 273: result=result-(a*10);
   865  00C0  0828               	movf	isr@a+1,w
   866  00C1  00F1               	movwf	___wmul@multiplier+1
   867  00C2  0827               	movf	isr@a,w
   868  00C3  00F0               	movwf	___wmul@multiplier
   869  00C4  300A               	movlw	10
   870  00C5  00F2               	movwf	___wmul@multiplicand
   871  00C6  3000               	movlw	0
   872  00C7  00F3               	movwf	___wmul@multiplicand+1
   873  00C8  120A  118A  22E8  120A  118A  	fcall	___wmul
   874  00CD  0970               	comf	?___wmul,w
   875  00CE  00F8               	movwf	??_isr
   876  00CF  0971               	comf	?___wmul+1,w
   877  00D0  00F9               	movwf	??_isr+1
   878  00D1  0AF8               	incf	??_isr,f
   879  00D2  1903               	skipnz
   880  00D3  0AF9               	incf	??_isr+1,f
   881  00D4  1283               	bcf	3,5	;RP0=0, select bank0
   882  00D5  1303               	bcf	3,6	;RP1=0, select bank0
   883  00D6  0829               	movf	isr@result,w
   884  00D7  0778               	addwf	??_isr,w
   885  00D8  00A9               	movwf	isr@result
   886  00D9  082A               	movf	isr@result+1,w
   887  00DA  1803               	skipnc
   888  00DB  0A2A               	incf	isr@result+1,w
   889  00DC  0779               	addwf	??_isr+1,w
   890  00DD  00AA               	movwf	isr@result+1
   891                           
   892                           ;main.c: 274: break;
   893  00DE  29EB               	goto	i1l884
   894  00DF                     i1l850:	
   895                           ;main.c: 276: case 1:
   896                           
   897                           
   898                           ;main.c: 277: a=counter/1000;
   899  00DF  30E8               	movlw	232
   900  00E0  00F0               	movwf	___lwdiv@divisor
   901  00E1  3003               	movlw	3
   902  00E2  00F1               	movwf	___lwdiv@divisor+1
   903  00E3  0821               	movf	_counter+1,w	;volatile
   904  00E4  00F3               	movwf	___lwdiv@dividend+1
   905  00E5  0820               	movf	_counter,w	;volatile
   906  00E6  00F2               	movwf	___lwdiv@dividend
   907  00E7  120A  118A  22AC  120A  118A  	fcall	___lwdiv
   908  00EC  0871               	movf	?___lwdiv+1,w
   909  00ED  1283               	bcf	3,5	;RP0=0, select bank0
   910  00EE  1303               	bcf	3,6	;RP1=0, select bank0
   911  00EF  00A8               	movwf	isr@a+1
   912  00F0  0870               	movf	?___lwdiv,w
   913  00F1  00A7               	movwf	isr@a
   914                           
   915                           ;main.c: 278: result=counter-(a*1000);
   916  00F2  0828               	movf	isr@a+1,w
   917  00F3  00F1               	movwf	___wmul@multiplier+1
   918  00F4  0827               	movf	isr@a,w
   919  00F5  00F0               	movwf	___wmul@multiplier
   920  00F6  30E8               	movlw	232
   921  00F7  00F2               	movwf	___wmul@multiplicand
   922  00F8  3003               	movlw	3
   923  00F9  00F3               	movwf	___wmul@multiplicand+1
   924  00FA  120A  118A  22E8  120A  118A  	fcall	___wmul
   925  00FF  0970               	comf	?___wmul,w
   926  0100  00F8               	movwf	??_isr
   927  0101  0971               	comf	?___wmul+1,w
   928  0102  00F9               	movwf	??_isr+1
   929  0103  0AF8               	incf	??_isr,f
   930  0104  1903               	skipnz
   931  0105  0AF9               	incf	??_isr+1,f
   932  0106  1283               	bcf	3,5	;RP0=0, select bank0
   933  0107  1303               	bcf	3,6	;RP1=0, select bank0
   934  0108  0820               	movf	_counter,w	;volatile
   935  0109  0778               	addwf	??_isr,w
   936  010A  00A9               	movwf	isr@result
   937  010B  0821               	movf	_counter+1,w	;volatile
   938  010C  1803               	skipnc
   939  010D  0A21               	incf	_counter+1,w	;volatile
   940  010E  0779               	addwf	??_isr+1,w
   941  010F  00AA               	movwf	isr@result+1
   942                           
   943                           ;main.c: 279: a=result/100;
   944  0110  3064               	movlw	100
   945  0111  00F0               	movwf	___lwdiv@divisor
   946  0112  3000               	movlw	0
   947  0113  00F1               	movwf	___lwdiv@divisor+1
   948  0114  082A               	movf	isr@result+1,w
   949  0115  00F3               	movwf	___lwdiv@dividend+1
   950  0116  0829               	movf	isr@result,w
   951  0117  00F2               	movwf	___lwdiv@dividend
   952  0118  120A  118A  22AC  120A  118A  	fcall	___lwdiv
   953  011D  0871               	movf	?___lwdiv+1,w
   954  011E  1283               	bcf	3,5	;RP0=0, select bank0
   955  011F  1303               	bcf	3,6	;RP1=0, select bank0
   956  0120  00A8               	movwf	isr@a+1
   957  0121  0870               	movf	?___lwdiv,w
   958  0122  00A7               	movwf	isr@a
   959                           
   960                           ;main.c: 280: result=result-(a*100);
   961  0123  0828               	movf	isr@a+1,w
   962  0124  00F1               	movwf	___wmul@multiplier+1
   963  0125  0827               	movf	isr@a,w
   964  0126  00F0               	movwf	___wmul@multiplier
   965  0127  3064               	movlw	100
   966  0128  00F2               	movwf	___wmul@multiplicand
   967  0129  3000               	movlw	0
   968  012A  00F3               	movwf	___wmul@multiplicand+1
   969  012B  120A  118A  22E8  120A  118A  	fcall	___wmul
   970  0130  0970               	comf	?___wmul,w
   971  0131  00F8               	movwf	??_isr
   972  0132  0971               	comf	?___wmul+1,w
   973  0133  00F9               	movwf	??_isr+1
   974  0134  0AF8               	incf	??_isr,f
   975  0135  1903               	skipnz
   976  0136  0AF9               	incf	??_isr+1,f
   977  0137  1283               	bcf	3,5	;RP0=0, select bank0
   978  0138  1303               	bcf	3,6	;RP1=0, select bank0
   979  0139  0829               	movf	isr@result,w
   980  013A  0778               	addwf	??_isr,w
   981  013B  00A9               	movwf	isr@result
   982  013C  082A               	movf	isr@result+1,w
   983  013D  1803               	skipnc
   984  013E  0A2A               	incf	isr@result+1,w
   985  013F  0779               	addwf	??_isr+1,w
   986  0140  00AA               	movwf	isr@result+1
   987                           
   988                           ;main.c: 281: result=result/10;
   989  0141  300A               	movlw	10
   990  0142  00F0               	movwf	___lwdiv@divisor
   991  0143  3000               	movlw	0
   992  0144  00F1               	movwf	___lwdiv@divisor+1
   993  0145  082A               	movf	isr@result+1,w
   994  0146  00F3               	movwf	___lwdiv@dividend+1
   995  0147  0829               	movf	isr@result,w
   996  0148  00F2               	movwf	___lwdiv@dividend
   997  0149  120A  118A  22AC  120A  118A  	fcall	___lwdiv
   998  014E  0871               	movf	?___lwdiv+1,w
   999  014F  1283               	bcf	3,5	;RP0=0, select bank0
  1000  0150  1303               	bcf	3,6	;RP1=0, select bank0
  1001  0151  00AA               	movwf	isr@result+1
  1002  0152  0870               	movf	?___lwdiv,w
  1003  0153  00A9               	movwf	isr@result
  1004                           
  1005                           ;main.c: 282: if (start)
  1006  0154  0822               	movf	_start,w	;volatile
  1007  0155  1903               	btfsc	3,2
  1008  0156  296B               	goto	i1l864
  1009                           
  1010                           ;main.c: 283: {
  1011                           ;main.c: 284: if (result<5)
  1012  0157  3000               	movlw	0
  1013  0158  022A               	subwf	isr@result+1,w
  1014  0159  3005               	movlw	5
  1015  015A  1903               	skipnz
  1016  015B  0229               	subwf	isr@result,w
  1017  015C  1803               	skipnc
  1018  015D  296A               	goto	i1l862
  1019                           
  1020                           ;main.c: 285: {
  1021                           ;main.c: 287: counter>99?flash=1:flash=0;
  1022  015E  3000               	movlw	0
  1023  015F  0221               	subwf	_counter+1,w	;volatile
  1024  0160  3064               	movlw	100
  1025  0161  1903               	skipnz
  1026  0162  0220               	subwf	_counter,w	;volatile
  1027  0163  1C03               	skipc
  1028  0164  296A               	goto	i1l862
  1029  0165  3001               	movlw	1
  1030  0166  00F8               	movwf	??_isr
  1031  0167  0878               	movf	??_isr,w
  1032  0168  00A3               	movwf	_flash	;volatile
  1033  0169  296B               	goto	i1l864
  1034  016A                     i1l862:	
  1035                           ;main.c: 288: }
  1036                           
  1037                           
  1038                           ;main.c: 289: else
  1039                           ;main.c: 290: {
  1040                           ;main.c: 291: flash=0;
  1041  016A  01A3               	clrf	_flash	;volatile
  1042  016B                     i1l864:	
  1043                           
  1044                           ;main.c: 292: }
  1045                           ;main.c: 293: }
  1046                           ;main.c: 297: if (counter>9)
  1047  016B  3000               	movlw	0
  1048  016C  0221               	subwf	_counter+1,w	;volatile
  1049  016D  300A               	movlw	10
  1050  016E  1903               	skipnz
  1051  016F  0220               	subwf	_counter,w	;volatile
  1052  0170  1C03               	skipc
  1053  0171  29EB               	goto	i1l884
  1054                           
  1055                           ;main.c: 298: {
  1056                           ;main.c: 299: PORTEbits.RE1=0;
  1057  0172  1089               	bcf	9,1	;volatile
  1058                           
  1059                           ;main.c: 300: }
  1060                           ;main.c: 301: break;
  1061  0173  29EB               	goto	i1l884
  1062  0174                     i1l868:	
  1063                           ;main.c: 303: case 2:
  1064                           
  1065                           
  1066                           ;main.c: 304: a=counter/1000;
  1067  0174  30E8               	movlw	232
  1068  0175  00F0               	movwf	___lwdiv@divisor
  1069  0176  3003               	movlw	3
  1070  0177  00F1               	movwf	___lwdiv@divisor+1
  1071  0178  0821               	movf	_counter+1,w	;volatile
  1072  0179  00F3               	movwf	___lwdiv@dividend+1
  1073  017A  0820               	movf	_counter,w	;volatile
  1074  017B  00F2               	movwf	___lwdiv@dividend
  1075  017C  120A  118A  22AC  120A  118A  	fcall	___lwdiv
  1076  0181  0871               	movf	?___lwdiv+1,w
  1077  0182  1283               	bcf	3,5	;RP0=0, select bank0
  1078  0183  1303               	bcf	3,6	;RP1=0, select bank0
  1079  0184  00A8               	movwf	isr@a+1
  1080  0185  0870               	movf	?___lwdiv,w
  1081  0186  00A7               	movwf	isr@a
  1082                           
  1083                           ;main.c: 305: result=counter-(a*1000);
  1084  0187  0828               	movf	isr@a+1,w
  1085  0188  00F1               	movwf	___wmul@multiplier+1
  1086  0189  0827               	movf	isr@a,w
  1087  018A  00F0               	movwf	___wmul@multiplier
  1088  018B  30E8               	movlw	232
  1089  018C  00F2               	movwf	___wmul@multiplicand
  1090  018D  3003               	movlw	3
  1091  018E  00F3               	movwf	___wmul@multiplicand+1
  1092  018F  120A  118A  22E8  120A  118A  	fcall	___wmul
  1093  0194  0970               	comf	?___wmul,w
  1094  0195  00F8               	movwf	??_isr
  1095  0196  0971               	comf	?___wmul+1,w
  1096  0197  00F9               	movwf	??_isr+1
  1097  0198  0AF8               	incf	??_isr,f
  1098  0199  1903               	skipnz
  1099  019A  0AF9               	incf	??_isr+1,f
  1100  019B  1283               	bcf	3,5	;RP0=0, select bank0
  1101  019C  1303               	bcf	3,6	;RP1=0, select bank0
  1102  019D  0820               	movf	_counter,w	;volatile
  1103  019E  0778               	addwf	??_isr,w
  1104  019F  00A9               	movwf	isr@result
  1105  01A0  0821               	movf	_counter+1,w	;volatile
  1106  01A1  1803               	skipnc
  1107  01A2  0A21               	incf	_counter+1,w	;volatile
  1108  01A3  0779               	addwf	??_isr+1,w
  1109  01A4  00AA               	movwf	isr@result+1
  1110                           
  1111                           ;main.c: 306: result=result/100;
  1112  01A5  3064               	movlw	100
  1113  01A6  00F0               	movwf	___lwdiv@divisor
  1114  01A7  3000               	movlw	0
  1115  01A8  00F1               	movwf	___lwdiv@divisor+1
  1116  01A9  082A               	movf	isr@result+1,w
  1117  01AA  00F3               	movwf	___lwdiv@dividend+1
  1118  01AB  0829               	movf	isr@result,w
  1119  01AC  00F2               	movwf	___lwdiv@dividend
  1120  01AD  120A  118A  22AC  120A  118A  	fcall	___lwdiv
  1121  01B2  0871               	movf	?___lwdiv+1,w
  1122  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  1123  01B4  1303               	bcf	3,6	;RP1=0, select bank0
  1124  01B5  00AA               	movwf	isr@result+1
  1125  01B6  0870               	movf	?___lwdiv,w
  1126  01B7  00A9               	movwf	isr@result
  1127                           
  1128                           ;main.c: 307: if (counter>99)
  1129  01B8  3000               	movlw	0
  1130  01B9  0221               	subwf	_counter+1,w	;volatile
  1131  01BA  3064               	movlw	100
  1132  01BB  1903               	skipnz
  1133  01BC  0220               	subwf	_counter,w	;volatile
  1134  01BD  1C03               	skipc
  1135  01BE  29EB               	goto	i1l884
  1136                           
  1137                           ;main.c: 308: {
  1138                           ;main.c: 309: PORTEbits.RE0=0;
  1139  01BF  1009               	bcf	9,0	;volatile
  1140                           
  1141                           ;main.c: 310: }
  1142                           ;main.c: 311: break;
  1143  01C0  29EB               	goto	i1l884
  1144  01C1                     i1l874:	
  1145                           ;main.c: 313: case 3:
  1146                           
  1147                           
  1148                           ;main.c: 314: result=counter/1000;
  1149  01C1  30E8               	movlw	232
  1150  01C2  00F0               	movwf	___lwdiv@divisor
  1151  01C3  3003               	movlw	3
  1152  01C4  00F1               	movwf	___lwdiv@divisor+1
  1153  01C5  0821               	movf	_counter+1,w	;volatile
  1154  01C6  00F3               	movwf	___lwdiv@dividend+1
  1155  01C7  0820               	movf	_counter,w	;volatile
  1156  01C8  00F2               	movwf	___lwdiv@dividend
  1157  01C9  120A  118A  22AC  120A  118A  	fcall	___lwdiv
  1158  01CE  0871               	movf	?___lwdiv+1,w
  1159  01CF  1283               	bcf	3,5	;RP0=0, select bank0
  1160  01D0  1303               	bcf	3,6	;RP1=0, select bank0
  1161  01D1  00AA               	movwf	isr@result+1
  1162  01D2  0870               	movf	?___lwdiv,w
  1163  01D3  00A9               	movwf	isr@result
  1164                           
  1165                           ;main.c: 315: if (counter>999)
  1166  01D4  3003               	movlw	3
  1167  01D5  0221               	subwf	_counter+1,w	;volatile
  1168  01D6  30E8               	movlw	232
  1169  01D7  1903               	skipnz
  1170  01D8  0220               	subwf	_counter,w	;volatile
  1171  01D9  1C03               	skipc
  1172  01DA  29EB               	goto	i1l884
  1173                           
  1174                           ;main.c: 316: {
  1175                           ;main.c: 317: PORTAbits.RA5=0;
  1176  01DB  1285               	bcf	5,5	;volatile
  1177                           
  1178                           ;main.c: 320: }
  1179                           
  1180                           ;main.c: 318: }
  1181                           ;main.c: 319: break;
  1182  01DC  29EB               	goto	i1l884
  1183  01DD                     i1l882:	
  1184  01DD  0824               	movf	_actdisplay,w	;volatile
  1185                           
  1186                           ; Switch size 1, requested type "space"
  1187                           ; Number of cases is 4, Range of values is 0 to 3
  1188                           ; switch strategies available:
  1189                           ; Name         Instructions Cycles
  1190                           ; simple_byte           13     7 (average)
  1191                           ; direct_byte           20     8 (fixed)
  1192                           ; jumptable            260     6 (fixed)
  1193                           ;	Chosen strategy is simple_byte
  1194  01DE  3A00               	xorlw	0	; case 0
  1195  01DF  1903               	skipnz
  1196  01E0  284A               	goto	i1l87
  1197  01E1  3A01               	xorlw	1	; case 1
  1198  01E2  1903               	skipnz
  1199  01E3  28DF               	goto	i1l850
  1200  01E4  3A03               	xorlw	3	; case 2
  1201  01E5  1903               	skipnz
  1202  01E6  2974               	goto	i1l868
  1203  01E7  3A01               	xorlw	1	; case 3
  1204  01E8  1903               	skipnz
  1205  01E9  29C1               	goto	i1l874
  1206  01EA  29EB               	goto	i1l884
  1207  01EB                     i1l884:	
  1208                           
  1209                           ;main.c: 329: PORTD=(unsigned)~(dispnum[result]+(flash*128));
  1210  01EB  0823               	movf	_flash,w	;volatile
  1211  01EC  00F8               	movwf	??_isr
  1212  01ED  3007               	movlw	7
  1213  01EE                     u61_25:	
  1214  01EE  1003               	clrc
  1215  01EF  0DF8               	rlf	??_isr,f
  1216  01F0  3EFF               	addlw	-1
  1217  01F1  1D03               	skipz
  1218  01F2  29EE               	goto	u61_25
  1219  01F3  0829               	movf	isr@result,w
  1220  01F4  3E01               	addlw	low ((_dispnum-__stringbase)| (0+32768))
  1221  01F5  0084               	movwf	4
  1222  01F6  120A  118A  2328  120A  118A  	fcall	stringdir
  1223  01FB  0778               	addwf	??_isr,w
  1224  01FC  3AFF               	xorlw	255
  1225  01FD  0088               	movwf	8	;volatile
  1226                           
  1227                           ;main.c: 336: if (muxcount==5)
  1228  01FE  3005               	movlw	5
  1229  01FF  0625               	xorwf	_muxcount,w	;volatile
  1230  0200  1D03               	btfss	3,2
  1231  0201  2A35               	goto	i1l102
  1232                           
  1233                           ;main.c: 337: {
  1234                           ;main.c: 338: muxcount=0;
  1235  0202  01A5               	clrf	_muxcount	;volatile
  1236                           
  1237                           ;main.c: 339: actdisplay++;
  1238  0203  3001               	movlw	1
  1239  0204  00F8               	movwf	??_isr
  1240  0205  0878               	movf	??_isr,w
  1241  0206  07A4               	addwf	_actdisplay,f	;volatile
  1242                           
  1243                           ;main.c: 340: if (actdisplay==4)
  1244  0207  3004               	movlw	4
  1245  0208  0624               	xorwf	_actdisplay,w	;volatile
  1246  0209  1903               	btfsc	3,2
  1247                           
  1248                           ;main.c: 341: {
  1249                           ;main.c: 342: actdisplay=0;
  1250  020A  01A4               	clrf	_actdisplay	;volatile
  1251                           
  1252                           ;main.c: 343: }
  1253                           ;main.c: 345: PORTD=(unsigned)(0xFF-(flash*128));
  1254  020B  0823               	movf	_flash,w	;volatile
  1255  020C  00F8               	movwf	??_isr
  1256  020D  3006               	movlw	6
  1257  020E                     u64_25:	
  1258  020E  1003               	clrc
  1259  020F  0DF8               	rlf	??_isr,f
  1260  0210  3EFF               	addlw	-1
  1261  0211  1D03               	skipz
  1262  0212  2A0E               	goto	u64_25
  1263  0213  1003               	clrc
  1264  0214  0D78               	rlf	??_isr,w
  1265  0215  3AFF               	xorlw	255
  1266  0216  3E01               	addlw	1
  1267  0217  3EFF               	addlw	255
  1268  0218  0088               	movwf	8	;volatile
  1269                           
  1270                           ;main.c: 350: switch(actdisplay)
  1271  0219  2A27               	goto	i1l900
  1272  021A                     i1l105:	
  1273                           ;main.c: 351: {
  1274                           ;main.c: 352: case 0:
  1275                           
  1276                           
  1277                           ;main.c: 353: PORTEbits.RE1=1;
  1278  021A  1489               	bsf	9,1	;volatile
  1279  021B  2A1D               	goto	L1
  1280  021C                     i1l107:	
  1281                           ;main.c: 358: case 1:
  1282                           
  1283                           ;main.c: 356: break;
  1284                           
  1285                           ;main.c: 355: PORTAbits.RA5=1;
  1286                           
  1287                           ;main.c: 354: PORTEbits.RE0=1;
  1288                           
  1289                           
  1290                           ;main.c: 359: PORTEbits.RE2=1;
  1291  021C  1509               	bsf	9,2	;volatile
  1292  021D                     L1:	
  1293                           
  1294                           ;main.c: 360: PORTEbits.RE0=1;
  1295  021D  1409               	bsf	9,0	;volatile
  1296  021E  2A21               	goto	L2
  1297  021F                     i1l108:	
  1298                           ;main.c: 364: case 2:
  1299                           
  1300                           ;main.c: 362: break;
  1301                           
  1302                           ;main.c: 361: PORTAbits.RA5=1;
  1303                           
  1304                           
  1305                           ;main.c: 365: PORTEbits.RE2=1;
  1306  021F  1509               	bsf	9,2	;volatile
  1307                           
  1308                           ;main.c: 366: PORTEbits.RE1=1;
  1309  0220  1489               	bsf	9,1	;volatile
  1310  0221                     L2:	
  1311                           
  1312                           ;main.c: 367: PORTAbits.RA5=1;
  1313  0221  1685               	bsf	5,5	;volatile
  1314                           
  1315                           ;main.c: 368: break;
  1316  0222  2A35               	goto	i1l102
  1317  0223                     i1l109:	
  1318                           ;main.c: 370: case 3:
  1319                           
  1320                           
  1321                           ;main.c: 371: PORTEbits.RE2=1;
  1322  0223  1509               	bsf	9,2	;volatile
  1323                           
  1324                           ;main.c: 372: PORTEbits.RE1=1;
  1325  0224  1489               	bsf	9,1	;volatile
  1326                           
  1327                           ;main.c: 373: PORTEbits.RE0=1;
  1328  0225  1409               	bsf	9,0	;volatile
  1329                           
  1330                           ;main.c: 375: }
  1331                           
  1332                           ;main.c: 374: break;
  1333  0226  2A35               	goto	i1l102
  1334  0227                     i1l900:	
  1335  0227  0824               	movf	_actdisplay,w	;volatile
  1336                           
  1337                           ; Switch size 1, requested type "space"
  1338                           ; Number of cases is 4, Range of values is 0 to 3
  1339                           ; switch strategies available:
  1340                           ; Name         Instructions Cycles
  1341                           ; simple_byte           13     7 (average)
  1342                           ; direct_byte           20     8 (fixed)
  1343                           ; jumptable            260     6 (fixed)
  1344                           ;	Chosen strategy is simple_byte
  1345  0228  3A00               	xorlw	0	; case 0
  1346  0229  1903               	skipnz
  1347  022A  2A1A               	goto	i1l105
  1348  022B  3A01               	xorlw	1	; case 1
  1349  022C  1903               	skipnz
  1350  022D  2A1C               	goto	i1l107
  1351  022E  3A03               	xorlw	3	; case 2
  1352  022F  1903               	skipnz
  1353  0230  2A1F               	goto	i1l108
  1354  0231  3A01               	xorlw	1	; case 3
  1355  0232  1903               	skipnz
  1356  0233  2A23               	goto	i1l109
  1357  0234  2A35               	goto	i1l102
  1358  0235                     i1l102:	
  1359                           
  1360                           ;main.c: 376: }
  1361                           ;main.c: 377: INTCONbits.T0IF=0;
  1362  0235  110B               	bcf	11,2	;volatile
  1363  0236                     i1l110:	
  1364  0236  087D               	movf	??_isr+5,w
  1365  0237  00FF               	movwf	127
  1366  0238  087C               	movf	??_isr+4,w
  1367  0239  008A               	movwf	10
  1368  023A  087B               	movf	??_isr+3,w
  1369  023B  0084               	movwf	4
  1370  023C  0E7A               	swapf	(??_isr+2)^(0+-128),w
  1371  023D  0083               	movwf	3
  1372  023E  0EFE               	swapf	126,f
  1373  023F  0E7E               	swapf	126,w
  1374  0240  0009               	retfie
  1375  0241                     __end_of_isr:	
  1376                           
  1377                           	psect	intentry
  1378  0004                     __pintentry:	
  1379                           ;incstack = 0
  1380                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1381                           
  1382  0004                     interrupt_function:	
  1383  007E                     saved_w	set	btemp
  1384  0004  00FE               	movwf	btemp
  1385  0005  0E03               	swapf	3,w
  1386  0006  00FA               	movwf	??_isr+2
  1387  0007  0804               	movf	4,w
  1388  0008  00FB               	movwf	??_isr+3
  1389  0009  080A               	movf	10,w
  1390  000A  00FC               	movwf	??_isr+4
  1391  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1392  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1393  000D  087F               	movf	btemp+1,w
  1394  000E  00FD               	movwf	??_isr+5
  1395  000F  120A  118A  2822   	ljmp	_isr
  1396                           
  1397                           	psect	text4
  1398  02E8                     __ptext4:	
  1399 ;; *************** function ___wmul *****************
  1400 ;; Defined at:
  1401 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\Umul16.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;  multiplier      2    0[COMMON] unsigned int 
  1404 ;;  multiplicand    2    2[COMMON] unsigned int 
  1405 ;; Auto vars:     Size  Location     Type
  1406 ;;  product         2    4[COMMON] unsigned int 
  1407 ;; Return value:  Size  Location     Type
  1408 ;;                  2    0[COMMON] unsigned int 
  1409 ;; Registers used:
  1410 ;;		wreg, status,2, status,0
  1411 ;; Tracked objects:
  1412 ;;		On entry : 0/0
  1413 ;;		On exit  : 0/0
  1414 ;;		Unchanged: 0/0
  1415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1416 ;;      Params:         4       0       0       0       0
  1417 ;;      Locals:         2       0       0       0       0
  1418 ;;      Temps:          0       0       0       0       0
  1419 ;;      Totals:         6       0       0       0       0
  1420 ;;Total ram usage:        6 bytes
  1421 ;; Hardware stack levels used:    1
  1422 ;; This function calls:
  1423 ;;		Nothing
  1424 ;; This function is called by:
  1425 ;;		_isr
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           
  1430                           ;psect for function ___wmul
  1431  02E8                     ___wmul:	
  1432                           
  1433                           ;incstack = 0
  1434                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1435  02E8  01F4               	clrf	___wmul@product
  1436  02E9  01F5               	clrf	___wmul@product+1
  1437  02EA                     i1l764:	
  1438  02EA  1C70               	btfss	___wmul@multiplier,0
  1439  02EB  2AF2               	goto	i1l194
  1440  02EC  0872               	movf	___wmul@multiplicand,w
  1441  02ED  07F4               	addwf	___wmul@product,f
  1442  02EE  1803               	skipnc
  1443  02EF  0AF5               	incf	___wmul@product+1,f
  1444  02F0  0873               	movf	___wmul@multiplicand+1,w
  1445  02F1  07F5               	addwf	___wmul@product+1,f
  1446  02F2                     i1l194:	
  1447  02F2  3001               	movlw	1
  1448  02F3                     u34_25:	
  1449  02F3  1003               	clrc
  1450  02F4  0DF2               	rlf	___wmul@multiplicand,f
  1451  02F5  0DF3               	rlf	___wmul@multiplicand+1,f
  1452  02F6  3EFF               	addlw	-1
  1453  02F7  1D03               	skipz
  1454  02F8  2AF3               	goto	u34_25
  1455  02F9  3001               	movlw	1
  1456  02FA                     u35_25:	
  1457  02FA  1003               	clrc
  1458  02FB  0CF1               	rrf	___wmul@multiplier+1,f
  1459  02FC  0CF0               	rrf	___wmul@multiplier,f
  1460  02FD  3EFF               	addlw	-1
  1461  02FE  1D03               	skipz
  1462  02FF  2AFA               	goto	u35_25
  1463  0300  0870               	movf	___wmul@multiplier,w
  1464  0301  0471               	iorwf	___wmul@multiplier+1,w
  1465  0302  1D03               	btfss	3,2
  1466  0303  2AEA               	goto	i1l764
  1467  0304  0875               	movf	___wmul@product+1,w
  1468  0305  00F1               	movwf	?___wmul+1
  1469  0306  0874               	movf	___wmul@product,w
  1470  0307  00F0               	movwf	?___wmul
  1471  0308  0008               	return
  1472  0309                     __end_of___wmul:	
  1473                           
  1474                           	psect	text5
  1475  02AC                     __ptext5:	
  1476 ;; *************** function ___lwdiv *****************
  1477 ;; Defined at:
  1478 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  1479 ;; Parameters:    Size  Location     Type
  1480 ;;  divisor         2    0[COMMON] unsigned int 
  1481 ;;  dividend        2    2[COMMON] unsigned int 
  1482 ;; Auto vars:     Size  Location     Type
  1483 ;;  quotient        2    5[COMMON] unsigned int 
  1484 ;;  counter         1    7[COMMON] unsigned char 
  1485 ;; Return value:  Size  Location     Type
  1486 ;;                  2    0[COMMON] unsigned int 
  1487 ;; Registers used:
  1488 ;;		wreg, status,2, status,0
  1489 ;; Tracked objects:
  1490 ;;		On entry : 0/0
  1491 ;;		On exit  : 0/0
  1492 ;;		Unchanged: 0/0
  1493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1494 ;;      Params:         4       0       0       0       0
  1495 ;;      Locals:         3       0       0       0       0
  1496 ;;      Temps:          1       0       0       0       0
  1497 ;;      Totals:         8       0       0       0       0
  1498 ;;Total ram usage:        8 bytes
  1499 ;; Hardware stack levels used:    1
  1500 ;; This function calls:
  1501 ;;		Nothing
  1502 ;; This function is called by:
  1503 ;;		_isr
  1504 ;; This function uses a non-reentrant model
  1505 ;;
  1506                           
  1507                           
  1508                           ;psect for function ___lwdiv
  1509  02AC                     ___lwdiv:	
  1510                           
  1511                           ;incstack = 0
  1512                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1513  02AC  01F5               	clrf	___lwdiv@quotient
  1514  02AD  01F6               	clrf	___lwdiv@quotient+1
  1515  02AE  0870               	movf	___lwdiv@divisor,w
  1516  02AF  0471               	iorwf	___lwdiv@divisor+1,w
  1517  02B0  1903               	btfsc	3,2
  1518  02B1  2AE3               	goto	i1l798
  1519  02B2  01F7               	clrf	___lwdiv@counter
  1520  02B3  0AF7               	incf	___lwdiv@counter,f
  1521  02B4                     i1l786:	
  1522  02B4  1BF1               	btfsc	___lwdiv@divisor+1,7
  1523  02B5  2AC2               	goto	i1l788
  1524  02B6  3001               	movlw	1
  1525  02B7                     u38_25:	
  1526  02B7  1003               	clrc
  1527  02B8  0DF0               	rlf	___lwdiv@divisor,f
  1528  02B9  0DF1               	rlf	___lwdiv@divisor+1,f
  1529  02BA  3EFF               	addlw	-1
  1530  02BB  1D03               	skipz
  1531  02BC  2AB7               	goto	u38_25
  1532  02BD  3001               	movlw	1
  1533  02BE  00F4               	movwf	??___lwdiv
  1534  02BF  0874               	movf	??___lwdiv,w
  1535  02C0  07F7               	addwf	___lwdiv@counter,f
  1536  02C1  2AB4               	goto	i1l786
  1537  02C2                     i1l788:	
  1538  02C2  3001               	movlw	1
  1539  02C3                     u40_25:	
  1540  02C3  1003               	clrc
  1541  02C4  0DF5               	rlf	___lwdiv@quotient,f
  1542  02C5  0DF6               	rlf	___lwdiv@quotient+1,f
  1543  02C6  3EFF               	addlw	-1
  1544  02C7  1D03               	skipz
  1545  02C8  2AC3               	goto	u40_25
  1546  02C9  0871               	movf	___lwdiv@divisor+1,w
  1547  02CA  0273               	subwf	___lwdiv@dividend+1,w
  1548  02CB  1D03               	skipz
  1549  02CC  2ACF               	goto	u41_25
  1550  02CD  0870               	movf	___lwdiv@divisor,w
  1551  02CE  0272               	subwf	___lwdiv@dividend,w
  1552  02CF                     u41_25:	
  1553  02CF  1C03               	skipc
  1554  02D0  2AD8               	goto	i1l794
  1555  02D1  0870               	movf	___lwdiv@divisor,w
  1556  02D2  02F2               	subwf	___lwdiv@dividend,f
  1557  02D3  0871               	movf	___lwdiv@divisor+1,w
  1558  02D4  1C03               	skipc
  1559  02D5  03F3               	decf	___lwdiv@dividend+1,f
  1560  02D6  02F3               	subwf	___lwdiv@dividend+1,f
  1561  02D7  1475               	bsf	___lwdiv@quotient,0
  1562  02D8                     i1l794:	
  1563  02D8  3001               	movlw	1
  1564  02D9                     u42_25:	
  1565  02D9  1003               	clrc
  1566  02DA  0CF1               	rrf	___lwdiv@divisor+1,f
  1567  02DB  0CF0               	rrf	___lwdiv@divisor,f
  1568  02DC  3EFF               	addlw	-1
  1569  02DD  1D03               	skipz
  1570  02DE  2AD9               	goto	u42_25
  1571  02DF  3001               	movlw	1
  1572  02E0  02F7               	subwf	___lwdiv@counter,f
  1573  02E1  1D03               	btfss	3,2
  1574  02E2  2AC2               	goto	i1l788
  1575  02E3                     i1l798:	
  1576  02E3  0876               	movf	___lwdiv@quotient+1,w
  1577  02E4  00F1               	movwf	?___lwdiv+1
  1578  02E5  0875               	movf	___lwdiv@quotient,w
  1579  02E6  00F0               	movwf	?___lwdiv
  1580  02E7  0008               	return
  1581  02E8                     __end_of___lwdiv:	
  1582  007E                     btemp	set	126	;btemp
  1583  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    10
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      7      14
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0       0
                                              4 BANK0      3     3      0
                              _reset
                           _settings
 ---------------------------------------------------------------------------------
 (1) _settings                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _reset                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                 10    10      0    2213
                                              8 COMMON     6     6      0
                                              0 BANK0      4     4      0
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     728
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1116
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _reset
   _settings

 _isr (ROOT)
   ___lwdiv
   ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      1C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      7       E       5       17.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      1C      12        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Oct 06 16:23:20 2017

                      pc 0002              __CFG_CP$OFF 0000                       l61 026D  
                     l66 0299                       fsr 0004      ___wmul@multiplicand 0072  
                    l820 027D                      l808 024C                      _GIE 005F  
           __CFG_CPD$OFF 0000                      u657 0258                      u667 0277  
                    u677 0289                      u687 02A5                      _isr 0022  
                    fsr0 0004             __CFG_FOSC$HS 0000             __CFG_LVP$OFF 0000  
                   ?_isr 0070                     i1l83 0041                     i1l87 004A  
                   _TMR0 0001             __CFG_WRT$OFF 0000                     _main 0241  
                   btemp 007E                     isr@a 0027                     start 0012  
          __CFG_IESO$OFF 0000            __CFG_MCLRE$ON 0000                    ??_isr 0078  
                  ?_main 0070            __CFG_WDTE$OFF 0000                    _ANSEL 0188  
        __end_of___lwdiv 02E8                    i1l102 0235                    i1l110 0236  
                  i1l105 021A                    i1l107 021C                    i1l108 021F  
                  i1l109 0223                    i1l194 02F2                    i1l900 0227  
                  i1l850 00DF                    i1l764 02EA                    i1l862 016A  
                  i1l864 016B                    i1l794 02D8                    i1l786 02B4  
                  i1l874 01C1                    i1l882 01DD                    i1l788 02C2  
                  i1l868 0174                    i1l884 01EB                    i1l798 02E3  
                  u40_25 02C3                    u41_25 02CF                    u42_25 02D9  
                  u34_25 02F3                    _PORTD 0008                    u35_25 02FA  
                  u61_25 01EE                    u38_25 02B7                    u64_25 020E  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088                    _TRISE 0089            __CFG_PWRTE$ON 0000  
         __CFG_FCMEN$OFF 0000          __end_of_dispnum 0338                    _flash 0023  
                  _reset 0338                    _start 0022           __CFG_BOREN$OFF 0000  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 0015             __end_of_main 02AC                   ??_main 002B  
                 ?_reset 0070                   _ANSELH 0189                   ___wmul 02E8  
              ??___lwdiv 0074                   saved_w 007E         __end_of_settings 0328  
__end_of__initialization 001E           __pcstackCOMMON 0070            __end_of_reset 0340  
         _OPTION_REGbits 0081                  ??_reset 002B               __pbssBANK0 0020  
             _actdisplay 0024               __pmaintext 0241                  ?___wmul 0070  
             __pintentry 0004               __stringtab 0328               _counterinc 0026  
              ?_settings 0070          __size_of___wmul 0021                  ___lwdiv 02AC  
                __ptext1 0309                  __ptext2 0338                  __ptext3 0022  
                __ptext4 02E8                  __ptext5 02AC                  _dispnum 032E  
                _counter 0020             __size_of_isr 021F     end_of_initialization 001E  
             ??_settings 002B                _PORTAbits 0005                _PORTBbits 0006  
              _PORTEbits 0009           __end_of___wmul 0309      start_initialization 0015  
            __end_of_isr 0241                 ??___wmul 0074                ___latbits 0002  
          __pcstackBANK0 0027         ___lwdiv@dividend 0072                 ?___lwdiv 0070  
      __size_of_settings 001F                __pstrings 0328         ___lwdiv@quotient 0075  
         __size_of_reset 0008        interrupt_function 0004           ___wmul@product 0074  
             _ADCON0bits 001F              __stringbase 032D        ___wmul@multiplier 0070  
              isr@result 0029         __size_of___lwdiv 003C       __end_of__stringtab 032E  
        ___lwdiv@divisor 0070          ___lwdiv@counter 0077        __CFG_BOR4V$BOR21V 0000  
          __size_of_main 006B                 _settings 0309                 _muxcount 0025  
             _INTCONbits 000B                 intlevel1 0000                stringcode 0328  
               stringdir 0328                 stringtab 0328  
