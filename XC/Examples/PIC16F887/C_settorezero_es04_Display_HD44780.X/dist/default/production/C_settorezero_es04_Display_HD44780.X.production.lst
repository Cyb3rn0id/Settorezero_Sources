

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Oct 06 16:39:22 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text26,local,class=CODE,merge=1,delta=2
    37                           	psect	text27,local,class=CODE,merge=1,delta=2
    38                           	psect	text28,local,class=CODE,merge=1,delta=2
    39                           	psect	text29,local,class=CODE,merge=1,delta=2
    40                           	psect	text30,local,class=CODE,merge=1,delta=2
    41                           	psect	text31,local,class=CODE,merge=1,delta=2
    42                           	psect	text32,local,class=CODE,merge=1,delta=2
    43                           	psect	text33,local,class=CODE,merge=1,delta=2
    44                           	psect	text34,local,class=CODE,merge=1,delta=2
    45                           	psect	text35,local,class=CODE,merge=1,delta=2
    46                           	psect	text36,local,class=CODE,merge=1,delta=2
    47                           	psect	text37,local,class=CODE,merge=1,delta=2
    48                           	dabs	1,0x7E,2
    49  0000                     
    50                           ; Version 1.44
    51                           ; Generated 14/09/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC16F887 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     	;# 
    85  0001                     	;# 
    86  0002                     	;# 
    87  0003                     	;# 
    88  0004                     	;# 
    89  0005                     	;# 
    90  0006                     	;# 
    91  0007                     	;# 
    92  0008                     	;# 
    93  0009                     	;# 
    94  000A                     	;# 
    95  000B                     	;# 
    96  000C                     	;# 
    97  000D                     	;# 
    98  000E                     	;# 
    99  000E                     	;# 
   100  000F                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0013                     	;# 
   105  0014                     	;# 
   106  0015                     	;# 
   107  0015                     	;# 
   108  0016                     	;# 
   109  0017                     	;# 
   110  0018                     	;# 
   111  0019                     	;# 
   112  001A                     	;# 
   113  001B                     	;# 
   114  001B                     	;# 
   115  001C                     	;# 
   116  001D                     	;# 
   117  001E                     	;# 
   118  001F                     	;# 
   119  0081                     	;# 
   120  0085                     	;# 
   121  0086                     	;# 
   122  0087                     	;# 
   123  0088                     	;# 
   124  0089                     	;# 
   125  008C                     	;# 
   126  008D                     	;# 
   127  008E                     	;# 
   128  008F                     	;# 
   129  0090                     	;# 
   130  0091                     	;# 
   131  0092                     	;# 
   132  0093                     	;# 
   133  0093                     	;# 
   134  0093                     	;# 
   135  0094                     	;# 
   136  0095                     	;# 
   137  0096                     	;# 
   138  0097                     	;# 
   139  0098                     	;# 
   140  0099                     	;# 
   141  009A                     	;# 
   142  009B                     	;# 
   143  009C                     	;# 
   144  009D                     	;# 
   145  009E                     	;# 
   146  009F                     	;# 
   147  0105                     	;# 
   148  0107                     	;# 
   149  0108                     	;# 
   150  0109                     	;# 
   151  010C                     	;# 
   152  010C                     	;# 
   153  010D                     	;# 
   154  010E                     	;# 
   155  010F                     	;# 
   156  0185                     	;# 
   157  0187                     	;# 
   158  0188                     	;# 
   159  0189                     	;# 
   160  018C                     	;# 
   161  018D                     	;# 
   162  0000                     	;# 
   163  0001                     	;# 
   164  0002                     	;# 
   165  0003                     	;# 
   166  0004                     	;# 
   167  0005                     	;# 
   168  0006                     	;# 
   169  0007                     	;# 
   170  0008                     	;# 
   171  0009                     	;# 
   172  000A                     	;# 
   173  000B                     	;# 
   174  000C                     	;# 
   175  000D                     	;# 
   176  000E                     	;# 
   177  000E                     	;# 
   178  000F                     	;# 
   179  0010                     	;# 
   180  0011                     	;# 
   181  0012                     	;# 
   182  0013                     	;# 
   183  0014                     	;# 
   184  0015                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0017                     	;# 
   188  0018                     	;# 
   189  0019                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  001D                     	;# 
   195  001E                     	;# 
   196  001F                     	;# 
   197  0081                     	;# 
   198  0085                     	;# 
   199  0086                     	;# 
   200  0087                     	;# 
   201  0088                     	;# 
   202  0089                     	;# 
   203  008C                     	;# 
   204  008D                     	;# 
   205  008E                     	;# 
   206  008F                     	;# 
   207  0090                     	;# 
   208  0091                     	;# 
   209  0092                     	;# 
   210  0093                     	;# 
   211  0093                     	;# 
   212  0093                     	;# 
   213  0094                     	;# 
   214  0095                     	;# 
   215  0096                     	;# 
   216  0097                     	;# 
   217  0098                     	;# 
   218  0099                     	;# 
   219  009A                     	;# 
   220  009B                     	;# 
   221  009C                     	;# 
   222  009D                     	;# 
   223  009E                     	;# 
   224  009F                     	;# 
   225  0105                     	;# 
   226  0107                     	;# 
   227  0108                     	;# 
   228  0109                     	;# 
   229  010C                     	;# 
   230  010C                     	;# 
   231  010D                     	;# 
   232  010E                     	;# 
   233  010F                     	;# 
   234  0185                     	;# 
   235  0187                     	;# 
   236  0188                     	;# 
   237  0189                     	;# 
   238  018C                     	;# 
   239  018D                     	;# 
   240                           
   241                           	psect	stringtext
   242  1000                     __pstringtext:	
   243  1000                     stringtab:	
   244  1000                     __stringtab:	
   245                           
   246                           ;	String table - string pointers are 2 bytes each
   247  1000  1BFF               	btfsc	btemp+1,7
   248  1001  280A               	ljmp	stringcode
   249  1002  1383               	bcf	3,7
   250  1003  187F               	btfsc	btemp+1,0
   251  1004  1783               	bsf	3,7
   252  1005  0800               	movf	0,w
   253  1006  0A84               	incf	4,f
   254  1007  1903               	skipnz
   255  1008  0AFF               	incf	btemp+1,f
   256  1009  0008               	return
   257  100A                     stringcode:	
   258  100A  087F               	movf	btemp+1,w
   259  100B  397F               	andlw	127
   260  100C  008A               	movwf	10
   261  100D  0804               	movf	4,w
   262  100E  0A84               	incf	4,f
   263  100F  1903               	skipnz
   264  1010  0AFF               	incf	btemp+1,f
   265  1011  0082               	movwf	2
   266  1012                     __stringbase:	
   267  1012                     __end_of__stringtab:	
   268  1012                     _dpowers:	
   269  1012  3401               	retlw	1
   270  1013  3400               	retlw	0
   271  1014  3400               	retlw	0
   272  1015  3400               	retlw	0
   273  1016  340A               	retlw	10
   274  1017  3400               	retlw	0
   275  1018  3400               	retlw	0
   276  1019  3400               	retlw	0
   277  101A  3464               	retlw	100
   278  101B  3400               	retlw	0
   279  101C  3400               	retlw	0
   280  101D  3400               	retlw	0
   281  101E  34E8               	retlw	232
   282  101F  3403               	retlw	3
   283  1020  3400               	retlw	0
   284  1021  3400               	retlw	0
   285  1022  3410               	retlw	16
   286  1023  3427               	retlw	39
   287  1024  3400               	retlw	0
   288  1025  3400               	retlw	0
   289  1026  34A0               	retlw	160
   290  1027  3486               	retlw	134
   291  1028  3401               	retlw	1
   292  1029  3400               	retlw	0
   293  102A  3440               	retlw	64
   294  102B  3442               	retlw	66
   295  102C  340F               	retlw	15
   296  102D  3400               	retlw	0
   297  102E  3480               	retlw	128
   298  102F  3496               	retlw	150
   299  1030  3498               	retlw	152
   300  1031  3400               	retlw	0
   301  1032  3400               	retlw	0
   302  1033  34E1               	retlw	225
   303  1034  34F5               	retlw	245
   304  1035  3405               	retlw	5
   305  1036  3400               	retlw	0
   306  1037  34CA               	retlw	202
   307  1038  349A               	retlw	154
   308  1039  343B               	retlw	59
   309  103A                     __end_of_dpowers:	
   310  103A                     __powers_:	
   311  103A  3400               	retlw	0
   312  103B  3480               	retlw	128
   313  103C  343F               	retlw	63
   314  103D  3400               	retlw	0
   315  103E  3420               	retlw	32
   316  103F  3441               	retlw	65
   317  1040  3400               	retlw	0
   318  1041  34C8               	retlw	200
   319  1042  3442               	retlw	66
   320  1043  3400               	retlw	0
   321  1044  347A               	retlw	122
   322  1045  3444               	retlw	68
   323  1046  3440               	retlw	64
   324  1047  341C               	retlw	28
   325  1048  3446               	retlw	70
   326  1049  3450               	retlw	80
   327  104A  34C3               	retlw	195
   328  104B  3447               	retlw	71
   329  104C  3424               	retlw	36
   330  104D  3474               	retlw	116
   331  104E  3449               	retlw	73
   332  104F  3497               	retlw	151
   333  1050  3418               	retlw	24
   334  1051  344B               	retlw	75
   335  1052  34BC               	retlw	188
   336  1053  34BE               	retlw	190
   337  1054  344C               	retlw	76
   338  1055  346B               	retlw	107
   339  1056  346E               	retlw	110
   340  1057  344E               	retlw	78
   341  1058  3403               	retlw	3
   342  1059  3415               	retlw	21
   343  105A  3450               	retlw	80
   344  105B  3479               	retlw	121
   345  105C  34AD               	retlw	173
   346  105D  3460               	retlw	96
   347  105E  34F3               	retlw	243
   348  105F  3449               	retlw	73
   349  1060  3471               	retlw	113
   350  1061                     __end_of__powers_:	
   351  1061                     __npowers_:	
   352  1061  3400               	retlw	0
   353  1062  3480               	retlw	128
   354  1063  343F               	retlw	63
   355  1064  34CD               	retlw	205
   356  1065  34CC               	retlw	204
   357  1066  343D               	retlw	61
   358  1067  34D7               	retlw	215
   359  1068  3423               	retlw	35
   360  1069  343C               	retlw	60
   361  106A  3412               	retlw	18
   362  106B  3483               	retlw	131
   363  106C  343A               	retlw	58
   364  106D  34B7               	retlw	183
   365  106E  34D1               	retlw	209
   366  106F  3438               	retlw	56
   367  1070  34C6               	retlw	198
   368  1071  3427               	retlw	39
   369  1072  3437               	retlw	55
   370  1073  3438               	retlw	56
   371  1074  3486               	retlw	134
   372  1075  3435               	retlw	53
   373  1076  34C0               	retlw	192
   374  1077  34D6               	retlw	214
   375  1078  3433               	retlw	51
   376  1079  34CC               	retlw	204
   377  107A  342B               	retlw	43
   378  107B  3432               	retlw	50
   379  107C  3470               	retlw	112
   380  107D  3489               	retlw	137
   381  107E  3430               	retlw	48
   382  107F  34E7               	retlw	231
   383  1080  34DB               	retlw	219
   384  1081  342E               	retlw	46
   385  1082  34E5               	retlw	229
   386  1083  343C               	retlw	60
   387  1084  341E               	retlw	30
   388  1085  3442               	retlw	66
   389  1086  34A2               	retlw	162
   390  1087  340D               	retlw	13
   391  1088                     __end_of__npowers_:	
   392  1088                     _ghost:	
   393  1088  340E               	retlw	14
   394  1089  341F               	retlw	31
   395  108A  3415               	retlw	21
   396  108B  341F               	retlw	31
   397  108C  341F               	retlw	31
   398  108D  341F               	retlw	31
   399  108E  3415               	retlw	21
   400  108F  3400               	retlw	0
   401  1090                     __end_of_ghost:	
   402  1090                     _dot:	
   403  1090  3400               	retlw	0
   404  1091  3400               	retlw	0
   405  1092  3400               	retlw	0
   406  1093  3406               	retlw	6
   407  1094  3406               	retlw	6
   408  1095  3400               	retlw	0
   409  1096  3400               	retlw	0
   410  1097  3400               	retlw	0
   411  1098                     __end_of_dot:	
   412  1098                     _pacmanl:	
   413  1098  3400               	retlw	0
   414  1099  340E               	retlw	14
   415  109A  3417               	retlw	23
   416  109B  341F               	retlw	31
   417  109C  3403               	retlw	3
   418  109D  341F               	retlw	31
   419  109E  340E               	retlw	14
   420  109F  3400               	retlw	0
   421  10A0                     __end_of_pacmanl:	
   422  10A0                     _pacmanr:	
   423  10A0  3400               	retlw	0
   424  10A1  340E               	retlw	14
   425  10A2  341D               	retlw	29
   426  10A3  341F               	retlw	31
   427  10A4  3418               	retlw	24
   428  10A5  341F               	retlw	31
   429  10A6  340E               	retlw	14
   430  10A7  3400               	retlw	0
   431  10A8                     __end_of_pacmanr:	
   432  10A8                     _sad:	
   433  10A8  3400               	retlw	0
   434  10A9  340A               	retlw	10
   435  10AA  340A               	retlw	10
   436  10AB  3400               	retlw	0
   437  10AC  340E               	retlw	14
   438  10AD  3411               	retlw	17
   439  10AE  3400               	retlw	0
   440  10AF  3400               	retlw	0
   441  10B0                     __end_of_sad:	
   442  10B0                     _smile:	
   443  10B0  3400               	retlw	0
   444  10B1  340A               	retlw	10
   445  10B2  340A               	retlw	10
   446  10B3  3400               	retlw	0
   447  10B4  3411               	retlw	17
   448  10B5  340E               	retlw	14
   449  10B6  3400               	retlw	0
   450  10B7  3400               	retlw	0
   451  10B8                     __end_of_smile:	
   452  10B8                     _teschio:	
   453  10B8  340E               	retlw	14
   454  10B9  341F               	retlw	31
   455  10BA  3415               	retlw	21
   456  10BB  341F               	retlw	31
   457  10BC  340E               	retlw	14
   458  10BD  3400               	retlw	0
   459  10BE  340E               	retlw	14
   460  10BF  3400               	retlw	0
   461  10C0                     __end_of_teschio:	
   462  10C0                     _sole:	
   463  10C0  3404               	retlw	4
   464  10C1  3411               	retlw	17
   465  10C2  340E               	retlw	14
   466  10C3  341F               	retlw	31
   467  10C4  340E               	retlw	14
   468  10C5  3411               	retlw	17
   469  10C6  3404               	retlw	4
   470  10C7  3400               	retlw	0
   471  10C8                     __end_of_sole:	
   472  10C8                     _invader:	
   473  10C8  3411               	retlw	17
   474  10C9  340A               	retlw	10
   475  10CA  341F               	retlw	31
   476  10CB  3415               	retlw	21
   477  10CC  341F               	retlw	31
   478  10CD  341F               	retlw	31
   479  10CE  340A               	retlw	10
   480  10CF  341B               	retlw	27
   481  10D0                     __end_of_invader:	
   482  10D0                     _cuore:	
   483  10D0  3400               	retlw	0
   484  10D1  340A               	retlw	10
   485  10D2  341F               	retlw	31
   486  10D3  341F               	retlw	31
   487  10D4  340E               	retlw	14
   488  10D5  3404               	retlw	4
   489  10D6  3400               	retlw	0
   490  10D7  3400               	retlw	0
   491  10D8                     __end_of_cuore:	
   492  10D8                     _stop:	
   493  10D8  3400               	retlw	0
   494  10D9  341F               	retlw	31
   495  10DA  341F               	retlw	31
   496  10DB  341F               	retlw	31
   497  10DC  341F               	retlw	31
   498  10DD  341F               	retlw	31
   499  10DE  3400               	retlw	0
   500  10DF  3400               	retlw	0
   501  10E0                     __end_of_stop:	
   502  10E0                     _play:	
   503  10E0  3410               	retlw	16
   504  10E1  3418               	retlw	24
   505  10E2  341C               	retlw	28
   506  10E3  341E               	retlw	30
   507  10E4  341C               	retlw	28
   508  10E5  3418               	retlw	24
   509  10E6  3410               	retlw	16
   510  10E7  3400               	retlw	0
   511  10E8                     __end_of_play:	
   512  0007                     _PORTCbits	set	7
   513  0008                     _PORTDbits	set	8
   514  001F                     _ADCON0bits	set	31
   515  0087                     _TRISCbits	set	135
   516  0088                     _TRISDbits	set	136
   517  0089                     _TRISE	set	137
   518  0088                     _TRISD	set	136
   519  0087                     _TRISC	set	135
   520  0086                     _TRISB	set	134
   521  0085                     _TRISA	set	133
   522  0189                     _ANSELH	set	393
   523  0188                     _ANSEL	set	392
   524  10E8                     STR_6:	
   525  10E8  3443               	retlw	67	;'C'
   526  10E9  3461               	retlw	97	;'a'
   527  10EA  3472               	retlw	114	;'r'
   528  10EB  3461               	retlw	97	;'a'
   529  10EC  3474               	retlw	116	;'t'
   530  10ED  3474               	retlw	116	;'t'
   531  10EE  3465               	retlw	101	;'e'
   532  10EF  3472               	retlw	114	;'r'
   533  10F0  3469               	retlw	105	;'i'
   534  10F1  3420               	retlw	32	;' '
   535  10F2  3463               	retlw	99	;'c'
   536  10F3  3475               	retlw	117	;'u'
   537  10F4  3473               	retlw	115	;'s'
   538  10F5  3474               	retlw	116	;'t'
   539  10F6  346F               	retlw	111	;'o'
   540  10F7  346D               	retlw	109	;'m'
   541  10F8  3400               	retlw	0
   542  10F9                     STR_7:	
   543  10F9  3453               	retlw	83	;'S'
   544  10FA  3445               	retlw	69	;'E'
   545  10FB  3454               	retlw	84	;'T'
   546  10FC  3454               	retlw	84	;'T'
   547  10FD  344F               	retlw	79	;'O'
   548  10FE  3452               	retlw	82	;'R'
   549  10FF  3445               	retlw	69	;'E'
   550  1100  345A               	retlw	90	;'Z'
   551  1101  3445               	retlw	69	;'E'
   552  1102  3452               	retlw	82	;'R'
   553  1103  344F               	retlw	79	;'O'
   554  1104  342E               	retlw	46	;'.'
   555  1105  3443               	retlw	67	;'C'
   556  1106  344F               	retlw	79	;'O'
   557  1107  344D               	retlw	77	;'M'
   558  1108  3400               	retlw	0
   559  1109                     STR_2:	
   560  1109  3473               	retlw	115	;'s'
   561  110A  3465               	retlw	101	;'e'
   562  110B  3474               	retlw	116	;'t'
   563  110C  3474               	retlw	116	;'t'
   564  110D  346F               	retlw	111	;'o'
   565  110E  3472               	retlw	114	;'r'
   566  110F  3465               	retlw	101	;'e'
   567  1110  347A               	retlw	122	;'z'
   568  1111  3465               	retlw	101	;'e'
   569  1112  3472               	retlw	114	;'r'
   570  1113  346F               	retlw	111	;'o'
   571  1114  342E               	retlw	46	;'.'
   572  1115  3463               	retlw	99	;'c'
   573  1116  346F               	retlw	111	;'o'
   574  1117  346D               	retlw	109	;'m'
   575  1118  3400               	retlw	0
   576  1119                     STR_1:	
   577  1119  3448               	retlw	72	;'H'
   578  111A  3465               	retlw	101	;'e'
   579  111B  346C               	retlw	108	;'l'
   580  111C  346C               	retlw	108	;'l'
   581  111D  346F               	retlw	111	;'o'
   582  111E  3420               	retlw	32	;' '
   583  111F  3457               	retlw	87	;'W'
   584  1120  346F               	retlw	111	;'o'
   585  1121  3472               	retlw	114	;'r'
   586  1122  346C               	retlw	108	;'l'
   587  1123  3464               	retlw	100	;'d'
   588  1124  3421               	retlw	33	;'!'
   589  1125  3400               	retlw	0
   590  1126                     STR_3:	
   591  1126  3455               	retlw	85	;'U'
   592  1127  346E               	retlw	110	;'n'
   593  1128  3473               	retlw	115	;'s'
   594  1129  3469               	retlw	105	;'i'
   595  112A  3467               	retlw	103	;'g'
   596  112B  346E               	retlw	110	;'n'
   597  112C  3465               	retlw	101	;'e'
   598  112D  3464               	retlw	100	;'d'
   599  112E  343A               	retlw	58	;':'
   600  112F  3420               	retlw	32	;' '
   601  1130  3400               	retlw	0
   602  1131                     STR_4:	
   603  1131  3453               	retlw	83	;'S'
   604  1132  3469               	retlw	105	;'i'
   605  1133  3467               	retlw	103	;'g'
   606  1134  346E               	retlw	110	;'n'
   607  1135  3465               	retlw	101	;'e'
   608  1136  3464               	retlw	100	;'d'
   609  1137  343A               	retlw	58	;':'
   610  1138  3420               	retlw	32	;' '
   611  1139  3400               	retlw	0
   612  113A                     STR_5:	
   613  113A  3446               	retlw	70	;'F'
   614  113B  346C               	retlw	108	;'l'
   615  113C  346F               	retlw	111	;'o'
   616  113D  3461               	retlw	97	;'a'
   617  113E  3474               	retlw	116	;'t'
   618  113F  3473               	retlw	115	;'s'
   619  1140  343A               	retlw	58	;':'
   620  1141  3420               	retlw	32	;' '
   621  1142  3400               	retlw	0
   622  1143                     STR_8:	
   623  1143  3425               	retlw	37	;'%'
   624  1144  342E               	retlw	46	;'.'
   625  1145  3431               	retlw	49	;'1'
   626  1146  3466               	retlw	102	;'f'
   627  1147  3400               	retlw	0
   628  1148                     STR_9:	
   629  1148  3425               	retlw	37	;'%'
   630  1149  342E               	retlw	46	;'.'
   631  114A  3432               	retlw	50	;'2'
   632  114B  3466               	retlw	102	;'f'
   633  114C  3400               	retlw	0
   634  114D                     STR_10:	
   635  114D  3425               	retlw	37	;'%'
   636  114E  342E               	retlw	46	;'.'
   637  114F  3433               	retlw	51	;'3'
   638  1150  3466               	retlw	102	;'f'
   639  1151  3400               	retlw	0
   640  1152                     STR_11:	
   641  1152  3425               	retlw	37	;'%'
   642  1153  342E               	retlw	46	;'.'
   643  1154  3434               	retlw	52	;'4'
   644  1155  3466               	retlw	102	;'f'
   645  1156  3400               	retlw	0
   646                           
   647                           ; #config settings
   648  0000                     
   649                           	psect	cinit
   650  07F8                     start_initialization:	
   651  07F8                     __initialization:	
   652                           
   653                           ; Clear objects allocated to BANK0
   654  07F8  1283               	bcf	3,5	;RP0=0, select bank0
   655  07F9  1303               	bcf	3,6	;RP1=0, select bank0
   656  07FA  01ED               	clrf	__pbssBANK0& (0+127)
   657  07FB  01EE               	clrf	(__pbssBANK0+1)& (0+127)
   658  07FC                     end_of_initialization:	
   659                           ;End of C runtime variable initialization code
   660                           
   661  07FC                     __end_of__initialization:	
   662  07FC  0183               	clrf	3
   663  07FD  120A  158A  2CE7   	ljmp	_main	;jump to C main() function
   664                           
   665                           	psect	bssBANK0
   666  006D                     __pbssBANK0:	
   667  006D                     __LCD_Isbusy@tempRS:	
   668  006D                     	ds	1
   669  006E                     __LCD_Isbusy@busyFlag:	
   670  006E                     	ds	1
   671                           
   672                           	psect	cstackBANK1
   673  00A0                     __pcstackBANK1:	
   674  00A0                     _sprintf$818:	
   675                           
   676                           ; 3 bytes @ 0x0
   677  00A0                     	ds	3
   678  00A3                     sprintf@ap:	
   679                           
   680                           ; 1 bytes @ 0x3
   681  00A3                     	ds	1
   682  00A4                     sprintf@flag:	
   683                           
   684                           ; 2 bytes @ 0x4
   685  00A4                     	ds	2
   686  00A6                     sprintf@val:	
   687                           
   688                           ; 4 bytes @ 0x6
   689  00A6                     	ds	4
   690  00AA                     sprintf@exp:	
   691                           
   692                           ; 2 bytes @ 0xA
   693  00AA                     	ds	2
   694  00AC                     sprintf@tmpval:	
   695                           
   696                           ; 4 bytes @ 0xC
   697  00AC                     	ds	4
   698  00B0                     sprintf@prec:	
   699                           
   700                           ; 2 bytes @ 0x10
   701  00B0                     	ds	2
   702  00B2                     sprintf@sp:	
   703                           
   704                           ; 1 bytes @ 0x12
   705  00B2                     	ds	1
   706  00B3                     sprintf@fval:	
   707                           
   708                           ; 3 bytes @ 0x13
   709  00B3                     	ds	3
   710  00B6                     sprintf@c:	
   711                           
   712                           ; 1 bytes @ 0x16
   713  00B6                     	ds	1
   714  00B7                     LCD_Writeflo@buf:	
   715                           
   716                           ; 20 bytes @ 0x17
   717  00B7                     	ds	20
   718  00CB                     main@numeroa:	
   719                           
   720                           ; 3 bytes @ 0x2B
   721  00CB                     	ds	3
   722  00CE                     main@numerob:	
   723                           
   724                           ; 3 bytes @ 0x2E
   725  00CE                     	ds	3
   726  00D1                     main@numeroc:	
   727                           
   728                           ; 3 bytes @ 0x31
   729  00D1                     	ds	3
   730  00D4                     main@b_163:	
   731                           
   732                           ; 1 bytes @ 0x34
   733  00D4                     	ds	1
   734  00D5                     main@posD:	
   735                           
   736                           ; 1 bytes @ 0x35
   737  00D5                     	ds	1
   738  00D6                     main@c:	
   739                           
   740                           ; 1 bytes @ 0x36
   741  00D6                     	ds	1
   742  00D7                     main@b:	
   743                           
   744                           ; 1 bytes @ 0x37
   745  00D7                     	ds	1
   746  00D8                     main@posU:	
   747                           
   748                           ; 1 bytes @ 0x38
   749  00D8                     	ds	1
   750  00D9                     main@a:	
   751                           
   752                           ; 1 bytes @ 0x39
   753  00D9                     	ds	1
   754                           
   755                           	psect	cstackCOMMON
   756  0070                     __pcstackCOMMON:	
   757  0070                     ?_isdigit:	
   758  0070                     ?___ftge:	
   759                           ; 1 bit 
   760                           
   761  0070                     ?_settings:	
   762                           ; 1 bit 
   763                           
   764  0070                     ??_settings:	
   765                           ; 1 bytes @ 0x0
   766                           
   767  0070                     ?_LCD_Init:	
   768                           ; 1 bytes @ 0x0
   769                           
   770  0070                     ?_LCD_Backlight:	
   771                           ; 1 bytes @ 0x0
   772                           
   773  0070                     ??_LCD_Backlight:	
   774                           ; 1 bytes @ 0x0
   775                           
   776  0070                     ?_LCD_Clear:	
   777                           ; 1 bytes @ 0x0
   778                           
   779  0070                     ?_LCD_Putchar:	
   780                           ; 1 bytes @ 0x0
   781                           
   782  0070                     ?__LCD_Nibble:	
   783                           ; 1 bytes @ 0x0
   784                           
   785  0070                     ?__LCD_Strobe:	
   786                           ; 1 bytes @ 0x0
   787                           
   788  0070                     ??__LCD_Strobe:	
   789                           ; 1 bytes @ 0x0
   790                           
   791  0070                     ?__LCD_Isbusy:	
   792                           ; 1 bytes @ 0x0
   793                           
   794  0070                     ?__LCD_Sendbyte:	
   795                           ; 1 bytes @ 0x0
   796                           
   797  0070                     ??_isdigit:	
   798                           ; 1 bytes @ 0x0
   799                           
   800  0070                     ?_main:	
   801                           ; 1 bytes @ 0x0
   802                           
   803  0070                     ?___wmul:	
   804                           ; 2 bytes @ 0x0
   805                           
   806  0070                     ?___awmod:	
   807                           ; 2 bytes @ 0x0
   808                           
   809  0070                     ?___lwdiv:	
   810                           ; 2 bytes @ 0x0
   811                           
   812  0070                     ?___ftpack:	
   813                           ; 2 bytes @ 0x0
   814                           
   815  0070                     ?___ftneg:	
   816                           ; 3 bytes @ 0x0
   817                           
   818  0070                     ?__tdiv_to_l_:	
   819                           ; 3 bytes @ 0x0
   820                           
   821  0070                     ?__div_to_l_:	
   822                           ; 4 bytes @ 0x0
   823                           
   824  0070                     ?___lldiv:	
   825                           ; 4 bytes @ 0x0
   826                           
   827  0070                     ?___llmod:	
   828                           ; 4 bytes @ 0x0
   829                           
   830  0070                     LCD_Backlight@backlight:	
   831                           ; 4 bytes @ 0x0
   832                           
   833  0070                     _isdigit$611:	
   834                           ; 1 bytes @ 0x0
   835                           
   836  0070                     ___wmul@multiplier:	
   837                           ; 1 bytes @ 0x0
   838                           
   839  0070                     ___awmod@divisor:	
   840                           ; 2 bytes @ 0x0
   841                           
   842  0070                     ___lwdiv@divisor:	
   843                           ; 2 bytes @ 0x0
   844                           
   845  0070                     __div_to_l_@f1:	
   846                           ; 2 bytes @ 0x0
   847                           
   848  0070                     ___ftpack@arg:	
   849                           ; 3 bytes @ 0x0
   850                           
   851  0070                     __tdiv_to_l_@f1:	
   852                           ; 3 bytes @ 0x0
   853                           
   854  0070                     ___ftge@ff1:	
   855                           ; 3 bytes @ 0x0
   856                           
   857  0070                     ___ftneg@f1:	
   858                           ; 3 bytes @ 0x0
   859                           
   860  0070                     ___lldiv@divisor:	
   861                           ; 3 bytes @ 0x0
   862                           
   863  0070                     ___llmod@divisor:	
   864                           ; 4 bytes @ 0x0
   865                           
   866                           
   867                           ; 4 bytes @ 0x0
   868  0070                     	ds	1
   869  0071                     ??__LCD_Nibble:	
   870  0071                     ??__LCD_Isbusy:	
   871                           ; 1 bytes @ 0x1
   872                           
   873  0071                     __LCD_Nibble@nibble:	
   874                           ; 1 bytes @ 0x1
   875                           
   876  0071                     isdigit@c:	
   877                           ; 1 bytes @ 0x1
   878                           
   879                           
   880                           ; 1 bytes @ 0x1
   881  0071                     	ds	1
   882  0072                     ??__LCD_Sendbyte:	
   883  0072                     __LCD_Sendbyte@b:	
   884                           ; 1 bytes @ 0x2
   885                           
   886  0072                     ___wmul@multiplicand:	
   887                           ; 1 bytes @ 0x2
   888                           
   889  0072                     ___awmod@dividend:	
   890                           ; 2 bytes @ 0x2
   891                           
   892  0072                     ___lwdiv@dividend:	
   893                           ; 2 bytes @ 0x2
   894                           
   895                           
   896                           ; 2 bytes @ 0x2
   897  0072                     	ds	1
   898  0073                     ??_LCD_Putchar:	
   899  0073                     ?__LCD_Command:	
   900                           ; 1 bytes @ 0x3
   901                           
   902  0073                     ??___ftneg:	
   903                           ; 1 bytes @ 0x3
   904                           
   905  0073                     LCD_Putchar@c:	
   906                           ; 1 bytes @ 0x3
   907                           
   908  0073                     ___ftpack@exp:	
   909                           ; 1 bytes @ 0x3
   910                           
   911  0073                     __LCD_Command@cmd:	
   912                           ; 1 bytes @ 0x3
   913                           
   914  0073                     __div_to_l_@f2:	
   915                           ; 2 bytes @ 0x3
   916                           
   917  0073                     __tdiv_to_l_@f2:	
   918                           ; 3 bytes @ 0x3
   919                           
   920  0073                     ___ftge@ff2:	
   921                           ; 3 bytes @ 0x3
   922                           
   923                           
   924                           ; 3 bytes @ 0x3
   925  0073                     	ds	1
   926  0074                     ?_LCD_Writestr:	
   927  0074                     ??___wmul:	
   928                           ; 1 bytes @ 0x4
   929                           
   930  0074                     ??___awmod:	
   931                           ; 1 bytes @ 0x4
   932                           
   933  0074                     ??___lwdiv:	
   934                           ; 1 bytes @ 0x4
   935                           
   936  0074                     ___ftpack@sign:	
   937                           ; 1 bytes @ 0x4
   938                           
   939  0074                     LCD_Writestr@s:	
   940                           ; 1 bytes @ 0x4
   941                           
   942  0074                     ___wmul@product:	
   943                           ; 2 bytes @ 0x4
   944                           
   945  0074                     ___lldiv@dividend:	
   946                           ; 2 bytes @ 0x4
   947                           
   948  0074                     ___llmod@dividend:	
   949                           ; 4 bytes @ 0x4
   950                           
   951                           
   952                           ; 4 bytes @ 0x4
   953  0074                     	ds	1
   954  0075                     ??_LCD_Init:	
   955  0075                     ?_LCD_Goto:	
   956                           ; 1 bytes @ 0x5
   957                           
   958  0075                     ??_LCD_Clear:	
   959                           ; 1 bytes @ 0x5
   960                           
   961  0075                     ?_LCD_Customchar:	
   962                           ; 1 bytes @ 0x5
   963                           
   964  0075                     ??__LCD_Command:	
   965                           ; 1 bytes @ 0x5
   966                           
   967  0075                     ??___ftpack:	
   968                           ; 1 bytes @ 0x5
   969                           
   970  0075                     LCD_Goto@col:	
   971                           ; 1 bytes @ 0x5
   972                           
   973  0075                     ___awmod@counter:	
   974                           ; 1 bytes @ 0x5
   975                           
   976  0075                     LCD_Customchar@b:	
   977                           ; 1 bytes @ 0x5
   978                           
   979  0075                     ___lwdiv@quotient:	
   980                           ; 2 bytes @ 0x5
   981                           
   982                           
   983                           ; 2 bytes @ 0x5
   984  0075                     	ds	1
   985  0076                     ??_LCD_Writestr:	
   986  0076                     ??_LCD_Goto:	
   987                           ; 1 bytes @ 0x6
   988                           
   989  0076                     ??__tdiv_to_l_:	
   990                           ; 1 bytes @ 0x6
   991                           
   992  0076                     ??__div_to_l_:	
   993                           ; 1 bytes @ 0x6
   994                           
   995  0076                     ??___ftge:	
   996                           ; 1 bytes @ 0x6
   997                           
   998  0076                     ___awmod@sign:	
   999                           ; 1 bytes @ 0x6
  1000                           
  1001                           
  1002                           ; 1 bytes @ 0x6
  1003  0076                     	ds	1
  1004  0077                     ??_LCD_Customchar:	
  1005  0077                     ?___awdiv:	
  1006                           ; 1 bytes @ 0x7
  1007                           
  1008  0077                     LCD_Goto@row:	
  1009                           ; 2 bytes @ 0x7
  1010                           
  1011  0077                     ___lwdiv@counter:	
  1012                           ; 1 bytes @ 0x7
  1013                           
  1014  0077                     ___awdiv@divisor:	
  1015                           ; 1 bytes @ 0x7
  1016                           
  1017                           
  1018                           ; 2 bytes @ 0x7
  1019  0077                     	ds	1
  1020  0078                     ?_LCD_Writeuns:	
  1021  0078                     ??___lldiv:	
  1022                           ; 1 bytes @ 0x8
  1023                           
  1024  0078                     ??___llmod:	
  1025                           ; 1 bytes @ 0x8
  1026                           
  1027  0078                     ?___lltoft:	
  1028                           ; 1 bytes @ 0x8
  1029                           
  1030  0078                     LCD_Writeuns@c:	
  1031                           ; 3 bytes @ 0x8
  1032                           
  1033  0078                     ___lltoft@c:	
  1034                           ; 2 bytes @ 0x8
  1035                           
  1036                           
  1037                           ; 4 bytes @ 0x8
  1038  0078                     	ds	1
  1039  0079                     ___llmod@counter:	
  1040  0079                     ___awdiv@dividend:	
  1041                           ; 1 bytes @ 0x9
  1042                           
  1043  0079                     ___lldiv@quotient:	
  1044                           ; 2 bytes @ 0x9
  1045                           
  1046                           
  1047                           ; 4 bytes @ 0x9
  1048  0079                     	ds	1
  1049  007A                     ??_LCD_Writeuns:	
  1050  007A                     LCD_Customchar@pos:	
  1051                           ; 1 bytes @ 0xA
  1052                           
  1053                           
  1054                           ; 1 bytes @ 0xA
  1055  007A                     	ds	1
  1056  007B                     ??___awdiv:	
  1057  007B                     LCD_Customchar@u:	
  1058                           ; 1 bytes @ 0xB
  1059                           
  1060                           
  1061                           ; 1 bytes @ 0xB
  1062  007B                     	ds	1
  1063  007C                     ??_LCD_Writesig:	
  1064  007C                     ??___bmul:	
  1065                           ; 1 bytes @ 0xC
  1066                           
  1067  007C                     ??___lltoft:	
  1068                           ; 1 bytes @ 0xC
  1069                           
  1070                           
  1071                           ; 1 bytes @ 0xC
  1072  007C                     	ds	1
  1073  007D                     ___lldiv@counter:	
  1074  007D                     ___lltoft@exp:	
  1075                           ; 1 bytes @ 0xD
  1076                           
  1077                           
  1078                           ; 1 bytes @ 0xD
  1079  007D                     	ds	1
  1080  007E                     ??___ftsub:	
  1081                           
  1082                           	psect	cstackBANK0
  1083  0020                     __pcstackBANK0:	
  1084                           ; 1 bytes @ 0xE
  1085                           
  1086  0020                     LCD_Writeuns@wrote:	
  1087  0020                     ___awdiv@counter:	
  1088                           ; 1 bytes @ 0x0
  1089                           
  1090  0020                     __div_to_l_@quot:	
  1091                           ; 1 bytes @ 0x0
  1092                           
  1093  0020                     __tdiv_to_l_@quot:	
  1094                           ; 4 bytes @ 0x0
  1095                           
  1096                           
  1097                           ; 4 bytes @ 0x0
  1098  0020                     	ds	1
  1099  0021                     ___awdiv@sign:	
  1100  0021                     LCD_Writeuns@k:	
  1101                           ; 1 bytes @ 0x1
  1102                           
  1103                           
  1104                           ; 2 bytes @ 0x1
  1105  0021                     	ds	1
  1106  0022                     ___awdiv@quotient:	
  1107                           
  1108                           ; 2 bytes @ 0x2
  1109  0022                     	ds	1
  1110  0023                     LCD_Writeuns@t1:	
  1111                           
  1112                           ; 1 bytes @ 0x3
  1113  0023                     	ds	1
  1114  0024                     ?___bmul:	
  1115  0024                     LCD_Writeuns@i:	
  1116                           ; 1 bytes @ 0x4
  1117                           
  1118  0024                     ___bmul@multiplicand:	
  1119                           ; 1 bytes @ 0x4
  1120                           
  1121  0024                     __div_to_l_@cntr:	
  1122                           ; 1 bytes @ 0x4
  1123                           
  1124  0024                     __tdiv_to_l_@cntr:	
  1125                           ; 1 bytes @ 0x4
  1126                           
  1127                           
  1128                           ; 1 bytes @ 0x4
  1129  0024                     	ds	1
  1130  0025                     ?_LCD_Writesig:	
  1131  0025                     ___bmul@product:	
  1132                           ; 1 bytes @ 0x5
  1133                           
  1134  0025                     __div_to_l_@exp1:	
  1135                           ; 1 bytes @ 0x5
  1136                           
  1137  0025                     __tdiv_to_l_@exp1:	
  1138                           ; 1 bytes @ 0x5
  1139                           
  1140  0025                     LCD_Writesig@c:	
  1141                           ; 1 bytes @ 0x5
  1142                           
  1143                           
  1144                           ; 2 bytes @ 0x5
  1145  0025                     	ds	1
  1146  0026                     ___bmul@multiplier:	
  1147                           
  1148                           ; 1 bytes @ 0x6
  1149  0026                     	ds	1
  1150  0027                     ?___ftmul:	
  1151  0027                     ___ftmul@f1:	
  1152                           ; 3 bytes @ 0x7
  1153                           
  1154                           
  1155                           ; 3 bytes @ 0x7
  1156  0027                     	ds	3
  1157  002A                     ___ftmul@f2:	
  1158                           
  1159                           ; 3 bytes @ 0xA
  1160  002A                     	ds	3
  1161  002D                     ??___ftmul:	
  1162                           
  1163                           ; 1 bytes @ 0xD
  1164  002D                     	ds	4
  1165  0031                     ___ftmul@exp:	
  1166                           
  1167                           ; 1 bytes @ 0x11
  1168  0031                     	ds	1
  1169  0032                     ___ftmul@f3_as_product:	
  1170                           
  1171                           ; 3 bytes @ 0x12
  1172  0032                     	ds	3
  1173  0035                     ___ftmul@cntr:	
  1174                           
  1175                           ; 1 bytes @ 0x15
  1176  0035                     	ds	1
  1177  0036                     ___ftmul@sign:	
  1178                           
  1179                           ; 1 bytes @ 0x16
  1180  0036                     	ds	1
  1181  0037                     ?_fround:	
  1182  0037                     ?_scale:	
  1183                           ; 3 bytes @ 0x17
  1184                           
  1185                           
  1186                           ; 3 bytes @ 0x17
  1187  0037                     	ds	3
  1188  003A                     ??_fround:	
  1189  003A                     ??_scale:	
  1190                           ; 1 bytes @ 0x1A
  1191                           
  1192                           
  1193                           ; 1 bytes @ 0x1A
  1194  003A                     	ds	2
  1195  003C                     _scale$817:	
  1196                           
  1197                           ; 3 bytes @ 0x1C
  1198  003C                     	ds	3
  1199  003F                     scale@scl:	
  1200                           
  1201                           ; 1 bytes @ 0x1F
  1202  003F                     	ds	1
  1203  0040                     ?___fttol:	
  1204  0040                     ___fttol@f1:	
  1205                           ; 4 bytes @ 0x20
  1206                           
  1207  0040                     _fround$816:	
  1208                           ; 3 bytes @ 0x20
  1209                           
  1210                           
  1211                           ; 3 bytes @ 0x20
  1212  0040                     	ds	3
  1213  0043                     _fround$815:	
  1214                           
  1215                           ; 3 bytes @ 0x23
  1216  0043                     	ds	1
  1217  0044                     ??___fttol:	
  1218                           
  1219                           ; 1 bytes @ 0x24
  1220  0044                     	ds	2
  1221  0046                     fround@prec:	
  1222                           
  1223                           ; 1 bytes @ 0x26
  1224  0046                     	ds	1
  1225  0047                     ?___ftadd:	
  1226  0047                     ___ftadd@f1:	
  1227                           ; 3 bytes @ 0x27
  1228                           
  1229                           
  1230                           ; 3 bytes @ 0x27
  1231  0047                     	ds	1
  1232  0048                     ___fttol@sign1:	
  1233                           
  1234                           ; 1 bytes @ 0x28
  1235  0048                     	ds	1
  1236  0049                     ___fttol@lval:	
  1237                           
  1238                           ; 4 bytes @ 0x29
  1239  0049                     	ds	1
  1240  004A                     ___ftadd@f2:	
  1241                           
  1242                           ; 3 bytes @ 0x2A
  1243  004A                     	ds	3
  1244  004D                     ??___ftadd:	
  1245  004D                     ___fttol@exp1:	
  1246                           ; 1 bytes @ 0x2D
  1247                           
  1248                           
  1249                           ; 1 bytes @ 0x2D
  1250  004D                     	ds	4
  1251  0051                     ___ftadd@sign:	
  1252                           
  1253                           ; 1 bytes @ 0x31
  1254  0051                     	ds	1
  1255  0052                     ___ftadd@exp2:	
  1256                           
  1257                           ; 1 bytes @ 0x32
  1258  0052                     	ds	1
  1259  0053                     ___ftadd@exp1:	
  1260                           
  1261                           ; 1 bytes @ 0x33
  1262  0053                     	ds	1
  1263  0054                     ?___ftsub:	
  1264  0054                     ___ftsub@f2:	
  1265                           ; 3 bytes @ 0x34
  1266                           
  1267                           
  1268                           ; 3 bytes @ 0x34
  1269  0054                     	ds	3
  1270  0057                     ___ftsub@f1:	
  1271                           
  1272                           ; 3 bytes @ 0x37
  1273  0057                     	ds	3
  1274  005A                     ?_sprintf:	
  1275  005A                     sprintf@f:	
  1276                           ; 2 bytes @ 0x3A
  1277                           
  1278                           
  1279                           ; 2 bytes @ 0x3A
  1280  005A                     	ds	5
  1281  005F                     ??_sprintf:	
  1282                           
  1283                           ; 1 bytes @ 0x3F
  1284  005F                     	ds	6
  1285  0065                     ?_LCD_Writeflo:	
  1286  0065                     LCD_Writeflo@c:	
  1287                           ; 1 bytes @ 0x45
  1288                           
  1289                           
  1290                           ; 3 bytes @ 0x45
  1291  0065                     	ds	3
  1292  0068                     LCD_Writeflo@p:	
  1293                           
  1294                           ; 1 bytes @ 0x48
  1295  0068                     	ds	1
  1296  0069                     ??_LCD_Writeflo:	
  1297                           
  1298                           ; 1 bytes @ 0x49
  1299  0069                     	ds	1
  1300  006A                     ??_main:	
  1301                           
  1302                           ; 1 bytes @ 0x4A
  1303  006A                     	ds	3
  1304                           
  1305                           	psect	maintext
  1306  0CE7                     __pmaintext:	
  1307 ;;
  1308 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1309 ;;
  1310 ;; *************** function _main *****************
  1311 ;; Defined at:
  1312 ;;		line 83 in file "main.c"
  1313 ;; Parameters:    Size  Location     Type
  1314 ;;		None
  1315 ;; Auto vars:     Size  Location     Type
  1316 ;;  b               1   52[BANK1 ] char 
  1317 ;;  b               1   55[BANK1 ] char 
  1318 ;;  a               1   57[BANK1 ] unsigned char 
  1319 ;;  c               1   54[BANK1 ] char 
  1320 ;;  numeroc         3   49[BANK1 ] float 
  1321 ;;  numerob         3   46[BANK1 ] float 
  1322 ;;  numeroa         3   43[BANK1 ] float 
  1323 ;;  posU            1   56[BANK1 ] unsigned char 
  1324 ;;  posD            1   53[BANK1 ] unsigned char 
  1325 ;; Return value:  Size  Location     Type
  1326 ;;                  2   68[None  ] int 
  1327 ;; Registers used:
  1328 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1329 ;; Tracked objects:
  1330 ;;		On entry : B00/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1334 ;;      Params:         0       0       0       0       0
  1335 ;;      Locals:         0       0      15       0       0
  1336 ;;      Temps:          0       3       0       0       0
  1337 ;;      Totals:         0       3      15       0       0
  1338 ;;Total ram usage:       18 bytes
  1339 ;; Hardware stack levels required when called:    6
  1340 ;; This function calls:
  1341 ;;		_LCD_Backlight
  1342 ;;		_LCD_Clear
  1343 ;;		_LCD_Customchar
  1344 ;;		_LCD_Goto
  1345 ;;		_LCD_Init
  1346 ;;		_LCD_Putchar
  1347 ;;		_LCD_Writeflo
  1348 ;;		_LCD_Writesig
  1349 ;;		_LCD_Writestr
  1350 ;;		_LCD_Writeuns
  1351 ;;		_settings
  1352 ;; This function is called by:
  1353 ;;		Startup code after reset
  1354 ;; This function uses a non-reentrant model
  1355 ;;
  1356                           
  1357                           
  1358                           ;psect for function _main
  1359  0CE7                     _main:	
  1360                           
  1361                           ;main.c: 85: settings();
  1362                           
  1363                           ;incstack = 0
  1364                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1365  0CE7  160A  158A  26AA  120A  158A  	fcall	_settings
  1366                           
  1367                           ;main.c: 90: LCD_Init();
  1368  0CEC  160A  118A  245C  120A  158A  	fcall	_LCD_Init
  1369                           
  1370                           ;main.c: 91: LCD_Backlight(1);
  1371  0CF1  3001               	movlw	1
  1372  0CF2  160A  158A  267D  120A  158A  	fcall	_LCD_Backlight
  1373  0CF7                     l3027:	
  1374                           ;main.c: 93: while(1)
  1375                           
  1376                           
  1377                           ;main.c: 94: {
  1378                           ;main.c: 96: LCD_Writestr("Hello World!");
  1379  0CF7  3019               	movlw	low (STR_1| (0+32768))
  1380  0CF8  00F4               	movwf	LCD_Writestr@s
  1381  0CF9  3091               	movlw	high (STR_1| (0+32768))
  1382  0CFA  00F5               	movwf	LCD_Writestr@s+1
  1383  0CFB  160A  158A  2720  120A  158A  	fcall	_LCD_Writestr
  1384                           
  1385                           ;main.c: 97: LCD_Goto(2,1);
  1386  0D00  01F5               	clrf	LCD_Goto@col
  1387  0D01  0AF5               	incf	LCD_Goto@col,f
  1388  0D02  3002               	movlw	2
  1389  0D03  160A  118A  2207  120A  158A  	fcall	_LCD_Goto
  1390                           
  1391                           ;main.c: 98: LCD_Writestr("settorezero.com");
  1392  0D08  3009               	movlw	low (STR_2| (0+32768))
  1393  0D09  00F4               	movwf	LCD_Writestr@s
  1394  0D0A  3091               	movlw	high (STR_2| (0+32768))
  1395  0D0B  00F5               	movwf	LCD_Writestr@s+1
  1396  0D0C  160A  158A  2720  120A  158A  	fcall	_LCD_Writestr
  1397                           
  1398                           ;main.c: 99: _delay((unsigned long)((3000)*(20000000/4000.0)));
  1399  0D11  304D               	movlw	77
  1400  0D12  1283               	bcf	3,5	;RP0=0, select bank0
  1401  0D13  1303               	bcf	3,6	;RP1=0, select bank0
  1402  0D14  00EC               	movwf	??_main+2
  1403  0D15  3019               	movlw	25
  1404  0D16  00EB               	movwf	??_main+1
  1405  0D17  304F               	movlw	79
  1406  0D18  00EA               	movwf	??_main
  1407  0D19                     u4357:	
  1408  0D19  0BEA               	decfsz	??_main,f
  1409  0D1A  2D19               	goto	u4357
  1410  0D1B  0BEB               	decfsz	??_main+1,f
  1411  0D1C  2D19               	goto	u4357
  1412  0D1D  0BEC               	decfsz	??_main+2,f
  1413  0D1E  2D19               	goto	u4357
  1414                           
  1415                           ;main.c: 100: LCD_Clear();
  1416  0D1F  160A  158A  2659  120A  158A  	fcall	_LCD_Clear
  1417                           
  1418                           ;main.c: 103: LCD_Writestr("Unsigned: ");
  1419  0D24  3026               	movlw	low (STR_3| (0+32768))
  1420  0D25  00F4               	movwf	LCD_Writestr@s
  1421  0D26  3091               	movlw	high (STR_3| (0+32768))
  1422  0D27  00F5               	movwf	LCD_Writestr@s+1
  1423  0D28  160A  158A  2720  120A  158A  	fcall	_LCD_Writestr
  1424                           
  1425                           ;main.c: 104: LCD_Writeuns(1977);
  1426  0D2D  30B9               	movlw	185
  1427  0D2E  00F8               	movwf	LCD_Writeuns@c
  1428  0D2F  3007               	movlw	7
  1429  0D30  00F9               	movwf	LCD_Writeuns@c+1
  1430  0D31  160A  118A  2313  120A  158A  	fcall	_LCD_Writeuns
  1431                           
  1432                           ;main.c: 105: LCD_Goto(2,1);
  1433  0D36  01F5               	clrf	LCD_Goto@col
  1434  0D37  0AF5               	incf	LCD_Goto@col,f
  1435  0D38  3002               	movlw	2
  1436  0D39  160A  118A  2207  120A  158A  	fcall	_LCD_Goto
  1437                           
  1438                           ;main.c: 106: LCD_Writestr("Signed: ");
  1439  0D3E  3031               	movlw	low (STR_4| (0+32768))
  1440  0D3F  00F4               	movwf	LCD_Writestr@s
  1441  0D40  3091               	movlw	high (STR_4| (0+32768))
  1442  0D41  00F5               	movwf	LCD_Writestr@s+1
  1443  0D42  160A  158A  2720  120A  158A  	fcall	_LCD_Writestr
  1444                           
  1445                           ;main.c: 107: LCD_Writesig(-12345);
  1446  0D47  30C7               	movlw	199
  1447  0D48  1283               	bcf	3,5	;RP0=0, select bank0
  1448  0D49  1303               	bcf	3,6	;RP1=0, select bank0
  1449  0D4A  00A5               	movwf	LCD_Writesig@c
  1450  0D4B  30CF               	movlw	207
  1451  0D4C  00A6               	movwf	LCD_Writesig@c+1
  1452  0D4D  160A  158A  2743  120A  158A  	fcall	_LCD_Writesig
  1453                           
  1454                           ;main.c: 108: _delay((unsigned long)((3000)*(20000000/4000.0)));
  1455  0D52  304D               	movlw	77
  1456  0D53  1283               	bcf	3,5	;RP0=0, select bank0
  1457  0D54  1303               	bcf	3,6	;RP1=0, select bank0
  1458  0D55  00EC               	movwf	??_main+2
  1459  0D56  3019               	movlw	25
  1460  0D57  00EB               	movwf	??_main+1
  1461  0D58  304F               	movlw	79
  1462  0D59  00EA               	movwf	??_main
  1463  0D5A                     u4367:	
  1464  0D5A  0BEA               	decfsz	??_main,f
  1465  0D5B  2D5A               	goto	u4367
  1466  0D5C  0BEB               	decfsz	??_main+1,f
  1467  0D5D  2D5A               	goto	u4367
  1468  0D5E  0BEC               	decfsz	??_main+2,f
  1469  0D5F  2D5A               	goto	u4367
  1470                           
  1471                           ;main.c: 109: LCD_Clear();
  1472  0D60  160A  158A  2659  120A  158A  	fcall	_LCD_Clear
  1473                           
  1474                           ;main.c: 111: float numeroa=-1.23456;
  1475  0D65  3006               	movlw	6
  1476  0D66  1683               	bsf	3,5	;RP0=1, select bank1
  1477  0D67  1303               	bcf	3,6	;RP1=0, select bank1
  1478  0D68  00CB               	movwf	main@numeroa^(0+128)
  1479  0D69  309E               	movlw	158
  1480  0D6A  00CC               	movwf	(main@numeroa+1)^(0+128)
  1481  0D6B  30BF               	movlw	191
  1482  0D6C  00CD               	movwf	(main@numeroa+2)^(0+128)
  1483                           
  1484                           ;main.c: 112: float numerob=0.7654;
  1485  0D6D  30F1               	movlw	241
  1486  0D6E  00CE               	movwf	main@numerob^(0+128)
  1487  0D6F  3043               	movlw	67
  1488  0D70  00CF               	movwf	(main@numerob+1)^(0+128)
  1489  0D71  303F               	movlw	63
  1490  0D72  00D0               	movwf	(main@numerob+2)^(0+128)
  1491                           
  1492                           ;main.c: 113: float numeroc=45.16;
  1493  0D73  30A4               	movlw	164
  1494  0D74  00D1               	movwf	main@numeroc^(0+128)
  1495  0D75  3034               	movlw	52
  1496  0D76  00D2               	movwf	(main@numeroc+1)^(0+128)
  1497  0D77  3042               	movlw	66
  1498  0D78  00D3               	movwf	(main@numeroc+2)^(0+128)
  1499                           
  1500                           ;main.c: 114: LCD_Writestr("Floats: ");
  1501  0D79  303A               	movlw	low (STR_5| (0+32768))
  1502  0D7A  00F4               	movwf	LCD_Writestr@s
  1503  0D7B  3091               	movlw	high (STR_5| (0+32768))
  1504  0D7C  00F5               	movwf	LCD_Writestr@s+1
  1505  0D7D  160A  158A  2720  120A  158A  	fcall	_LCD_Writestr
  1506                           
  1507                           ;main.c: 115: LCD_Writeflo(numeroa,3);
  1508  0D82  1683               	bsf	3,5	;RP0=1, select bank1
  1509  0D83  1303               	bcf	3,6	;RP1=0, select bank1
  1510  0D84  084B               	movf	main@numeroa^(0+128),w
  1511  0D85  1283               	bcf	3,5	;RP0=0, select bank0
  1512  0D86  1303               	bcf	3,6	;RP1=0, select bank0
  1513  0D87  00E5               	movwf	LCD_Writeflo@c
  1514  0D88  1683               	bsf	3,5	;RP0=1, select bank1
  1515  0D89  1303               	bcf	3,6	;RP1=0, select bank1
  1516  0D8A  084C               	movf	(main@numeroa+1)^(0+128),w
  1517  0D8B  1283               	bcf	3,5	;RP0=0, select bank0
  1518  0D8C  1303               	bcf	3,6	;RP1=0, select bank0
  1519  0D8D  00E6               	movwf	LCD_Writeflo@c+1
  1520  0D8E  1683               	bsf	3,5	;RP0=1, select bank1
  1521  0D8F  1303               	bcf	3,6	;RP1=0, select bank1
  1522  0D90  084D               	movf	(main@numeroa+2)^(0+128),w
  1523  0D91  1283               	bcf	3,5	;RP0=0, select bank0
  1524  0D92  1303               	bcf	3,6	;RP1=0, select bank0
  1525  0D93  00E7               	movwf	LCD_Writeflo@c+2
  1526  0D94  3003               	movlw	3
  1527  0D95  00EA               	movwf	??_main
  1528  0D96  086A               	movf	??_main,w
  1529  0D97  00E8               	movwf	LCD_Writeflo@p
  1530  0D98  160A  118A  23EA  120A  158A  	fcall	_LCD_Writeflo
  1531                           
  1532                           ;main.c: 116: LCD_Goto(2,1);
  1533  0D9D  01F5               	clrf	LCD_Goto@col
  1534  0D9E  0AF5               	incf	LCD_Goto@col,f
  1535  0D9F  3002               	movlw	2
  1536  0DA0  160A  118A  2207  120A  158A  	fcall	_LCD_Goto
  1537                           
  1538                           ;main.c: 117: LCD_Writeflo(numerob,4);
  1539  0DA5  1683               	bsf	3,5	;RP0=1, select bank1
  1540  0DA6  1303               	bcf	3,6	;RP1=0, select bank1
  1541  0DA7  084E               	movf	main@numerob^(0+128),w
  1542  0DA8  1283               	bcf	3,5	;RP0=0, select bank0
  1543  0DA9  1303               	bcf	3,6	;RP1=0, select bank0
  1544  0DAA  00E5               	movwf	LCD_Writeflo@c
  1545  0DAB  1683               	bsf	3,5	;RP0=1, select bank1
  1546  0DAC  1303               	bcf	3,6	;RP1=0, select bank1
  1547  0DAD  084F               	movf	(main@numerob+1)^(0+128),w
  1548  0DAE  1283               	bcf	3,5	;RP0=0, select bank0
  1549  0DAF  1303               	bcf	3,6	;RP1=0, select bank0
  1550  0DB0  00E6               	movwf	LCD_Writeflo@c+1
  1551  0DB1  1683               	bsf	3,5	;RP0=1, select bank1
  1552  0DB2  1303               	bcf	3,6	;RP1=0, select bank1
  1553  0DB3  0850               	movf	(main@numerob+2)^(0+128),w
  1554  0DB4  1283               	bcf	3,5	;RP0=0, select bank0
  1555  0DB5  1303               	bcf	3,6	;RP1=0, select bank0
  1556  0DB6  00E7               	movwf	LCD_Writeflo@c+2
  1557  0DB7  3004               	movlw	4
  1558  0DB8  00EA               	movwf	??_main
  1559  0DB9  086A               	movf	??_main,w
  1560  0DBA  00E8               	movwf	LCD_Writeflo@p
  1561  0DBB  160A  118A  23EA  120A  158A  	fcall	_LCD_Writeflo
  1562                           
  1563                           ;main.c: 118: LCD_Putchar(' ');
  1564  0DC0  3020               	movlw	32
  1565  0DC1  160A  158A  2669  120A  158A  	fcall	_LCD_Putchar
  1566                           
  1567                           ;main.c: 119: LCD_Writeflo(numeroc,1);
  1568  0DC6  1683               	bsf	3,5	;RP0=1, select bank1
  1569  0DC7  1303               	bcf	3,6	;RP1=0, select bank1
  1570  0DC8  0851               	movf	main@numeroc^(0+128),w
  1571  0DC9  1283               	bcf	3,5	;RP0=0, select bank0
  1572  0DCA  1303               	bcf	3,6	;RP1=0, select bank0
  1573  0DCB  00E5               	movwf	LCD_Writeflo@c
  1574  0DCC  1683               	bsf	3,5	;RP0=1, select bank1
  1575  0DCD  1303               	bcf	3,6	;RP1=0, select bank1
  1576  0DCE  0852               	movf	(main@numeroc+1)^(0+128),w
  1577  0DCF  1283               	bcf	3,5	;RP0=0, select bank0
  1578  0DD0  1303               	bcf	3,6	;RP1=0, select bank0
  1579  0DD1  00E6               	movwf	LCD_Writeflo@c+1
  1580  0DD2  1683               	bsf	3,5	;RP0=1, select bank1
  1581  0DD3  1303               	bcf	3,6	;RP1=0, select bank1
  1582  0DD4  0853               	movf	(main@numeroc+2)^(0+128),w
  1583  0DD5  1283               	bcf	3,5	;RP0=0, select bank0
  1584  0DD6  1303               	bcf	3,6	;RP1=0, select bank0
  1585  0DD7  00E7               	movwf	LCD_Writeflo@c+2
  1586  0DD8  01E8               	clrf	LCD_Writeflo@p
  1587  0DD9  0AE8               	incf	LCD_Writeflo@p,f
  1588  0DDA  160A  118A  23EA  120A  158A  	fcall	_LCD_Writeflo
  1589                           
  1590                           ;main.c: 120: _delay((unsigned long)((3000)*(20000000/4000.0)));
  1591  0DDF  304D               	movlw	77
  1592  0DE0  1283               	bcf	3,5	;RP0=0, select bank0
  1593  0DE1  1303               	bcf	3,6	;RP1=0, select bank0
  1594  0DE2  00EC               	movwf	??_main+2
  1595  0DE3  3019               	movlw	25
  1596  0DE4  00EB               	movwf	??_main+1
  1597  0DE5  304F               	movlw	79
  1598  0DE6  00EA               	movwf	??_main
  1599  0DE7                     u4377:	
  1600  0DE7  0BEA               	decfsz	??_main,f
  1601  0DE8  2DE7               	goto	u4377
  1602  0DE9  0BEB               	decfsz	??_main+1,f
  1603  0DEA  2DE7               	goto	u4377
  1604  0DEB  0BEC               	decfsz	??_main+2,f
  1605  0DEC  2DE7               	goto	u4377
  1606                           
  1607                           ;main.c: 121: LCD_Clear();
  1608  0DED  160A  158A  2659  120A  158A  	fcall	_LCD_Clear
  1609                           
  1610                           ;main.c: 127: LCD_Customchar(0,play);
  1611  0DF2  30E0               	movlw	low (_play| (0+32768))
  1612  0DF3  00F5               	movwf	LCD_Customchar@b
  1613  0DF4  3090               	movlw	high (_play| (0+32768))
  1614  0DF5  00F6               	movwf	LCD_Customchar@b+1
  1615  0DF6  3000               	movlw	0
  1616  0DF7  120A  158A  2005  120A  158A  	fcall	_LCD_Customchar
  1617                           
  1618                           ;main.c: 128: LCD_Customchar(1,stop);
  1619  0DFC  30D8               	movlw	low (_stop| (0+32768))
  1620  0DFD  00F5               	movwf	LCD_Customchar@b
  1621  0DFE  3090               	movlw	high (_stop| (0+32768))
  1622  0DFF  00F6               	movwf	LCD_Customchar@b+1
  1623  0E00  3001               	movlw	1
  1624  0E01  120A  158A  2005  120A  158A  	fcall	_LCD_Customchar
  1625                           
  1626                           ;main.c: 129: LCD_Customchar(2,cuore);
  1627  0E06  30D0               	movlw	low (_cuore| (0+32768))
  1628  0E07  00F5               	movwf	LCD_Customchar@b
  1629  0E08  3090               	movlw	high (_cuore| (0+32768))
  1630  0E09  00F6               	movwf	LCD_Customchar@b+1
  1631  0E0A  3002               	movlw	2
  1632  0E0B  120A  158A  2005  120A  158A  	fcall	_LCD_Customchar
  1633                           
  1634                           ;main.c: 130: LCD_Customchar(3,invader);
  1635  0E10  30C8               	movlw	low (_invader| (0+32768))
  1636  0E11  00F5               	movwf	LCD_Customchar@b
  1637  0E12  3090               	movlw	high (_invader| (0+32768))
  1638  0E13  00F6               	movwf	LCD_Customchar@b+1
  1639  0E14  3003               	movlw	3
  1640  0E15  120A  158A  2005  120A  158A  	fcall	_LCD_Customchar
  1641                           
  1642                           ;main.c: 131: LCD_Customchar(4,sole);
  1643  0E1A  30C0               	movlw	low (_sole| (0+32768))
  1644  0E1B  00F5               	movwf	LCD_Customchar@b
  1645  0E1C  3090               	movlw	high (_sole| (0+32768))
  1646  0E1D  00F6               	movwf	LCD_Customchar@b+1
  1647  0E1E  3004               	movlw	4
  1648  0E1F  120A  158A  2005  120A  158A  	fcall	_LCD_Customchar
  1649                           
  1650                           ;main.c: 132: LCD_Customchar(5,teschio);
  1651  0E24  30B8               	movlw	low (_teschio| (0+32768))
  1652  0E25  00F5               	movwf	LCD_Customchar@b
  1653  0E26  3090               	movlw	high (_teschio| (0+32768))
  1654  0E27  00F6               	movwf	LCD_Customchar@b+1
  1655  0E28  3005               	movlw	5
  1656  0E29  120A  158A  2005  120A  158A  	fcall	_LCD_Customchar
  1657                           
  1658                           ;main.c: 133: LCD_Customchar(6,smile);
  1659  0E2E  30B0               	movlw	low (_smile| (0+32768))
  1660  0E2F  00F5               	movwf	LCD_Customchar@b
  1661  0E30  3090               	movlw	high (_smile| (0+32768))
  1662  0E31  00F6               	movwf	LCD_Customchar@b+1
  1663  0E32  3006               	movlw	6
  1664  0E33  120A  158A  2005  120A  158A  	fcall	_LCD_Customchar
  1665                           
  1666                           ;main.c: 134: LCD_Customchar(7,sad);
  1667  0E38  30A8               	movlw	low (_sad| (0+32768))
  1668  0E39  00F5               	movwf	LCD_Customchar@b
  1669  0E3A  3090               	movlw	high (_sad| (0+32768))
  1670  0E3B  00F6               	movwf	LCD_Customchar@b+1
  1671  0E3C  3007               	movlw	7
  1672  0E3D  120A  158A  2005  120A  158A  	fcall	_LCD_Customchar
  1673                           
  1674                           ;main.c: 137: LCD_Clear();
  1675  0E42  160A  158A  2659  120A  158A  	fcall	_LCD_Clear
  1676                           
  1677                           ;main.c: 138: LCD_Writestr("Caratteri custom");
  1678  0E47  30E8               	movlw	low (STR_6| (0+32768))
  1679  0E48  00F4               	movwf	LCD_Writestr@s
  1680  0E49  3090               	movlw	high (STR_6| (0+32768))
  1681  0E4A  00F5               	movwf	LCD_Writestr@s+1
  1682  0E4B  160A  158A  2720  120A  158A  	fcall	_LCD_Writestr
  1683                           
  1684                           ;main.c: 139: LCD_Goto(2,1);
  1685  0E50  01F5               	clrf	LCD_Goto@col
  1686  0E51  0AF5               	incf	LCD_Goto@col,f
  1687  0E52  3002               	movlw	2
  1688  0E53  160A  118A  2207  120A  158A  	fcall	_LCD_Goto
  1689                           
  1690                           ;main.c: 142: LCD_Putchar(0);
  1691  0E58  3000               	movlw	0
  1692  0E59  160A  158A  2669  120A  158A  	fcall	_LCD_Putchar
  1693                           
  1694                           ;main.c: 143: LCD_Putchar(1);
  1695  0E5E  3001               	movlw	1
  1696  0E5F  160A  158A  2669  120A  158A  	fcall	_LCD_Putchar
  1697                           
  1698                           ;main.c: 144: LCD_Putchar(2);
  1699  0E64  3002               	movlw	2
  1700  0E65  160A  158A  2669  120A  158A  	fcall	_LCD_Putchar
  1701                           
  1702                           ;main.c: 145: LCD_Putchar(3);
  1703  0E6A  3003               	movlw	3
  1704  0E6B  160A  158A  2669  120A  158A  	fcall	_LCD_Putchar
  1705                           
  1706                           ;main.c: 146: LCD_Putchar(4);
  1707  0E70  3004               	movlw	4
  1708  0E71  160A  158A  2669  120A  158A  	fcall	_LCD_Putchar
  1709                           
  1710                           ;main.c: 147: LCD_Putchar(5);
  1711  0E76  3005               	movlw	5
  1712  0E77  160A  158A  2669  120A  158A  	fcall	_LCD_Putchar
  1713                           
  1714                           ;main.c: 148: LCD_Putchar(6);
  1715  0E7C  3006               	movlw	6
  1716  0E7D  160A  158A  2669  120A  158A  	fcall	_LCD_Putchar
  1717                           
  1718                           ;main.c: 149: LCD_Putchar(7);
  1719  0E82  3007               	movlw	7
  1720  0E83  160A  158A  2669  120A  158A  	fcall	_LCD_Putchar
  1721                           
  1722                           ;main.c: 150: _delay((unsigned long)((3000)*(20000000/4000.0)));
  1723  0E88  304D               	movlw	77
  1724  0E89  1283               	bcf	3,5	;RP0=0, select bank0
  1725  0E8A  1303               	bcf	3,6	;RP1=0, select bank0
  1726  0E8B  00EC               	movwf	??_main+2
  1727  0E8C  3019               	movlw	25
  1728  0E8D  00EB               	movwf	??_main+1
  1729  0E8E  304F               	movlw	79
  1730  0E8F  00EA               	movwf	??_main
  1731  0E90                     u4387:	
  1732  0E90  0BEA               	decfsz	??_main,f
  1733  0E91  2E90               	goto	u4387
  1734  0E92  0BEB               	decfsz	??_main+1,f
  1735  0E93  2E90               	goto	u4387
  1736  0E94  0BEC               	decfsz	??_main+2,f
  1737  0E95  2E90               	goto	u4387
  1738                           
  1739                           ;main.c: 151: LCD_Clear();
  1740  0E96  160A  158A  2659  120A  158A  	fcall	_LCD_Clear
  1741                           
  1742                           ;main.c: 154: uint8_t posU=1;
  1743  0E9B  1683               	bsf	3,5	;RP0=1, select bank1
  1744  0E9C  1303               	bcf	3,6	;RP1=0, select bank1
  1745  0E9D  01D8               	clrf	main@posU^(0+128)
  1746  0E9E  0AD8               	incf	main@posU^(0+128),f
  1747                           
  1748                           ;main.c: 155: uint8_t posD=16;
  1749  0E9F  3010               	movlw	16
  1750  0EA0  1283               	bcf	3,5	;RP0=0, select bank0
  1751  0EA1  1303               	bcf	3,6	;RP1=0, select bank0
  1752  0EA2  00EA               	movwf	??_main
  1753  0EA3  086A               	movf	??_main,w
  1754  0EA4  1683               	bsf	3,5	;RP0=1, select bank1
  1755  0EA5  1303               	bcf	3,6	;RP1=0, select bank1
  1756  0EA6  00D5               	movwf	main@posD^(0+128)
  1757                           
  1758                           ;main.c: 157: LCD_Customchar(0,pacmanr);
  1759  0EA7  30A0               	movlw	low (_pacmanr| (0+32768))
  1760  0EA8  00F5               	movwf	LCD_Customchar@b
  1761  0EA9  3090               	movlw	high (_pacmanr| (0+32768))
  1762  0EAA  00F6               	movwf	LCD_Customchar@b+1
  1763  0EAB  3000               	movlw	0
  1764  0EAC  120A  158A  2005  120A  158A  	fcall	_LCD_Customchar
  1765                           
  1766                           ;main.c: 158: LCD_Customchar(1,pacmanl);
  1767  0EB1  3098               	movlw	low (_pacmanl| (0+32768))
  1768  0EB2  00F5               	movwf	LCD_Customchar@b
  1769  0EB3  3090               	movlw	high (_pacmanl| (0+32768))
  1770  0EB4  00F6               	movwf	LCD_Customchar@b+1
  1771  0EB5  3001               	movlw	1
  1772  0EB6  120A  158A  2005  120A  158A  	fcall	_LCD_Customchar
  1773                           
  1774                           ;main.c: 159: LCD_Customchar(2,dot);
  1775  0EBB  3090               	movlw	low (_dot| (0+32768))
  1776  0EBC  00F5               	movwf	LCD_Customchar@b
  1777  0EBD  3090               	movlw	high (_dot| (0+32768))
  1778  0EBE  00F6               	movwf	LCD_Customchar@b+1
  1779  0EBF  3002               	movlw	2
  1780  0EC0  120A  158A  2005  120A  158A  	fcall	_LCD_Customchar
  1781                           
  1782                           ;main.c: 160: LCD_Customchar(3,ghost);
  1783  0EC5  3088               	movlw	low (_ghost| (0+32768))
  1784  0EC6  00F5               	movwf	LCD_Customchar@b
  1785  0EC7  3090               	movlw	high (_ghost| (0+32768))
  1786  0EC8  00F6               	movwf	LCD_Customchar@b+1
  1787  0EC9  3003               	movlw	3
  1788  0ECA  120A  158A  2005  120A  158A  	fcall	_LCD_Customchar
  1789                           
  1790                           ;main.c: 161: LCD_Clear();
  1791  0ECF  160A  158A  2659  120A  158A  	fcall	_LCD_Clear
  1792                           
  1793                           ;main.c: 166: for (int8_t c=0; c<16; c++)
  1794  0ED4  1683               	bsf	3,5	;RP0=1, select bank1
  1795  0ED5  1303               	bcf	3,6	;RP1=0, select bank1
  1796  0ED6  01D6               	clrf	main@c^(0+128)
  1797  0ED7  0856               	movf	main@c^(0+128),w
  1798  0ED8  3A80               	xorlw	128
  1799  0ED9  3E70               	addlw	-144
  1800  0EDA  1803               	btfsc	3,0
  1801  0EDB  2F74               	goto	l71
  1802  0EDC                     l3133:	
  1803                           
  1804                           ;main.c: 167: {
  1805                           ;main.c: 168: LCD_Clear();
  1806  0EDC  160A  158A  2659  120A  158A  	fcall	_LCD_Clear
  1807                           
  1808                           ;main.c: 170: LCD_Goto(1,posU);
  1809  0EE1  1683               	bsf	3,5	;RP0=1, select bank1
  1810  0EE2  1303               	bcf	3,6	;RP1=0, select bank1
  1811  0EE3  0858               	movf	main@posU^(0+128),w
  1812  0EE4  1283               	bcf	3,5	;RP0=0, select bank0
  1813  0EE5  1303               	bcf	3,6	;RP1=0, select bank0
  1814  0EE6  00EA               	movwf	??_main
  1815  0EE7  086A               	movf	??_main,w
  1816  0EE8  00F5               	movwf	LCD_Goto@col
  1817  0EE9  3001               	movlw	1
  1818  0EEA  160A  118A  2207  120A  158A  	fcall	_LCD_Goto
  1819                           
  1820                           ;main.c: 171: LCD_Putchar(0);
  1821  0EEF  3000               	movlw	0
  1822  0EF0  160A  158A  2669  120A  158A  	fcall	_LCD_Putchar
  1823                           
  1824                           ;main.c: 173: for (int8_t b=posU+1; b<17; b++)
  1825  0EF5  1683               	bsf	3,5	;RP0=1, select bank1
  1826  0EF6  1303               	bcf	3,6	;RP1=0, select bank1
  1827  0EF7  0858               	movf	main@posU^(0+128),w
  1828  0EF8  3E01               	addlw	1
  1829  0EF9  1283               	bcf	3,5	;RP0=0, select bank0
  1830  0EFA  1303               	bcf	3,6	;RP1=0, select bank0
  1831  0EFB  00EA               	movwf	??_main
  1832  0EFC  086A               	movf	??_main,w
  1833  0EFD  1683               	bsf	3,5	;RP0=1, select bank1
  1834  0EFE  1303               	bcf	3,6	;RP1=0, select bank1
  1835  0EFF  00D7               	movwf	main@b^(0+128)
  1836  0F00  0857               	movf	main@b^(0+128),w
  1837  0F01  3A80               	xorlw	128
  1838  0F02  3E6F               	addlw	-145
  1839  0F03  1803               	btfsc	3,0
  1840  0F04  2F18               	goto	l3151
  1841  0F05                     l3145:	
  1842                           
  1843                           ;main.c: 174: {
  1844                           ;main.c: 175: LCD_Putchar(2);
  1845  0F05  3002               	movlw	2
  1846  0F06  160A  158A  2669  120A  158A  	fcall	_LCD_Putchar
  1847  0F0B  3001               	movlw	1
  1848  0F0C  1283               	bcf	3,5	;RP0=0, select bank0
  1849  0F0D  1303               	bcf	3,6	;RP1=0, select bank0
  1850  0F0E  00EA               	movwf	??_main
  1851  0F0F  086A               	movf	??_main,w
  1852  0F10  1683               	bsf	3,5	;RP0=1, select bank1
  1853  0F11  1303               	bcf	3,6	;RP1=0, select bank1
  1854  0F12  07D7               	addwf	main@b^(0+128),f
  1855  0F13  0857               	movf	main@b^(0+128),w
  1856  0F14  3A80               	xorlw	128
  1857  0F15  3E6F               	addlw	-145
  1858  0F16  1C03               	skipc
  1859  0F17  2F05               	goto	l3145
  1860  0F18                     l3151:	
  1861                           
  1862                           ;main.c: 176: }
  1863                           ;main.c: 178: LCD_Goto(2,1);
  1864  0F18  01F5               	clrf	LCD_Goto@col
  1865  0F19  0AF5               	incf	LCD_Goto@col,f
  1866  0F1A  3002               	movlw	2
  1867  0F1B  160A  118A  2207  120A  158A  	fcall	_LCD_Goto
  1868                           
  1869                           ;main.c: 179: for (int8_t b=1; b<posD; b++)
  1870  0F20  1683               	bsf	3,5	;RP0=1, select bank1
  1871  0F21  1303               	bcf	3,6	;RP1=0, select bank1
  1872  0F22  01D4               	clrf	main@b_163^(0+128)
  1873  0F23  0AD4               	incf	main@b_163^(0+128),f
  1874  0F24                     l3159:	
  1875  0F24  0854               	movf	main@b_163^(0+128),w
  1876  0F25  1283               	bcf	3,5	;RP0=0, select bank0
  1877  0F26  1303               	bcf	3,6	;RP1=0, select bank0
  1878  0F27  00EA               	movwf	??_main
  1879  0F28  01EB               	clrf	??_main+1
  1880  0F29  1BEA               	btfsc	??_main,7
  1881  0F2A  03EB               	decf	??_main+1,f
  1882  0F2B  086B               	movf	??_main+1,w
  1883  0F2C  3A80               	xorlw	128
  1884  0F2D  00EC               	movwf	??_main+2
  1885  0F2E  3080               	movlw	128
  1886  0F2F  026C               	subwf	??_main+2,w
  1887  0F30  1D03               	skipz
  1888  0F31  2F38               	goto	u4315
  1889  0F32  1683               	bsf	3,5	;RP0=1, select bank1
  1890  0F33  1303               	bcf	3,6	;RP1=0, select bank1
  1891  0F34  0855               	movf	main@posD^(0+128),w
  1892  0F35  1283               	bcf	3,5	;RP0=0, select bank0
  1893  0F36  1303               	bcf	3,6	;RP1=0, select bank0
  1894  0F37  026A               	subwf	??_main,w
  1895  0F38                     u4315:	
  1896  0F38  1803               	btfsc	3,0
  1897  0F39  2F49               	goto	l3161
  1898                           
  1899                           ;main.c: 180: {
  1900                           ;main.c: 181: LCD_Putchar(2);
  1901  0F3A  3002               	movlw	2
  1902  0F3B  160A  158A  2669  120A  158A  	fcall	_LCD_Putchar
  1903  0F40  3001               	movlw	1
  1904  0F41  1283               	bcf	3,5	;RP0=0, select bank0
  1905  0F42  1303               	bcf	3,6	;RP1=0, select bank0
  1906  0F43  00EA               	movwf	??_main
  1907  0F44  086A               	movf	??_main,w
  1908  0F45  1683               	bsf	3,5	;RP0=1, select bank1
  1909  0F46  1303               	bcf	3,6	;RP1=0, select bank1
  1910  0F47  07D4               	addwf	main@b_163^(0+128),f
  1911  0F48  2F24               	goto	l3159
  1912  0F49                     l3161:	
  1913                           
  1914                           ;main.c: 182: }
  1915                           ;main.c: 184: LCD_Putchar(1);
  1916  0F49  3001               	movlw	1
  1917  0F4A  160A  158A  2669  120A  158A  	fcall	_LCD_Putchar
  1918                           
  1919                           ;main.c: 185: posU++;
  1920  0F4F  3001               	movlw	1
  1921  0F50  1283               	bcf	3,5	;RP0=0, select bank0
  1922  0F51  1303               	bcf	3,6	;RP1=0, select bank0
  1923  0F52  00EA               	movwf	??_main
  1924  0F53  086A               	movf	??_main,w
  1925  0F54  1683               	bsf	3,5	;RP0=1, select bank1
  1926  0F55  1303               	bcf	3,6	;RP1=0, select bank1
  1927  0F56  07D8               	addwf	main@posU^(0+128),f
  1928                           
  1929                           ;main.c: 186: posD--;
  1930  0F57  3001               	movlw	1
  1931  0F58  02D5               	subwf	main@posD^(0+128),f
  1932                           
  1933                           ;main.c: 187: _delay((unsigned long)((150)*(20000000/4000.0)));
  1934  0F59  3004               	movlw	4
  1935  0F5A  1283               	bcf	3,5	;RP0=0, select bank0
  1936  0F5B  1303               	bcf	3,6	;RP1=0, select bank0
  1937  0F5C  00EC               	movwf	??_main+2
  1938  0F5D  30CF               	movlw	207
  1939  0F5E  00EB               	movwf	??_main+1
  1940  0F5F  3001               	movlw	1
  1941  0F60  00EA               	movwf	??_main
  1942  0F61                     u4397:	
  1943  0F61  0BEA               	decfsz	??_main,f
  1944  0F62  2F61               	goto	u4397
  1945  0F63  0BEB               	decfsz	??_main+1,f
  1946  0F64  2F61               	goto	u4397
  1947  0F65  0BEC               	decfsz	??_main+2,f
  1948  0F66  2F61               	goto	u4397
  1949  0F67  3001               	movlw	1
  1950  0F68  1283               	bcf	3,5	;RP0=0, select bank0
  1951  0F69  1303               	bcf	3,6	;RP1=0, select bank0
  1952  0F6A  00EA               	movwf	??_main
  1953  0F6B  086A               	movf	??_main,w
  1954  0F6C  1683               	bsf	3,5	;RP0=1, select bank1
  1955  0F6D  1303               	bcf	3,6	;RP1=0, select bank1
  1956  0F6E  07D6               	addwf	main@c^(0+128),f
  1957  0F6F  0856               	movf	main@c^(0+128),w
  1958  0F70  3A80               	xorlw	128
  1959  0F71  3E70               	addlw	-144
  1960  0F72  1C03               	skipc
  1961  0F73  2EDC               	goto	l3133
  1962  0F74                     l71:	
  1963                           
  1964                           ;main.c: 188: }
  1965                           ;main.c: 190: posU=1;
  1966  0F74  01D8               	clrf	main@posU^(0+128)
  1967  0F75  0AD8               	incf	main@posU^(0+128),f
  1968                           
  1969                           ;main.c: 191: posD=16;
  1970  0F76  3010               	movlw	16
  1971  0F77  1283               	bcf	3,5	;RP0=0, select bank0
  1972  0F78  1303               	bcf	3,6	;RP1=0, select bank0
  1973  0F79  00EA               	movwf	??_main
  1974  0F7A  086A               	movf	??_main,w
  1975  0F7B  1683               	bsf	3,5	;RP0=1, select bank1
  1976  0F7C  1303               	bcf	3,6	;RP1=0, select bank1
  1977  0F7D  00D5               	movwf	main@posD^(0+128)
  1978                           
  1979                           ;main.c: 192: LCD_Clear();
  1980  0F7E  160A  158A  2659  120A  158A  	fcall	_LCD_Clear
  1981                           
  1982                           ;main.c: 193: _delay((unsigned long)((100)*(20000000/4000.0)));
  1983  0F83  3003               	movlw	3
  1984  0F84  1283               	bcf	3,5	;RP0=0, select bank0
  1985  0F85  1303               	bcf	3,6	;RP1=0, select bank0
  1986  0F86  00EC               	movwf	??_main+2
  1987  0F87  308A               	movlw	138
  1988  0F88  00EB               	movwf	??_main+1
  1989  0F89  3055               	movlw	85
  1990  0F8A  00EA               	movwf	??_main
  1991  0F8B                     u4407:	
  1992  0F8B  0BEA               	decfsz	??_main,f
  1993  0F8C  2F8B               	goto	u4407
  1994  0F8D  0BEB               	decfsz	??_main+1,f
  1995  0F8E  2F8B               	goto	u4407
  1996  0F8F  0BEC               	decfsz	??_main+2,f
  1997  0F90  2F8B               	goto	u4407
  1998                           
  1999                           ;main.c: 194: LCD_Writestr("SETTOREZERO.COM");
  2000  0F91  30F9               	movlw	low (STR_7| (0+32768))
  2001  0F92  00F4               	movwf	LCD_Writestr@s
  2002  0F93  3090               	movlw	high (STR_7| (0+32768))
  2003  0F94  00F5               	movwf	LCD_Writestr@s+1
  2004  0F95  160A  158A  2720  120A  158A  	fcall	_LCD_Writestr
  2005                           
  2006                           ;main.c: 195: _delay((unsigned long)((1000)*(20000000/4000.0)));
  2007  0F9A  301A               	movlw	26
  2008  0F9B  1283               	bcf	3,5	;RP0=0, select bank0
  2009  0F9C  1303               	bcf	3,6	;RP1=0, select bank0
  2010  0F9D  00EC               	movwf	??_main+2
  2011  0F9E  305E               	movlw	94
  2012  0F9F  00EB               	movwf	??_main+1
  2013  0FA0  306D               	movlw	109
  2014  0FA1  00EA               	movwf	??_main
  2015  0FA2                     u4417:	
  2016  0FA2  0BEA               	decfsz	??_main,f
  2017  0FA3  2FA2               	goto	u4417
  2018  0FA4  0BEB               	decfsz	??_main+1,f
  2019  0FA5  2FA2               	goto	u4417
  2020  0FA6  0BEC               	decfsz	??_main+2,f
  2021  0FA7  2FA2               	goto	u4417
  2022  0FA8  2FA9               	nop2
  2023                           
  2024                           ;main.c: 196: LCD_Goto(2,1);
  2025  0FA9  01F5               	clrf	LCD_Goto@col
  2026  0FAA  0AF5               	incf	LCD_Goto@col,f
  2027  0FAB  3002               	movlw	2
  2028  0FAC  160A  118A  2207  120A  158A  	fcall	_LCD_Goto
  2029                           
  2030                           ;main.c: 200: for (uint8_t a=0; a<17; a++)
  2031  0FB1  1683               	bsf	3,5	;RP0=1, select bank1
  2032  0FB2  1303               	bcf	3,6	;RP1=0, select bank1
  2033  0FB3  01D9               	clrf	main@a^(0+128)
  2034  0FB4  3011               	movlw	17
  2035  0FB5  0259               	subwf	main@a^(0+128),w
  2036  0FB6  1803               	btfsc	3,0
  2037  0FB7  2FFA               	goto	l3203
  2038  0FB8                     l3191:	
  2039                           
  2040                           ;main.c: 201: {
  2041                           ;main.c: 202: LCD_Goto(2,a);
  2042  0FB8  0859               	movf	main@a^(0+128),w
  2043  0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  2044  0FBA  1303               	bcf	3,6	;RP1=0, select bank0
  2045  0FBB  00EA               	movwf	??_main
  2046  0FBC  086A               	movf	??_main,w
  2047  0FBD  00F5               	movwf	LCD_Goto@col
  2048  0FBE  3002               	movlw	2
  2049  0FBF  160A  118A  2207  120A  158A  	fcall	_LCD_Goto
  2050                           
  2051                           ;main.c: 203: LCD_Putchar(' ');
  2052  0FC4  3020               	movlw	32
  2053  0FC5  160A  158A  2669  120A  158A  	fcall	_LCD_Putchar
  2054                           
  2055                           ;main.c: 204: LCD_Goto(2,a+1);
  2056  0FCA  1683               	bsf	3,5	;RP0=1, select bank1
  2057  0FCB  1303               	bcf	3,6	;RP1=0, select bank1
  2058  0FCC  0859               	movf	main@a^(0+128),w
  2059  0FCD  3E01               	addlw	1
  2060  0FCE  1283               	bcf	3,5	;RP0=0, select bank0
  2061  0FCF  1303               	bcf	3,6	;RP1=0, select bank0
  2062  0FD0  00EA               	movwf	??_main
  2063  0FD1  086A               	movf	??_main,w
  2064  0FD2  00F5               	movwf	LCD_Goto@col
  2065  0FD3  3002               	movlw	2
  2066  0FD4  160A  118A  2207  120A  158A  	fcall	_LCD_Goto
  2067                           
  2068                           ;main.c: 205: LCD_Putchar(3);
  2069  0FD9  3003               	movlw	3
  2070  0FDA  160A  158A  2669  120A  158A  	fcall	_LCD_Putchar
  2071                           
  2072                           ;main.c: 206: _delay((unsigned long)((140)*(20000000/4000.0)));
  2073  0FDF  3004               	movlw	4
  2074  0FE0  1283               	bcf	3,5	;RP0=0, select bank0
  2075  0FE1  1303               	bcf	3,6	;RP1=0, select bank0
  2076  0FE2  00EC               	movwf	??_main+2
  2077  0FE3  308E               	movlw	142
  2078  0FE4  00EB               	movwf	??_main+1
  2079  0FE5  3011               	movlw	17
  2080  0FE6  00EA               	movwf	??_main
  2081  0FE7                     u4427:	
  2082  0FE7  0BEA               	decfsz	??_main,f
  2083  0FE8  2FE7               	goto	u4427
  2084  0FE9  0BEB               	decfsz	??_main+1,f
  2085  0FEA  2FE7               	goto	u4427
  2086  0FEB  0BEC               	decfsz	??_main+2,f
  2087  0FEC  2FE7               	goto	u4427
  2088  0FED  2FEE               	nop2
  2089  0FEE  3001               	movlw	1
  2090  0FEF  1283               	bcf	3,5	;RP0=0, select bank0
  2091  0FF0  1303               	bcf	3,6	;RP1=0, select bank0
  2092  0FF1  00EA               	movwf	??_main
  2093  0FF2  086A               	movf	??_main,w
  2094  0FF3  1683               	bsf	3,5	;RP0=1, select bank1
  2095  0FF4  1303               	bcf	3,6	;RP1=0, select bank1
  2096  0FF5  07D9               	addwf	main@a^(0+128),f
  2097  0FF6  3011               	movlw	17
  2098  0FF7  0259               	subwf	main@a^(0+128),w
  2099  0FF8  1C03               	skipc
  2100  0FF9  2FB8               	goto	l3191
  2101  0FFA                     l3203:	
  2102                           
  2103                           ;main.c: 207: }
  2104                           ;main.c: 208: LCD_Clear();
  2105  0FFA  160A  158A  2659  120A  158A  	fcall	_LCD_Clear
  2106  0FFF  2CF7               	goto	l3027
  2107  1000                     __end_of_main:	
  2108                           
  2109                           	psect	text1
  2110  1EAA                     __ptext1:	
  2111 ;; *************** function _settings *****************
  2112 ;; Defined at:
  2113 ;;		line 212 in file "main.c"
  2114 ;; Parameters:    Size  Location     Type
  2115 ;;		None
  2116 ;; Auto vars:     Size  Location     Type
  2117 ;;		None
  2118 ;; Return value:  Size  Location     Type
  2119 ;;                  1    wreg      void 
  2120 ;; Registers used:
  2121 ;;		wreg, status,2
  2122 ;; Tracked objects:
  2123 ;;		On entry : 0/0
  2124 ;;		On exit  : 0/0
  2125 ;;		Unchanged: 0/0
  2126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2127 ;;      Params:         0       0       0       0       0
  2128 ;;      Locals:         0       0       0       0       0
  2129 ;;      Temps:          0       0       0       0       0
  2130 ;;      Totals:         0       0       0       0       0
  2131 ;;Total ram usage:        0 bytes
  2132 ;; Hardware stack levels used:    1
  2133 ;; This function calls:
  2134 ;;		Nothing
  2135 ;; This function is called by:
  2136 ;;		_main
  2137 ;; This function uses a non-reentrant model
  2138 ;;
  2139                           
  2140                           
  2141                           ;psect for function _settings
  2142  1EAA                     _settings:	
  2143                           
  2144                           ;main.c: 214: ANSEL=0;
  2145                           
  2146                           ;incstack = 0
  2147                           ; Regs used in _settings: [wreg+status,2]
  2148  1EAA  1683               	bsf	3,5	;RP0=1, select bank3
  2149  1EAB  1703               	bsf	3,6	;RP1=1, select bank3
  2150  1EAC  0188               	clrf	8	;volatile
  2151                           
  2152                           ;main.c: 215: ANSELH=0;
  2153  1EAD  0189               	clrf	9	;volatile
  2154                           
  2155                           ;main.c: 216: ADCON0bits.ADON=0;
  2156  1EAE  1283               	bcf	3,5	;RP0=0, select bank0
  2157  1EAF  1303               	bcf	3,6	;RP1=0, select bank0
  2158  1EB0  101F               	bcf	31,0	;volatile
  2159                           
  2160                           ;main.c: 217: TRISA=0xFF;
  2161  1EB1  30FF               	movlw	255
  2162  1EB2  1683               	bsf	3,5	;RP0=1, select bank1
  2163  1EB3  1303               	bcf	3,6	;RP1=0, select bank1
  2164  1EB4  0085               	movwf	5	;volatile
  2165                           
  2166                           ;main.c: 218: TRISB=0xFF;
  2167  1EB5  30FF               	movlw	255
  2168  1EB6  0086               	movwf	6	;volatile
  2169                           
  2170                           ;main.c: 219: TRISC=0xFF;
  2171  1EB7  30FF               	movlw	255
  2172  1EB8  0087               	movwf	7	;volatile
  2173                           
  2174                           ;main.c: 220: TRISD=0xFF;
  2175  1EB9  30FF               	movlw	255
  2176  1EBA  0088               	movwf	8	;volatile
  2177                           
  2178                           ;main.c: 221: TRISE=0xFF;
  2179  1EBB  30FF               	movlw	255
  2180  1EBC  0089               	movwf	9	;volatile
  2181  1EBD  0008               	return
  2182  1EBE                     __end_of_settings:	
  2183                           
  2184                           	psect	text2
  2185  1F43                     __ptext2:	
  2186 ;; *************** function _LCD_Writesig *****************
  2187 ;; Defined at:
  2188 ;;		line 192 in file "hd44780sz.c"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;  c               2    5[BANK0 ] int 
  2191 ;; Auto vars:     Size  Location     Type
  2192 ;;		None
  2193 ;; Return value:  Size  Location     Type
  2194 ;;                  1    wreg      void 
  2195 ;; Registers used:
  2196 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2197 ;; Tracked objects:
  2198 ;;		On entry : 0/0
  2199 ;;		On exit  : 0/0
  2200 ;;		Unchanged: 0/0
  2201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2202 ;;      Params:         0       2       0       0       0
  2203 ;;      Locals:         0       0       0       0       0
  2204 ;;      Temps:          0       0       0       0       0
  2205 ;;      Totals:         0       2       0       0       0
  2206 ;;Total ram usage:        2 bytes
  2207 ;; Hardware stack levels used:    1
  2208 ;; Hardware stack levels required when called:    5
  2209 ;; This function calls:
  2210 ;;		_LCD_Putchar
  2211 ;;		_LCD_Writeuns
  2212 ;;		___wmul
  2213 ;; This function is called by:
  2214 ;;		_main
  2215 ;; This function uses a non-reentrant model
  2216 ;;
  2217                           
  2218                           
  2219                           ;psect for function _LCD_Writesig
  2220  1F43                     _LCD_Writesig:	
  2221                           
  2222                           ;hd44780sz.c: 194: if(c<0)
  2223                           
  2224                           ;incstack = 0
  2225                           ; Regs used in _LCD_Writesig: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2226  1F43  1283               	bcf	3,5	;RP0=0, select bank0
  2227  1F44  1303               	bcf	3,6	;RP1=0, select bank0
  2228  1F45  1FA6               	btfss	LCD_Writesig@c+1,7
  2229  1F46  2F62               	goto	l2981
  2230                           
  2231                           ;hd44780sz.c: 195: {
  2232                           ;hd44780sz.c: 196: LCD_Putchar('-');
  2233  1F47  302D               	movlw	45
  2234  1F48  160A  158A  2669  160A  158A  	fcall	_LCD_Putchar
  2235                           
  2236                           ;hd44780sz.c: 197: c*=(-1);
  2237  1F4D  30FF               	movlw	255
  2238  1F4E  00F0               	movwf	___wmul@multiplier
  2239  1F4F  30FF               	movlw	255
  2240  1F50  00F1               	movwf	___wmul@multiplier+1
  2241  1F51  1283               	bcf	3,5	;RP0=0, select bank0
  2242  1F52  1303               	bcf	3,6	;RP1=0, select bank0
  2243  1F53  0826               	movf	LCD_Writesig@c+1,w
  2244  1F54  00F3               	movwf	___wmul@multiplicand+1
  2245  1F55  0825               	movf	LCD_Writesig@c,w
  2246  1F56  00F2               	movwf	___wmul@multiplicand
  2247  1F57  160A  158A  26FF  160A  158A  	fcall	___wmul
  2248  1F5C  0871               	movf	?___wmul+1,w
  2249  1F5D  1283               	bcf	3,5	;RP0=0, select bank0
  2250  1F5E  1303               	bcf	3,6	;RP1=0, select bank0
  2251  1F5F  00A6               	movwf	LCD_Writesig@c+1
  2252  1F60  0870               	movf	?___wmul,w
  2253  1F61  00A5               	movwf	LCD_Writesig@c
  2254  1F62                     l2981:	
  2255                           
  2256                           ;hd44780sz.c: 198: }
  2257                           ;hd44780sz.c: 199: LCD_Writeuns((unsigned)c);
  2258  1F62  0826               	movf	LCD_Writesig@c+1,w
  2259  1F63  00F9               	movwf	LCD_Writeuns@c+1
  2260  1F64  0825               	movf	LCD_Writesig@c,w
  2261  1F65  00F8               	movwf	LCD_Writeuns@c
  2262  1F66  160A  118A  2313   	fcall	_LCD_Writeuns
  2263  1F69  0008               	return
  2264  1F6A                     __end_of_LCD_Writesig:	
  2265                           
  2266                           	psect	text3
  2267  1313                     __ptext3:	
  2268 ;; *************** function _LCD_Writeuns *****************
  2269 ;; Defined at:
  2270 ;;		line 153 in file "hd44780sz.c"
  2271 ;; Parameters:    Size  Location     Type
  2272 ;;  c               2    8[COMMON] unsigned int 
  2273 ;; Auto vars:     Size  Location     Type
  2274 ;;  k               2    1[BANK0 ] unsigned int 
  2275 ;;  i               1    4[BANK0 ] unsigned char 
  2276 ;;  t1              1    3[BANK0 ] unsigned char 
  2277 ;;  wrote           1    0[BANK0 ] unsigned char 
  2278 ;; Return value:  Size  Location     Type
  2279 ;;                  1    wreg      void 
  2280 ;; Registers used:
  2281 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2282 ;; Tracked objects:
  2283 ;;		On entry : 0/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2287 ;;      Params:         2       0       0       0       0
  2288 ;;      Locals:         0       5       0       0       0
  2289 ;;      Temps:          2       0       0       0       0
  2290 ;;      Totals:         4       5       0       0       0
  2291 ;;Total ram usage:        9 bytes
  2292 ;; Hardware stack levels used:    1
  2293 ;; Hardware stack levels required when called:    4
  2294 ;; This function calls:
  2295 ;;		_LCD_Putchar
  2296 ;;		___lwdiv
  2297 ;;		___wmul
  2298 ;; This function is called by:
  2299 ;;		_main
  2300 ;;		_LCD_Writesig
  2301 ;; This function uses a non-reentrant model
  2302 ;;
  2303                           
  2304                           
  2305                           ;psect for function _LCD_Writeuns
  2306  1313                     _LCD_Writeuns:	
  2307                           
  2308                           ;hd44780sz.c: 155: uint8_t t1,i;
  2309                           ;hd44780sz.c: 156: bool wrote;
  2310                           ;hd44780sz.c: 157: uint16_t k;
  2311                           ;hd44780sz.c: 158: wrote=0;
  2312                           
  2313                           ;incstack = 0
  2314                           ; Regs used in _LCD_Writeuns: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2315  1313  1283               	bcf	3,5	;RP0=0, select bank0
  2316  1314  1303               	bcf	3,6	;RP1=0, select bank0
  2317  1315  01A0               	clrf	LCD_Writeuns@wrote
  2318                           
  2319                           ;hd44780sz.c: 159: for (i=4;i>=1;i--)
  2320  1316  3004               	movlw	4
  2321  1317  00FA               	movwf	??_LCD_Writeuns
  2322  1318  087A               	movf	??_LCD_Writeuns,w
  2323  1319  00A4               	movwf	LCD_Writeuns@i
  2324  131A  2B75               	goto	L4
  2325  131B                     l2693:	
  2326                           ;hd44780sz.c: 162: {
  2327                           ;hd44780sz.c: 163: case 4:
  2328                           
  2329                           ;hd44780sz.c: 160: {
  2330                           ;hd44780sz.c: 161: switch(i)
  2331                           
  2332                           
  2333                           ;hd44780sz.c: 164: k=10000;
  2334  131B  3010               	movlw	16
  2335  131C  00A1               	movwf	LCD_Writeuns@k
  2336  131D  3027               	movlw	39
  2337  131E  2B28               	goto	L3
  2338  131F                     l2695:	
  2339                           ;hd44780sz.c: 167: case 3:
  2340                           
  2341                           ;hd44780sz.c: 165: break;
  2342                           
  2343                           
  2344                           ;hd44780sz.c: 168: k=1000;
  2345  131F  30E8               	movlw	232
  2346  1320  00A1               	movwf	LCD_Writeuns@k
  2347  1321  3003               	movlw	3
  2348  1322  2B28               	goto	L3
  2349  1323                     l2697:	
  2350                           ;hd44780sz.c: 171: case 2:
  2351                           
  2352                           ;hd44780sz.c: 169: break;
  2353                           
  2354                           
  2355                           ;hd44780sz.c: 172: k=100;
  2356  1323  3064               	movlw	100
  2357  1324  2B26               	goto	L5
  2358  1325                     l2699:	
  2359                           ;hd44780sz.c: 175: case 1:
  2360                           
  2361                           ;hd44780sz.c: 173: break;
  2362                           
  2363                           
  2364                           ;hd44780sz.c: 176: k=10;
  2365  1325  300A               	movlw	10
  2366  1326                     L5:	
  2367  1326  00A1               	movwf	LCD_Writeuns@k
  2368  1327  3000               	movlw	0
  2369  1328                     L3:	
  2370  1328  00A2               	movwf	LCD_Writeuns@k+1
  2371                           
  2372                           ;hd44780sz.c: 178: }
  2373                           
  2374                           ;hd44780sz.c: 177: break;
  2375  1329  2B38               	goto	l2705
  2376  132A                     l2703:	
  2377  132A  0824               	movf	LCD_Writeuns@i,w
  2378                           
  2379                           ; Switch size 1, requested type "space"
  2380                           ; Number of cases is 4, Range of values is 1 to 4
  2381                           ; switch strategies available:
  2382                           ; Name         Instructions Cycles
  2383                           ; simple_byte           13     7 (average)
  2384                           ; direct_byte           23    11 (fixed)
  2385                           ; jumptable            263     9 (fixed)
  2386                           ;	Chosen strategy is simple_byte
  2387  132B  3A01               	xorlw	1	; case 1
  2388  132C  1903               	skipnz
  2389  132D  2B25               	goto	l2699
  2390  132E  3A03               	xorlw	3	; case 2
  2391  132F  1903               	skipnz
  2392  1330  2B23               	goto	l2697
  2393  1331  3A01               	xorlw	1	; case 3
  2394  1332  1903               	skipnz
  2395  1333  2B1F               	goto	l2695
  2396  1334  3A07               	xorlw	7	; case 4
  2397  1335  1903               	skipnz
  2398  1336  2B1B               	goto	l2693
  2399  1337  2B38               	goto	l2705
  2400  1338                     l2705:	
  2401                           
  2402                           ;hd44780sz.c: 179: t1=c/k;
  2403  1338  0822               	movf	LCD_Writeuns@k+1,w
  2404  1339  00F1               	movwf	___lwdiv@divisor+1
  2405  133A  0821               	movf	LCD_Writeuns@k,w
  2406  133B  00F0               	movwf	___lwdiv@divisor
  2407  133C  0879               	movf	LCD_Writeuns@c+1,w
  2408  133D  00F3               	movwf	___lwdiv@dividend+1
  2409  133E  0878               	movf	LCD_Writeuns@c,w
  2410  133F  00F2               	movwf	___lwdiv@dividend
  2411  1340  160A  158A  27C4  160A  118A  	fcall	___lwdiv
  2412  1345  0870               	movf	?___lwdiv,w
  2413  1346  00FA               	movwf	??_LCD_Writeuns
  2414  1347  087A               	movf	??_LCD_Writeuns,w
  2415  1348  1283               	bcf	3,5	;RP0=0, select bank0
  2416  1349  1303               	bcf	3,6	;RP1=0, select bank0
  2417  134A  00A3               	movwf	LCD_Writeuns@t1
  2418                           
  2419                           ;hd44780sz.c: 180: if((wrote)||(t1!=0))
  2420  134B  0820               	movf	LCD_Writeuns@wrote,w
  2421  134C  1903               	btfsc	3,2
  2422  134D  0823               	movf	LCD_Writeuns@t1,w
  2423  134E  1903               	btfsc	3,2
  2424  134F  2B5B               	goto	l145
  2425                           
  2426                           ;hd44780sz.c: 181: {
  2427                           ;hd44780sz.c: 182: LCD_Putchar(t1+'0');
  2428  1350  0823               	movf	LCD_Writeuns@t1,w
  2429  1351  3E30               	addlw	48
  2430  1352  160A  158A  2669  160A  118A  	fcall	_LCD_Putchar
  2431                           
  2432                           ;hd44780sz.c: 183: wrote=1;
  2433  1357  1283               	bcf	3,5	;RP0=0, select bank0
  2434  1358  1303               	bcf	3,6	;RP1=0, select bank0
  2435  1359  01A0               	clrf	LCD_Writeuns@wrote
  2436  135A  0AA0               	incf	LCD_Writeuns@wrote,f
  2437  135B                     l145:	
  2438                           
  2439                           ;hd44780sz.c: 184: }
  2440                           ;hd44780sz.c: 186: c-=(t1*k);
  2441  135B  0823               	movf	LCD_Writeuns@t1,w
  2442  135C  00FA               	movwf	??_LCD_Writeuns
  2443  135D  01FB               	clrf	??_LCD_Writeuns+1
  2444  135E  087A               	movf	??_LCD_Writeuns,w
  2445  135F  00F0               	movwf	___wmul@multiplier
  2446  1360  087B               	movf	??_LCD_Writeuns+1,w
  2447  1361  00F1               	movwf	___wmul@multiplier+1
  2448  1362  0822               	movf	LCD_Writeuns@k+1,w
  2449  1363  00F3               	movwf	___wmul@multiplicand+1
  2450  1364  0821               	movf	LCD_Writeuns@k,w
  2451  1365  00F2               	movwf	___wmul@multiplicand
  2452  1366  160A  158A  26FF  160A  118A  	fcall	___wmul
  2453  136B  0870               	movf	?___wmul,w
  2454  136C  02F8               	subwf	LCD_Writeuns@c,f
  2455  136D  0871               	movf	?___wmul+1,w
  2456  136E  1C03               	skipc
  2457  136F  03F9               	decf	LCD_Writeuns@c+1,f
  2458  1370  02F9               	subwf	LCD_Writeuns@c+1,f
  2459  1371  3001               	movlw	1
  2460  1372  1283               	bcf	3,5	;RP0=0, select bank0
  2461  1373  1303               	bcf	3,6	;RP1=0, select bank0
  2462  1374  02A4               	subwf	LCD_Writeuns@i,f
  2463  1375                     L4:	
  2464  1375  0824               	movf	LCD_Writeuns@i,w
  2465  1376  1D03               	btfss	3,2
  2466  1377  2B2A               	goto	l2703
  2467                           
  2468                           ;hd44780sz.c: 187: }
  2469                           ;hd44780sz.c: 188: LCD_Putchar(c+'0');
  2470  1378  0878               	movf	LCD_Writeuns@c,w
  2471  1379  3E30               	addlw	48
  2472  137A  160A  158A  2669   	fcall	_LCD_Putchar
  2473  137D  0008               	return
  2474  137E                     __end_of_LCD_Writeuns:	
  2475                           
  2476                           	psect	text4
  2477  1FC4                     __ptext4:	
  2478 ;; *************** function ___lwdiv *****************
  2479 ;; Defined at:
  2480 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  2481 ;; Parameters:    Size  Location     Type
  2482 ;;  divisor         2    0[COMMON] unsigned int 
  2483 ;;  dividend        2    2[COMMON] unsigned int 
  2484 ;; Auto vars:     Size  Location     Type
  2485 ;;  quotient        2    5[COMMON] unsigned int 
  2486 ;;  counter         1    7[COMMON] unsigned char 
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  2    0[COMMON] unsigned int 
  2489 ;; Registers used:
  2490 ;;		wreg, status,2, status,0
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2496 ;;      Params:         4       0       0       0       0
  2497 ;;      Locals:         3       0       0       0       0
  2498 ;;      Temps:          1       0       0       0       0
  2499 ;;      Totals:         8       0       0       0       0
  2500 ;;Total ram usage:        8 bytes
  2501 ;; Hardware stack levels used:    1
  2502 ;; This function calls:
  2503 ;;		Nothing
  2504 ;; This function is called by:
  2505 ;;		_LCD_Writeuns
  2506 ;; This function uses a non-reentrant model
  2507 ;;
  2508                           
  2509                           
  2510                           ;psect for function ___lwdiv
  2511  1FC4                     ___lwdiv:	
  2512                           
  2513                           ;incstack = 0
  2514                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2515  1FC4  01F5               	clrf	___lwdiv@quotient
  2516  1FC5  01F6               	clrf	___lwdiv@quotient+1
  2517  1FC6  0870               	movf	___lwdiv@divisor,w
  2518  1FC7  0471               	iorwf	___lwdiv@divisor+1,w
  2519  1FC8  1903               	btfsc	3,2
  2520  1FC9  2FFB               	goto	l2673
  2521  1FCA  01F7               	clrf	___lwdiv@counter
  2522  1FCB  0AF7               	incf	___lwdiv@counter,f
  2523  1FCC                     l2661:	
  2524  1FCC  1BF1               	btfsc	___lwdiv@divisor+1,7
  2525  1FCD  2FDA               	goto	l2663
  2526  1FCE  3001               	movlw	1
  2527  1FCF                     u3655:	
  2528  1FCF  1003               	clrc
  2529  1FD0  0DF0               	rlf	___lwdiv@divisor,f
  2530  1FD1  0DF1               	rlf	___lwdiv@divisor+1,f
  2531  1FD2  3EFF               	addlw	-1
  2532  1FD3  1D03               	skipz
  2533  1FD4  2FCF               	goto	u3655
  2534  1FD5  3001               	movlw	1
  2535  1FD6  00F4               	movwf	??___lwdiv
  2536  1FD7  0874               	movf	??___lwdiv,w
  2537  1FD8  07F7               	addwf	___lwdiv@counter,f
  2538  1FD9  2FCC               	goto	l2661
  2539  1FDA                     l2663:	
  2540  1FDA  3001               	movlw	1
  2541  1FDB                     u3675:	
  2542  1FDB  1003               	clrc
  2543  1FDC  0DF5               	rlf	___lwdiv@quotient,f
  2544  1FDD  0DF6               	rlf	___lwdiv@quotient+1,f
  2545  1FDE  3EFF               	addlw	-1
  2546  1FDF  1D03               	skipz
  2547  1FE0  2FDB               	goto	u3675
  2548  1FE1  0871               	movf	___lwdiv@divisor+1,w
  2549  1FE2  0273               	subwf	___lwdiv@dividend+1,w
  2550  1FE3  1D03               	skipz
  2551  1FE4  2FE7               	goto	u3685
  2552  1FE5  0870               	movf	___lwdiv@divisor,w
  2553  1FE6  0272               	subwf	___lwdiv@dividend,w
  2554  1FE7                     u3685:	
  2555  1FE7  1C03               	skipc
  2556  1FE8  2FF0               	goto	l2669
  2557  1FE9  0870               	movf	___lwdiv@divisor,w
  2558  1FEA  02F2               	subwf	___lwdiv@dividend,f
  2559  1FEB  0871               	movf	___lwdiv@divisor+1,w
  2560  1FEC  1C03               	skipc
  2561  1FED  03F3               	decf	___lwdiv@dividend+1,f
  2562  1FEE  02F3               	subwf	___lwdiv@dividend+1,f
  2563  1FEF  1475               	bsf	___lwdiv@quotient,0
  2564  1FF0                     l2669:	
  2565  1FF0  3001               	movlw	1
  2566  1FF1                     u3695:	
  2567  1FF1  1003               	clrc
  2568  1FF2  0CF1               	rrf	___lwdiv@divisor+1,f
  2569  1FF3  0CF0               	rrf	___lwdiv@divisor,f
  2570  1FF4  3EFF               	addlw	-1
  2571  1FF5  1D03               	skipz
  2572  1FF6  2FF1               	goto	u3695
  2573  1FF7  3001               	movlw	1
  2574  1FF8  02F7               	subwf	___lwdiv@counter,f
  2575  1FF9  1D03               	btfss	3,2
  2576  1FFA  2FDA               	goto	l2663
  2577  1FFB                     l2673:	
  2578  1FFB  0876               	movf	___lwdiv@quotient+1,w
  2579  1FFC  00F1               	movwf	?___lwdiv+1
  2580  1FFD  0875               	movf	___lwdiv@quotient,w
  2581  1FFE  00F0               	movwf	?___lwdiv
  2582  1FFF  0008               	return
  2583  2000                     __end_of___lwdiv:	
  2584                           
  2585                           	psect	text5
  2586  13EA                     __ptext5:	
  2587 ;; *************** function _LCD_Writeflo *****************
  2588 ;; Defined at:
  2589 ;;		line 212 in file "hd44780sz.c"
  2590 ;; Parameters:    Size  Location     Type
  2591 ;;  c               3   69[BANK0 ] float 
  2592 ;;  p               1   72[BANK0 ] unsigned char 
  2593 ;; Auto vars:     Size  Location     Type
  2594 ;;  buf            20   23[BANK1 ] unsigned char [20]
  2595 ;; Return value:  Size  Location     Type
  2596 ;;                  1    wreg      void 
  2597 ;; Registers used:
  2598 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2599 ;; Tracked objects:
  2600 ;;		On entry : 0/0
  2601 ;;		On exit  : 0/0
  2602 ;;		Unchanged: 0/0
  2603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2604 ;;      Params:         0       4       0       0       0
  2605 ;;      Locals:         0       0      20       0       0
  2606 ;;      Temps:          0       1       0       0       0
  2607 ;;      Totals:         0       5      20       0       0
  2608 ;;Total ram usage:       25 bytes
  2609 ;; Hardware stack levels used:    1
  2610 ;; Hardware stack levels required when called:    5
  2611 ;; This function calls:
  2612 ;;		_LCD_Writestr
  2613 ;;		_sprintf
  2614 ;; This function is called by:
  2615 ;;		_main
  2616 ;; This function uses a non-reentrant model
  2617 ;;
  2618                           
  2619                           
  2620                           ;psect for function _LCD_Writeflo
  2621  13EA                     _LCD_Writeflo:	
  2622                           
  2623                           ;hd44780sz.c: 214: char buf[20];
  2624                           ;hd44780sz.c: 215: if (p>4) p=4;
  2625                           
  2626                           ;incstack = 0
  2627                           ; Regs used in _LCD_Writeflo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2628  13EA  3005               	movlw	5
  2629  13EB  1283               	bcf	3,5	;RP0=0, select bank0
  2630  13EC  1303               	bcf	3,6	;RP1=0, select bank0
  2631  13ED  0268               	subwf	LCD_Writeflo@p,w
  2632  13EE  1C03               	skipc
  2633  13EF  2BF4               	goto	l2987
  2634  13F0  3004               	movlw	4
  2635  13F1  00E9               	movwf	??_LCD_Writeflo
  2636  13F2  0869               	movf	??_LCD_Writeflo,w
  2637  13F3  00E8               	movwf	LCD_Writeflo@p
  2638  13F4                     l2987:	
  2639                           
  2640                           ;hd44780sz.c: 216: if (p<1) p=1;
  2641  13F4  0868               	movf	LCD_Writeflo@p,w
  2642  13F5  1D03               	btfss	3,2
  2643  13F6  2C44               	goto	l3001
  2644  13F7  01E8               	clrf	LCD_Writeflo@p
  2645  13F8  0AE8               	incf	LCD_Writeflo@p,f
  2646                           
  2647                           ;hd44780sz.c: 217: switch(p)
  2648  13F9  2C44               	goto	l3001
  2649  13FA                     l2991:	
  2650                           ;hd44780sz.c: 218: {
  2651                           ;hd44780sz.c: 219: case 1:
  2652                           
  2653                           
  2654                           ;hd44780sz.c: 220: sprintf(buf,"%.1f",c);
  2655  13FA  3043               	movlw	low (STR_8| (0+32768))
  2656  13FB  00DA               	movwf	sprintf@f
  2657  13FC  3091               	movlw	high (STR_8| (0+32768))
  2658  13FD  00DB               	movwf	sprintf@f+1
  2659  13FE  0865               	movf	LCD_Writeflo@c,w
  2660  13FF  00DC               	movwf	?_sprintf+2
  2661  1400  0866               	movf	LCD_Writeflo@c+1,w
  2662  1401  00DD               	movwf	?_sprintf+3
  2663  1402  0867               	movf	LCD_Writeflo@c+2,w
  2664  1403  00DE               	movwf	?_sprintf+4
  2665  1404  30B7               	movlw	(low (LCD_Writeflo@buf| 0))& (0+255)
  2666  1405  120A  118A  2192  160A  118A  	fcall	_sprintf
  2667                           
  2668                           ;hd44780sz.c: 221: break;
  2669  140A  2C54               	goto	l3003
  2670  140B                     l2993:	
  2671                           ;hd44780sz.c: 222: case 2:
  2672                           
  2673                           
  2674                           ;hd44780sz.c: 223: sprintf(buf,"%.2f",c);
  2675  140B  3048               	movlw	low (STR_9| (0+32768))
  2676  140C  1283               	bcf	3,5	;RP0=0, select bank0
  2677  140D  1303               	bcf	3,6	;RP1=0, select bank0
  2678  140E  00DA               	movwf	sprintf@f
  2679  140F  3091               	movlw	high (STR_9| (0+32768))
  2680  1410  00DB               	movwf	sprintf@f+1
  2681  1411  0865               	movf	LCD_Writeflo@c,w
  2682  1412  00DC               	movwf	?_sprintf+2
  2683  1413  0866               	movf	LCD_Writeflo@c+1,w
  2684  1414  00DD               	movwf	?_sprintf+3
  2685  1415  0867               	movf	LCD_Writeflo@c+2,w
  2686  1416  00DE               	movwf	?_sprintf+4
  2687  1417  30B7               	movlw	(low (LCD_Writeflo@buf| 0))& (0+255)
  2688  1418  120A  118A  2192  160A  118A  	fcall	_sprintf
  2689                           
  2690                           ;hd44780sz.c: 224: break;
  2691  141D  2C54               	goto	l3003
  2692  141E                     l2995:	
  2693                           ;hd44780sz.c: 225: case 3:
  2694                           
  2695                           
  2696                           ;hd44780sz.c: 226: sprintf(buf,"%.3f",c);
  2697  141E  304D               	movlw	low (STR_10| (0+32768))
  2698  141F  1283               	bcf	3,5	;RP0=0, select bank0
  2699  1420  1303               	bcf	3,6	;RP1=0, select bank0
  2700  1421  00DA               	movwf	sprintf@f
  2701  1422  3091               	movlw	high (STR_10| (0+32768))
  2702  1423  00DB               	movwf	sprintf@f+1
  2703  1424  0865               	movf	LCD_Writeflo@c,w
  2704  1425  00DC               	movwf	?_sprintf+2
  2705  1426  0866               	movf	LCD_Writeflo@c+1,w
  2706  1427  00DD               	movwf	?_sprintf+3
  2707  1428  0867               	movf	LCD_Writeflo@c+2,w
  2708  1429  00DE               	movwf	?_sprintf+4
  2709  142A  30B7               	movlw	(low (LCD_Writeflo@buf| 0))& (0+255)
  2710  142B  120A  118A  2192  160A  118A  	fcall	_sprintf
  2711                           
  2712                           ;hd44780sz.c: 227: break;
  2713  1430  2C54               	goto	l3003
  2714  1431                     l2997:	
  2715                           ;hd44780sz.c: 228: case 4:
  2716                           
  2717                           
  2718                           ;hd44780sz.c: 229: sprintf(buf,"%.4f",c);
  2719  1431  3052               	movlw	low (STR_11| (0+32768))
  2720  1432  1283               	bcf	3,5	;RP0=0, select bank0
  2721  1433  1303               	bcf	3,6	;RP1=0, select bank0
  2722  1434  00DA               	movwf	sprintf@f
  2723  1435  3091               	movlw	high (STR_11| (0+32768))
  2724  1436  00DB               	movwf	sprintf@f+1
  2725  1437  0865               	movf	LCD_Writeflo@c,w
  2726  1438  00DC               	movwf	?_sprintf+2
  2727  1439  0866               	movf	LCD_Writeflo@c+1,w
  2728  143A  00DD               	movwf	?_sprintf+3
  2729  143B  0867               	movf	LCD_Writeflo@c+2,w
  2730  143C  00DE               	movwf	?_sprintf+4
  2731  143D  30B7               	movlw	(low (LCD_Writeflo@buf| 0))& (0+255)
  2732  143E  120A  118A  2192  160A  118A  	fcall	_sprintf
  2733                           
  2734                           ;hd44780sz.c: 231: }
  2735                           
  2736                           ;hd44780sz.c: 230: break;
  2737  1443  2C54               	goto	l3003
  2738  1444                     l3001:	
  2739  1444  1283               	bcf	3,5	;RP0=0, select bank0
  2740  1445  1303               	bcf	3,6	;RP1=0, select bank0
  2741  1446  0868               	movf	LCD_Writeflo@p,w
  2742                           
  2743                           ; Switch size 1, requested type "space"
  2744                           ; Number of cases is 4, Range of values is 1 to 4
  2745                           ; switch strategies available:
  2746                           ; Name         Instructions Cycles
  2747                           ; simple_byte           13     7 (average)
  2748                           ; direct_byte           23    11 (fixed)
  2749                           ; jumptable            263     9 (fixed)
  2750                           ;	Chosen strategy is simple_byte
  2751  1447  3A01               	xorlw	1	; case 1
  2752  1448  1903               	skipnz
  2753  1449  2BFA               	goto	l2991
  2754  144A  3A03               	xorlw	3	; case 2
  2755  144B  1903               	skipnz
  2756  144C  2C0B               	goto	l2993
  2757  144D  3A01               	xorlw	1	; case 3
  2758  144E  1903               	skipnz
  2759  144F  2C1E               	goto	l2995
  2760  1450  3A07               	xorlw	7	; case 4
  2761  1451  1903               	skipnz
  2762  1452  2C31               	goto	l2997
  2763  1453  2C54               	goto	l3003
  2764  1454                     l3003:	
  2765                           
  2766                           ;hd44780sz.c: 232: LCD_Writestr(buf);
  2767  1454  30B7               	movlw	(low (LCD_Writeflo@buf| 0))& (0+255)
  2768  1455  00F4               	movwf	LCD_Writestr@s
  2769  1456  3000               	movlw	0
  2770  1457  00F5               	movwf	LCD_Writestr@s+1
  2771  1458  160A  158A  2720   	fcall	_LCD_Writestr
  2772  145B  0008               	return
  2773  145C                     __end_of_LCD_Writeflo:	
  2774                           
  2775                           	psect	text6
  2776  0192                     __ptext6:	
  2777 ;; *************** function _sprintf *****************
  2778 ;; Defined at:
  2779 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;  sp              1    wreg     PTR unsigned char 
  2782 ;;		 -> LCD_Writeflo@buf(20), 
  2783 ;;  f               2   58[BANK0 ] PTR const unsigned char 
  2784 ;;		 -> STR_11(5), STR_10(5), STR_9(5), STR_8(5), 
  2785 ;; Auto vars:     Size  Location     Type
  2786 ;;  sp              1   18[BANK1 ] PTR unsigned char 
  2787 ;;		 -> LCD_Writeflo@buf(20), 
  2788 ;;  tmpval          4   12[BANK1 ] struct .
  2789 ;;  val             4    6[BANK1 ] unsigned long 
  2790 ;;  fval            3   19[BANK1 ] unsigned long 
  2791 ;;  prec            2   16[BANK1 ] int 
  2792 ;;  exp             2   10[BANK1 ] int 
  2793 ;;  flag            2    4[BANK1 ] unsigned short 
  2794 ;;  cp              2    0        PTR const unsigned char 
  2795 ;;  len             2    0        unsigned int 
  2796 ;;  width           2    0        int 
  2797 ;;  c               1   22[BANK1 ] char 
  2798 ;;  ap              1    3[BANK1 ] PTR void [1]
  2799 ;;		 -> ?_sprintf(2), 
  2800 ;;  d               1    0        unsigned char 
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  2   58[BANK0 ] int 
  2803 ;; Registers used:
  2804 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2810 ;;      Params:         0       5       0       0       0
  2811 ;;      Locals:         0       0      23       0       0
  2812 ;;      Temps:          0       6       0       0       0
  2813 ;;      Totals:         0      11      23       0       0
  2814 ;;Total ram usage:       34 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; Hardware stack levels required when called:    3
  2817 ;; This function calls:
  2818 ;;		___awdiv
  2819 ;;		___ftadd
  2820 ;;		___ftge
  2821 ;;		___ftmul
  2822 ;;		___ftneg
  2823 ;;		___ftsub
  2824 ;;		___fttol
  2825 ;;		___lldiv
  2826 ;;		___llmod
  2827 ;;		___lltoft
  2828 ;;		___wmul
  2829 ;;		__div_to_l_
  2830 ;;		__tdiv_to_l_
  2831 ;;		_fround
  2832 ;;		_isdigit
  2833 ;;		_scale
  2834 ;; This function is called by:
  2835 ;;		_LCD_Writeflo
  2836 ;; This function uses a non-reentrant model
  2837 ;;
  2838                           
  2839                           
  2840                           ;psect for function _sprintf
  2841  0192                     _sprintf:	
  2842                           
  2843                           ;incstack = 0
  2844                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2845                           ;sprintf@sp stored from wreg
  2846  0192  1683               	bsf	3,5	;RP0=1, select bank1
  2847  0193  1303               	bcf	3,6	;RP1=0, select bank1
  2848  0194  00B2               	movwf	sprintf@sp^(0+128)
  2849                           
  2850                           ;doprnt.c: 494: va_list ap;
  2851                           ;doprnt.c: 499: signed char c;
  2852                           ;doprnt.c: 501: int width;
  2853                           ;doprnt.c: 504: int prec;
  2854                           ;doprnt.c: 508: unsigned short flag;
  2855                           ;doprnt.c: 515: char d;
  2856                           ;doprnt.c: 516: double fval;
  2857                           ;doprnt.c: 517: int exp;
  2858                           ;doprnt.c: 523: union {
  2859                           ;doprnt.c: 524: unsigned long vd;
  2860                           ;doprnt.c: 525: double integ;
  2861                           ;doprnt.c: 526: } tmpval;
  2862                           ;doprnt.c: 528: unsigned long val;
  2863                           ;doprnt.c: 529: unsigned len;
  2864                           ;doprnt.c: 530: const char * cp;
  2865                           ;doprnt.c: 533: *ap = __va_start();
  2866  0195  305C               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  2867  0196  1283               	bcf	3,5	;RP0=0, select bank0
  2868  0197  1303               	bcf	3,6	;RP1=0, select bank0
  2869  0198  00DF               	movwf	??_sprintf
  2870  0199  085F               	movf	??_sprintf,w
  2871  019A  1683               	bsf	3,5	;RP0=1, select bank1
  2872  019B  1303               	bcf	3,6	;RP1=0, select bank1
  2873  019C  00A3               	movwf	sprintf@ap^(0+128)
  2874  019D                     l2915:	
  2875                           ;doprnt.c: 536: while(c = *f++) {
  2876                           
  2877  019D  1283               	bcf	3,5	;RP0=0, select bank0
  2878  019E  085B               	movf	sprintf@f+1,w
  2879  019F  00E0               	movwf	??_sprintf+1
  2880  01A0  085A               	movf	sprintf@f,w
  2881  01A1  00DF               	movwf	??_sprintf
  2882  01A2  0ADA               	incf	sprintf@f,f
  2883  01A3  1903               	skipnz
  2884  01A4  0ADB               	incf	sprintf@f+1,f
  2885  01A5  0860               	movf	??_sprintf+1,w
  2886  01A6  00FF               	movwf	127
  2887  01A7  085F               	movf	??_sprintf,w
  2888  01A8  0084               	movwf	4
  2889  01A9  160A  118A  2000  120A  118A  	fcall	stringtab
  2890  01AE  00E1               	movwf	??_sprintf+2
  2891  01AF  0861               	movf	??_sprintf+2,w
  2892  01B0  1683               	bsf	3,5	;RP0=1, select bank1
  2893  01B1  1303               	bcf	3,6	;RP1=0, select bank1
  2894  01B2  00B6               	movwf	sprintf@c^(0+128)
  2895  01B3  0836               	movf	sprintf@c^(0+128),w
  2896  01B4  1903               	btfsc	3,2
  2897  01B5  2FF3               	goto	l2917
  2898                           
  2899                           ;doprnt.c: 538: if(c != '%')
  2900  01B6  3025               	movlw	37
  2901  01B7  0636               	xorwf	sprintf@c^(0+128),w
  2902  01B8  1903               	btfsc	3,2
  2903  01B9  29BE               	goto	l2733
  2904                           
  2905                           ;doprnt.c: 540: {
  2906                           ;doprnt.c: 541: ((*sp++ = (c)));
  2907  01BA  0836               	movf	sprintf@c^(0+128),w
  2908  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  2909  01BC  1303               	bcf	3,6	;RP1=0, select bank0
  2910  01BD  2FE2               	goto	L10
  2911  01BE                     l2733:	
  2912                           ;doprnt.c: 542: continue;
  2913                           
  2914                           
  2915                           ;doprnt.c: 543: }
  2916                           ;doprnt.c: 548: flag = 0;
  2917  01BE  01A4               	clrf	sprintf@flag^(0+128)
  2918  01BF  01A5               	clrf	(sprintf@flag+1)^(0+128)
  2919                           
  2920                           ;doprnt.c: 611: if(*f == '.') {
  2921  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  2922  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  2923  01C2  085B               	movf	sprintf@f+1,w
  2924  01C3  00FF               	movwf	127
  2925  01C4  085A               	movf	sprintf@f,w
  2926  01C5  0084               	movwf	4
  2927  01C6  160A  118A  2000  120A  118A  	fcall	stringtab
  2928  01CB  3A2E               	xorlw	46
  2929  01CC  1D03               	skipz
  2930  01CD  2A22               	goto	l2745
  2931                           
  2932                           ;doprnt.c: 612: flag |= 0x4000;
  2933  01CE  1683               	bsf	3,5	;RP0=1, select bank1
  2934  01CF  1303               	bcf	3,6	;RP1=0, select bank1
  2935  01D0  1725               	bsf	(sprintf@flag^(0+128)+1),6
  2936                           
  2937                           ;doprnt.c: 613: f++;
  2938  01D1  3001               	movlw	1
  2939  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  2940  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  2941  01D4  07DA               	addwf	sprintf@f,f
  2942  01D5  1803               	skipnc
  2943  01D6  0ADB               	incf	sprintf@f+1,f
  2944                           
  2945                           ;doprnt.c: 620: {
  2946                           ;doprnt.c: 621: prec = 0;
  2947  01D7  1683               	bsf	3,5	;RP0=1, select bank1
  2948  01D8  1303               	bcf	3,6	;RP1=0, select bank1
  2949  01D9  01B0               	clrf	sprintf@prec^(0+128)
  2950  01DA  01B1               	clrf	(sprintf@prec+1)^(0+128)
  2951  01DB                     l244:	
  2952                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2953                           
  2954  01DB  1283               	bcf	3,5	;RP0=0, select bank0
  2955  01DC  085B               	movf	sprintf@f+1,w
  2956  01DD  00FF               	movwf	127
  2957  01DE  085A               	movf	sprintf@f,w
  2958  01DF  0084               	movwf	4
  2959  01E0  160A  118A  2000  120A  118A  	fcall	stringtab
  2960  01E5  160A  158A  2689  120A  118A  	fcall	_isdigit
  2961  01EA  1C03               	btfss	3,0
  2962  01EB  2A2A               	goto	l2751
  2963                           
  2964                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2965  01EC  1683               	bsf	3,5	;RP0=1, select bank1
  2966  01ED  1303               	bcf	3,6	;RP1=0, select bank1
  2967  01EE  0831               	movf	(sprintf@prec+1)^(0+128),w
  2968  01EF  00F1               	movwf	___wmul@multiplier+1
  2969  01F0  0830               	movf	sprintf@prec^(0+128),w
  2970  01F1  00F0               	movwf	___wmul@multiplier
  2971  01F2  300A               	movlw	10
  2972  01F3  00F2               	movwf	___wmul@multiplicand
  2973  01F4  3000               	movlw	0
  2974  01F5  00F3               	movwf	___wmul@multiplicand+1
  2975  01F6  160A  158A  26FF  120A  118A  	fcall	___wmul
  2976  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  2977  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  2978  01FD  085B               	movf	sprintf@f+1,w
  2979  01FE  00FF               	movwf	127
  2980  01FF  085A               	movf	sprintf@f,w
  2981  0200  0084               	movwf	4
  2982  0201  160A  118A  2000  120A  118A  	fcall	stringtab
  2983  0206  0770               	addwf	?___wmul,w
  2984  0207  00DF               	movwf	??_sprintf
  2985  0208  3000               	movlw	0
  2986  0209  1803               	skipnc
  2987  020A  3001               	movlw	1
  2988  020B  0771               	addwf	?___wmul+1,w
  2989  020C  00E0               	movwf	??_sprintf+1
  2990  020D  085F               	movf	??_sprintf,w
  2991  020E  3ED0               	addlw	208
  2992  020F  1683               	bsf	3,5	;RP0=1, select bank1
  2993  0210  1303               	bcf	3,6	;RP1=0, select bank1
  2994  0211  00B0               	movwf	sprintf@prec^(0+128)
  2995  0212  1283               	bcf	3,5	;RP0=0, select bank0
  2996  0213  1303               	bcf	3,6	;RP1=0, select bank0
  2997  0214  0860               	movf	??_sprintf+1,w
  2998  0215  1803               	skipnc
  2999  0216  3E01               	addlw	1
  3000  0217  3EFF               	addlw	255
  3001  0218  1683               	bsf	3,5	;RP0=1, select bank1
  3002  0219  1303               	bcf	3,6	;RP1=0, select bank1
  3003  021A  00B1               	movwf	(sprintf@prec+1)^(0+128)
  3004  021B  3001               	movlw	1
  3005  021C  1283               	bcf	3,5	;RP0=0, select bank0
  3006  021D  1303               	bcf	3,6	;RP1=0, select bank0
  3007  021E  07DA               	addwf	sprintf@f,f
  3008  021F  1803               	skipnc
  3009  0220  0ADB               	incf	sprintf@f+1,f
  3010  0221  29DB               	goto	l244
  3011  0222                     l2745:	
  3012                           ;doprnt.c: 624: }
  3013                           ;doprnt.c: 625: } else {
  3014                           
  3015                           
  3016                           ;doprnt.c: 626: prec = 0;
  3017  0222  1683               	bsf	3,5	;RP0=1, select bank1
  3018  0223  1303               	bcf	3,6	;RP1=0, select bank1
  3019  0224  01B0               	clrf	sprintf@prec^(0+128)
  3020  0225  01B1               	clrf	(sprintf@prec+1)^(0+128)
  3021                           
  3022                           ;doprnt.c: 628: flag |= 0x1000;
  3023  0226  1625               	bsf	(sprintf@flag^(0+128)+1),4
  3024                           
  3025                           ;doprnt.c: 630: }
  3026                           ;doprnt.c: 635: switch(c = *f++) {
  3027  0227  2A2A               	goto	l2751
  3028  0228                     l251:	
  3029                           ;doprnt.c: 662: case 'f':
  3030                           
  3031                           ;doprnt.c: 638: goto alldone;
  3032                           
  3033                           ;doprnt.c: 637: case 0:
  3034                           
  3035                           
  3036                           ;doprnt.c: 663: flag |= 0x400;
  3037  0228  1525               	bsf	(sprintf@flag^(0+128)+1),2
  3038                           
  3039                           ;doprnt.c: 664: break;
  3040  0229  2A46               	goto	l2753
  3041  022A                     l2751:	
  3042                           ;doprnt.c: 822: }
  3043                           
  3044                           ;doprnt.c: 813: continue;
  3045                           
  3046                           ;doprnt.c: 802: default:
  3047                           
  3048  022A  1283               	bcf	3,5	;RP0=0, select bank0
  3049  022B  1303               	bcf	3,6	;RP1=0, select bank0
  3050  022C  085B               	movf	sprintf@f+1,w
  3051  022D  00E0               	movwf	??_sprintf+1
  3052  022E  085A               	movf	sprintf@f,w
  3053  022F  00DF               	movwf	??_sprintf
  3054  0230  0ADA               	incf	sprintf@f,f
  3055  0231  1903               	skipnz
  3056  0232  0ADB               	incf	sprintf@f+1,f
  3057  0233  0860               	movf	??_sprintf+1,w
  3058  0234  00FF               	movwf	127
  3059  0235  085F               	movf	??_sprintf,w
  3060  0236  0084               	movwf	4
  3061  0237  160A  118A  2000  120A  118A  	fcall	stringtab
  3062  023C  1683               	bsf	3,5	;RP0=1, select bank1
  3063  023D  1303               	bcf	3,6	;RP1=0, select bank1
  3064  023E  00B6               	movwf	sprintf@c^(0+128)
  3065                           
  3066                           ; Switch size 1, requested type "space"
  3067                           ; Number of cases is 2, Range of values is 0 to 102
  3068                           ; switch strategies available:
  3069                           ; Name         Instructions Cycles
  3070                           ; simple_byte            7     4 (average)
  3071                           ; jumptable            260     6 (fixed)
  3072                           ;	Chosen strategy is simple_byte
  3073  023F  3A00               	xorlw	0	; case 0
  3074  0240  1903               	skipnz
  3075  0241  2FF3               	goto	l2917
  3076  0242  3A66               	xorlw	102	; case 102
  3077  0243  1903               	skipnz
  3078  0244  2A28               	goto	l251
  3079  0245  299D               	goto	l2915
  3080  0246                     l2753:	
  3081                           
  3082                           ;doprnt.c: 825: if(flag & (0x700)) {
  3083  0246  3000               	movlw	0
  3084  0247  0524               	andwf	sprintf@flag^(0+128),w
  3085  0248  1283               	bcf	3,5	;RP0=0, select bank0
  3086  0249  1303               	bcf	3,6	;RP1=0, select bank0
  3087  024A  00DF               	movwf	??_sprintf
  3088  024B  3007               	movlw	7
  3089  024C  1683               	bsf	3,5	;RP0=1, select bank1
  3090  024D  1303               	bcf	3,6	;RP1=0, select bank1
  3091  024E  0525               	andwf	(sprintf@flag+1)^(0+128),w
  3092  024F  1283               	bcf	3,5	;RP0=0, select bank0
  3093  0250  1303               	bcf	3,6	;RP1=0, select bank0
  3094  0251  00E0               	movwf	??_sprintf+1
  3095  0252  085F               	movf	??_sprintf,w
  3096  0253  0460               	iorwf	??_sprintf+1,w
  3097  0254  1903               	btfsc	3,2
  3098  0255  2F75               	goto	l2899
  3099                           
  3100                           ;doprnt.c: 827: if(flag & 0x1000)
  3101  0256  1683               	bsf	3,5	;RP0=1, select bank1
  3102  0257  1303               	bcf	3,6	;RP1=0, select bank1
  3103  0258  1E25               	btfss	(sprintf@flag+1)^(0+128),4
  3104  0259  2A5E               	goto	l2759
  3105                           
  3106                           ;doprnt.c: 829: prec = 6;
  3107  025A  3006               	movlw	6
  3108  025B  00B0               	movwf	sprintf@prec^(0+128)
  3109  025C  3000               	movlw	0
  3110  025D  00B1               	movwf	(sprintf@prec^(0+128)+1)
  3111  025E                     l2759:	
  3112                           
  3113                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3114  025E  0823               	movf	sprintf@ap^(0+128),w
  3115  025F  0084               	movwf	4
  3116  0260  1383               	bcf	3,7	;select IRP bank0
  3117  0261  0800               	movf	0,w
  3118  0262  00B3               	movwf	sprintf@fval^(0+128)
  3119  0263  0A84               	incf	4,f
  3120  0264  0800               	movf	0,w
  3121  0265  00B4               	movwf	(sprintf@fval+1)^(0+128)
  3122  0266  0A84               	incf	4,f
  3123  0267  0800               	movf	0,w
  3124  0268  00B5               	movwf	(sprintf@fval+2)^(0+128)
  3125  0269  3003               	movlw	3
  3126  026A  1283               	bcf	3,5	;RP0=0, select bank0
  3127  026B  1303               	bcf	3,6	;RP1=0, select bank0
  3128  026C  00DF               	movwf	??_sprintf
  3129  026D  085F               	movf	??_sprintf,w
  3130  026E  1683               	bsf	3,5	;RP0=1, select bank1
  3131  026F  1303               	bcf	3,6	;RP1=0, select bank1
  3132  0270  07A3               	addwf	sprintf@ap^(0+128),f
  3133                           
  3134                           ;doprnt.c: 831: if(fval < 0.0) {
  3135  0271  0833               	movf	sprintf@fval^(0+128),w
  3136  0272  00F0               	movwf	___ftge@ff1
  3137  0273  0834               	movf	(sprintf@fval+1)^(0+128),w
  3138  0274  00F1               	movwf	___ftge@ff1+1
  3139  0275  0835               	movf	(sprintf@fval+2)^(0+128),w
  3140  0276  00F2               	movwf	___ftge@ff1+2
  3141  0277  3000               	movlw	0
  3142  0278  00F3               	movwf	___ftge@ff2
  3143  0279  3000               	movlw	0
  3144  027A  00F4               	movwf	___ftge@ff2+1
  3145  027B  3000               	movlw	0
  3146  027C  00F5               	movwf	___ftge@ff2+2
  3147  027D  120A  118A  2003  120A  118A  	fcall	___ftge
  3148  0282  1803               	btfsc	3,0
  3149  0283  2A9D               	goto	l2769
  3150                           
  3151                           ;doprnt.c: 832: fval = -fval;
  3152  0284  1683               	bsf	3,5	;RP0=1, select bank1
  3153  0285  1303               	bcf	3,6	;RP1=0, select bank1
  3154  0286  0833               	movf	sprintf@fval^(0+128),w
  3155  0287  00F0               	movwf	___ftneg@f1
  3156  0288  0834               	movf	(sprintf@fval+1)^(0+128),w
  3157  0289  00F1               	movwf	___ftneg@f1+1
  3158  028A  0835               	movf	(sprintf@fval+2)^(0+128),w
  3159  028B  00F2               	movwf	___ftneg@f1+2
  3160  028C  160A  158A  2661  120A  118A  	fcall	___ftneg
  3161  0291  0870               	movf	?___ftneg,w
  3162  0292  1683               	bsf	3,5	;RP0=1, select bank1
  3163  0293  1303               	bcf	3,6	;RP1=0, select bank1
  3164  0294  00B3               	movwf	sprintf@fval^(0+128)
  3165  0295  0871               	movf	?___ftneg+1,w
  3166  0296  00B4               	movwf	(sprintf@fval+1)^(0+128)
  3167  0297  0872               	movf	?___ftneg+2,w
  3168  0298  00B5               	movwf	(sprintf@fval+2)^(0+128)
  3169                           
  3170                           ;doprnt.c: 833: flag |= 0x03;
  3171  0299  3003               	movlw	3
  3172  029A  04A4               	iorwf	sprintf@flag^(0+128),f
  3173  029B  3000               	movlw	0
  3174  029C  04A5               	iorwf	(sprintf@flag+1)^(0+128),f
  3175  029D                     l2769:	
  3176                           
  3177                           ;doprnt.c: 834: }
  3178                           ;doprnt.c: 835: exp = 0;
  3179  029D  1683               	bsf	3,5	;RP0=1, select bank1
  3180  029E  1303               	bcf	3,6	;RP1=0, select bank1
  3181  029F  01AA               	clrf	sprintf@exp^(0+128)
  3182  02A0  01AB               	clrf	(sprintf@exp+1)^(0+128)
  3183                           
  3184                           ;doprnt.c: 836: if( fval!=0) {
  3185  02A1  0835               	movf	(sprintf@fval+2)^(0+128),w
  3186  02A2  0434               	iorwf	(sprintf@fval+1)^(0+128),w
  3187  02A3  0433               	iorwf	sprintf@fval^(0+128),w
  3188  02A4  1903               	skipnz
  3189  02A5  2B91               	goto	l2797
  3190                           
  3191                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3192  02A6  30B3               	movlw	low (sprintf@fval| 0)
  3193  02A7  0084               	movwf	4
  3194  02A8  1383               	bcf	3,7	;select IRP bank1
  3195  02A9  0800               	movf	0,w
  3196  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  3197  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  3198  02AC  00DF               	movwf	??_sprintf
  3199  02AD  0A84               	incf	4,f
  3200  02AE  0800               	movf	0,w
  3201  02AF  00E0               	movwf	??_sprintf+1
  3202  02B0  0A84               	incf	4,f
  3203  02B1  0800               	movf	0,w
  3204  02B2  00E1               	movwf	??_sprintf+2
  3205  02B3  0A84               	incf	4,f
  3206  02B4  0800               	movf	0,w
  3207  02B5  00E2               	movwf	??_sprintf+3
  3208  02B6  300F               	movlw	15
  3209  02B7                     u3835:	
  3210  02B7  1003               	clrc
  3211  02B8  0CE2               	rrf	??_sprintf+3,f
  3212  02B9  0CE1               	rrf	??_sprintf+2,f
  3213  02BA  0CE0               	rrf	??_sprintf+1,f
  3214  02BB  0CDF               	rrf	??_sprintf,f
  3215  02BC  3EFF               	addlw	-1
  3216  02BD  1D03               	skipz
  3217  02BE  2AB7               	goto	u3835
  3218  02BF  30FF               	movlw	255
  3219  02C0  055F               	andwf	??_sprintf,w
  3220  02C1  00E3               	movwf	??_sprintf+4
  3221  02C2  3000               	movlw	0
  3222  02C3  0560               	andwf	??_sprintf+1,w
  3223  02C4  00E4               	movwf	??_sprintf+5
  3224  02C5  0863               	movf	??_sprintf+4,w
  3225  02C6  3E82               	addlw	130
  3226  02C7  1683               	bsf	3,5	;RP0=1, select bank1
  3227  02C8  1303               	bcf	3,6	;RP1=0, select bank1
  3228  02C9  00AA               	movwf	sprintf@exp^(0+128)
  3229  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  3230  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  3231  02CC  0864               	movf	??_sprintf+5,w
  3232  02CD  1803               	skipnc
  3233  02CE  3E01               	addlw	1
  3234  02CF  3EFF               	addlw	255
  3235  02D0  1683               	bsf	3,5	;RP0=1, select bank1
  3236  02D1  1303               	bcf	3,6	;RP1=0, select bank1
  3237  02D2  00AB               	movwf	(sprintf@exp+1)^(0+128)
  3238                           
  3239                           ;doprnt.c: 838: exp--;
  3240  02D3  30FF               	movlw	255
  3241  02D4  07AA               	addwf	sprintf@exp^(0+128),f
  3242  02D5  1803               	skipnc
  3243  02D6  0AAB               	incf	(sprintf@exp+1)^(0+128),f
  3244  02D7  30FF               	movlw	255
  3245  02D8  07AB               	addwf	(sprintf@exp+1)^(0+128),f
  3246                           
  3247                           ;doprnt.c: 839: exp *= 3;
  3248  02D9  3003               	movlw	3
  3249  02DA  00F0               	movwf	___wmul@multiplier
  3250  02DB  3000               	movlw	0
  3251  02DC  00F1               	movwf	___wmul@multiplier+1
  3252  02DD  082B               	movf	(sprintf@exp+1)^(0+128),w
  3253  02DE  00F3               	movwf	___wmul@multiplicand+1
  3254  02DF  082A               	movf	sprintf@exp^(0+128),w
  3255  02E0  00F2               	movwf	___wmul@multiplicand
  3256  02E1  160A  158A  26FF  120A  118A  	fcall	___wmul
  3257  02E6  0871               	movf	?___wmul+1,w
  3258  02E7  1683               	bsf	3,5	;RP0=1, select bank1
  3259  02E8  1303               	bcf	3,6	;RP1=0, select bank1
  3260  02E9  00AB               	movwf	(sprintf@exp+1)^(0+128)
  3261  02EA  0870               	movf	?___wmul,w
  3262  02EB  00AA               	movwf	sprintf@exp^(0+128)
  3263                           
  3264                           ;doprnt.c: 840: exp /= 10;
  3265  02EC  300A               	movlw	10
  3266  02ED  00F7               	movwf	___awdiv@divisor
  3267  02EE  3000               	movlw	0
  3268  02EF  00F8               	movwf	___awdiv@divisor+1
  3269  02F0  082B               	movf	(sprintf@exp+1)^(0+128),w
  3270  02F1  00FA               	movwf	___awdiv@dividend+1
  3271  02F2  082A               	movf	sprintf@exp^(0+128),w
  3272  02F3  00F9               	movwf	___awdiv@dividend
  3273  02F4  160A  118A  225A  120A  118A  	fcall	___awdiv
  3274  02F9  0878               	movf	?___awdiv+1,w
  3275  02FA  1683               	bsf	3,5	;RP0=1, select bank1
  3276  02FB  1303               	bcf	3,6	;RP1=0, select bank1
  3277  02FC  00AB               	movwf	(sprintf@exp+1)^(0+128)
  3278  02FD  0877               	movf	?___awdiv,w
  3279  02FE  00AA               	movwf	sprintf@exp^(0+128)
  3280                           
  3281                           ;doprnt.c: 841: if(exp < 0)
  3282  02FF  1FAB               	btfss	(sprintf@exp+1)^(0+128),7
  3283  0300  2B07               	goto	l2785
  3284                           
  3285                           ;doprnt.c: 842: exp--;
  3286  0301  30FF               	movlw	255
  3287  0302  07AA               	addwf	sprintf@exp^(0+128),f
  3288  0303  1803               	skipnc
  3289  0304  0AAB               	incf	(sprintf@exp+1)^(0+128),f
  3290  0305  30FF               	movlw	255
  3291  0306  07AB               	addwf	(sprintf@exp+1)^(0+128),f
  3292  0307                     l2785:	
  3293                           
  3294                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3295  0307  032A               	decf	sprintf@exp^(0+128),w
  3296  0308  3AFF               	xorlw	255
  3297  0309  120A  158A  221C  120A  118A  	fcall	_scale
  3298  030E  1283               	bcf	3,5	;RP0=0, select bank0
  3299  030F  1303               	bcf	3,6	;RP1=0, select bank0
  3300  0310  0837               	movf	?_scale,w
  3301  0311  1683               	bsf	3,5	;RP0=1, select bank1
  3302  0312  1303               	bcf	3,6	;RP1=0, select bank1
  3303  0313  00AC               	movwf	sprintf@tmpval^(0+128)
  3304  0314  1283               	bcf	3,5	;RP0=0, select bank0
  3305  0315  1303               	bcf	3,6	;RP1=0, select bank0
  3306  0316  0838               	movf	?_scale+1,w
  3307  0317  1683               	bsf	3,5	;RP0=1, select bank1
  3308  0318  1303               	bcf	3,6	;RP1=0, select bank1
  3309  0319  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  3310  031A  1283               	bcf	3,5	;RP0=0, select bank0
  3311  031B  1303               	bcf	3,6	;RP1=0, select bank0
  3312  031C  0839               	movf	?_scale+2,w
  3313  031D  1683               	bsf	3,5	;RP0=1, select bank1
  3314  031E  1303               	bcf	3,6	;RP1=0, select bank1
  3315  031F  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  3316                           
  3317                           ;doprnt.c: 847: tmpval.integ *= fval;
  3318  0320  0833               	movf	sprintf@fval^(0+128),w
  3319  0321  1283               	bcf	3,5	;RP0=0, select bank0
  3320  0322  1303               	bcf	3,6	;RP1=0, select bank0
  3321  0323  00A7               	movwf	___ftmul@f1
  3322  0324  1683               	bsf	3,5	;RP0=1, select bank1
  3323  0325  1303               	bcf	3,6	;RP1=0, select bank1
  3324  0326  0834               	movf	(sprintf@fval+1)^(0+128),w
  3325  0327  1283               	bcf	3,5	;RP0=0, select bank0
  3326  0328  1303               	bcf	3,6	;RP1=0, select bank0
  3327  0329  00A8               	movwf	___ftmul@f1+1
  3328  032A  1683               	bsf	3,5	;RP0=1, select bank1
  3329  032B  1303               	bcf	3,6	;RP1=0, select bank1
  3330  032C  0835               	movf	(sprintf@fval+2)^(0+128),w
  3331  032D  1283               	bcf	3,5	;RP0=0, select bank0
  3332  032E  1303               	bcf	3,6	;RP1=0, select bank0
  3333  032F  00A9               	movwf	___ftmul@f1+2
  3334  0330  1683               	bsf	3,5	;RP0=1, select bank1
  3335  0331  1303               	bcf	3,6	;RP1=0, select bank1
  3336  0332  082C               	movf	sprintf@tmpval^(0+128),w
  3337  0333  1283               	bcf	3,5	;RP0=0, select bank0
  3338  0334  1303               	bcf	3,6	;RP1=0, select bank0
  3339  0335  00AA               	movwf	___ftmul@f2
  3340  0336  1683               	bsf	3,5	;RP0=1, select bank1
  3341  0337  1303               	bcf	3,6	;RP1=0, select bank1
  3342  0338  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  3343  0339  1283               	bcf	3,5	;RP0=0, select bank0
  3344  033A  1303               	bcf	3,6	;RP1=0, select bank0
  3345  033B  00AB               	movwf	___ftmul@f2+1
  3346  033C  1683               	bsf	3,5	;RP0=1, select bank1
  3347  033D  1303               	bcf	3,6	;RP1=0, select bank1
  3348  033E  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  3349  033F  1283               	bcf	3,5	;RP0=0, select bank0
  3350  0340  1303               	bcf	3,6	;RP1=0, select bank0
  3351  0341  00AC               	movwf	___ftmul@f2+2
  3352  0342  160A  118A  2624  120A  118A  	fcall	___ftmul
  3353  0347  1283               	bcf	3,5	;RP0=0, select bank0
  3354  0348  1303               	bcf	3,6	;RP1=0, select bank0
  3355  0349  0827               	movf	?___ftmul,w
  3356  034A  1683               	bsf	3,5	;RP0=1, select bank1
  3357  034B  1303               	bcf	3,6	;RP1=0, select bank1
  3358  034C  00AC               	movwf	sprintf@tmpval^(0+128)
  3359  034D  1283               	bcf	3,5	;RP0=0, select bank0
  3360  034E  1303               	bcf	3,6	;RP1=0, select bank0
  3361  034F  0828               	movf	?___ftmul+1,w
  3362  0350  1683               	bsf	3,5	;RP0=1, select bank1
  3363  0351  1303               	bcf	3,6	;RP1=0, select bank1
  3364  0352  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  3365  0353  1283               	bcf	3,5	;RP0=0, select bank0
  3366  0354  1303               	bcf	3,6	;RP1=0, select bank0
  3367  0355  0829               	movf	?___ftmul+2,w
  3368  0356  1683               	bsf	3,5	;RP0=1, select bank1
  3369  0357  1303               	bcf	3,6	;RP1=0, select bank1
  3370  0358  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  3371                           
  3372                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3373  0359  082C               	movf	sprintf@tmpval^(0+128),w
  3374  035A  00F0               	movwf	___ftge@ff1
  3375  035B  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  3376  035C  00F1               	movwf	___ftge@ff1+1
  3377  035D  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  3378  035E  00F2               	movwf	___ftge@ff1+2
  3379  035F  3000               	movlw	0
  3380  0360  00F3               	movwf	___ftge@ff2
  3381  0361  3080               	movlw	128
  3382  0362  00F4               	movwf	___ftge@ff2+1
  3383  0363  303F               	movlw	63
  3384  0364  00F5               	movwf	___ftge@ff2+2
  3385  0365  120A  118A  2003  120A  118A  	fcall	___ftge
  3386  036A  1803               	btfsc	3,0
  3387  036B  2B74               	goto	l2793
  3388                           
  3389                           ;doprnt.c: 849: exp--;
  3390  036C  30FF               	movlw	255
  3391  036D  1683               	bsf	3,5	;RP0=1, select bank1
  3392  036E  1303               	bcf	3,6	;RP1=0, select bank1
  3393  036F  07AA               	addwf	sprintf@exp^(0+128),f
  3394  0370  1803               	skipnc
  3395  0371  0AAB               	incf	(sprintf@exp+1)^(0+128),f
  3396  0372  30FF               	movlw	255
  3397  0373  2B90               	goto	L6
  3398  0374                     l2793:	
  3399                           
  3400                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3401  0374  1683               	bsf	3,5	;RP0=1, select bank1
  3402  0375  1303               	bcf	3,6	;RP1=0, select bank1
  3403  0376  082C               	movf	sprintf@tmpval^(0+128),w
  3404  0377  00F0               	movwf	___ftge@ff1
  3405  0378  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  3406  0379  00F1               	movwf	___ftge@ff1+1
  3407  037A  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  3408  037B  00F2               	movwf	___ftge@ff1+2
  3409  037C  3000               	movlw	0
  3410  037D  00F3               	movwf	___ftge@ff2
  3411  037E  3020               	movlw	32
  3412  037F  00F4               	movwf	___ftge@ff2+1
  3413  0380  3041               	movlw	65
  3414  0381  00F5               	movwf	___ftge@ff2+2
  3415  0382  120A  118A  2003  120A  118A  	fcall	___ftge
  3416  0387  1C03               	btfss	3,0
  3417  0388  2B91               	goto	l2797
  3418                           
  3419                           ;doprnt.c: 851: exp++;
  3420  0389  3001               	movlw	1
  3421  038A  1683               	bsf	3,5	;RP0=1, select bank1
  3422  038B  1303               	bcf	3,6	;RP1=0, select bank1
  3423  038C  07AA               	addwf	sprintf@exp^(0+128),f
  3424  038D  1803               	skipnc
  3425  038E  0AAB               	incf	(sprintf@exp+1)^(0+128),f
  3426  038F  3000               	movlw	0
  3427  0390                     L6:	
  3428  0390  07AB               	addwf	(sprintf@exp+1)^(0+128),f
  3429  0391                     l2797:	
  3430                           
  3431                           ;doprnt.c: 852: }
  3432                           ;doprnt.c: 1112: if(prec <= 12)
  3433  0391  1683               	bsf	3,5	;RP0=1, select bank1
  3434  0392  1303               	bcf	3,6	;RP1=0, select bank1
  3435  0393  0831               	movf	(sprintf@prec+1)^(0+128),w
  3436  0394  3A80               	xorlw	128
  3437  0395  00FF               	movwf	127
  3438  0396  3080               	movlw	128
  3439  0397  027F               	subwf	127,w
  3440  0398  1D03               	skipz
  3441  0399  2B9C               	goto	u3875
  3442  039A  300D               	movlw	13
  3443  039B  0230               	subwf	sprintf@prec^(0+128),w
  3444  039C                     u3875:	
  3445  039C  1803               	skipnc
  3446  039D  2BD7               	goto	l2801
  3447                           
  3448                           ;doprnt.c: 1113: fval += fround(prec);
  3449  039E  1683               	bsf	3,5	;RP0=1, select bank1
  3450  039F  1303               	bcf	3,6	;RP1=0, select bank1
  3451  03A0  0830               	movf	sprintf@prec^(0+128),w
  3452  03A1  120A  158A  206A  120A  118A  	fcall	_fround
  3453  03A6  1283               	bcf	3,5	;RP0=0, select bank0
  3454  03A7  1303               	bcf	3,6	;RP1=0, select bank0
  3455  03A8  0837               	movf	?_fround,w
  3456  03A9  00C7               	movwf	___ftadd@f1
  3457  03AA  0838               	movf	?_fround+1,w
  3458  03AB  00C8               	movwf	___ftadd@f1+1
  3459  03AC  0839               	movf	?_fround+2,w
  3460  03AD  00C9               	movwf	___ftadd@f1+2
  3461  03AE  1683               	bsf	3,5	;RP0=1, select bank1
  3462  03AF  1303               	bcf	3,6	;RP1=0, select bank1
  3463  03B0  0833               	movf	sprintf@fval^(0+128),w
  3464  03B1  1283               	bcf	3,5	;RP0=0, select bank0
  3465  03B2  1303               	bcf	3,6	;RP1=0, select bank0
  3466  03B3  00CA               	movwf	___ftadd@f2
  3467  03B4  1683               	bsf	3,5	;RP0=1, select bank1
  3468  03B5  1303               	bcf	3,6	;RP1=0, select bank1
  3469  03B6  0834               	movf	(sprintf@fval+1)^(0+128),w
  3470  03B7  1283               	bcf	3,5	;RP0=0, select bank0
  3471  03B8  1303               	bcf	3,6	;RP1=0, select bank0
  3472  03B9  00CB               	movwf	___ftadd@f2+1
  3473  03BA  1683               	bsf	3,5	;RP0=1, select bank1
  3474  03BB  1303               	bcf	3,6	;RP1=0, select bank1
  3475  03BC  0835               	movf	(sprintf@fval+2)^(0+128),w
  3476  03BD  1283               	bcf	3,5	;RP0=0, select bank0
  3477  03BE  1303               	bcf	3,6	;RP1=0, select bank0
  3478  03BF  00CC               	movwf	___ftadd@f2+2
  3479  03C0  160A  118A  26F7  120A  118A  	fcall	___ftadd
  3480  03C5  1283               	bcf	3,5	;RP0=0, select bank0
  3481  03C6  1303               	bcf	3,6	;RP1=0, select bank0
  3482  03C7  0847               	movf	?___ftadd,w
  3483  03C8  1683               	bsf	3,5	;RP0=1, select bank1
  3484  03C9  1303               	bcf	3,6	;RP1=0, select bank1
  3485  03CA  00B3               	movwf	sprintf@fval^(0+128)
  3486  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  3487  03CC  1303               	bcf	3,6	;RP1=0, select bank0
  3488  03CD  0848               	movf	?___ftadd+1,w
  3489  03CE  1683               	bsf	3,5	;RP0=1, select bank1
  3490  03CF  1303               	bcf	3,6	;RP1=0, select bank1
  3491  03D0  00B4               	movwf	(sprintf@fval+1)^(0+128)
  3492  03D1  1283               	bcf	3,5	;RP0=0, select bank0
  3493  03D2  1303               	bcf	3,6	;RP1=0, select bank0
  3494  03D3  0849               	movf	?___ftadd+2,w
  3495  03D4  1683               	bsf	3,5	;RP0=1, select bank1
  3496  03D5  1303               	bcf	3,6	;RP1=0, select bank1
  3497  03D6  00B5               	movwf	(sprintf@fval+2)^(0+128)
  3498  03D7                     l2801:	
  3499                           
  3500                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3501  03D7  1683               	bsf	3,5	;RP0=1, select bank1
  3502  03D8  1303               	bcf	3,6	;RP1=0, select bank1
  3503  03D9  082B               	movf	(sprintf@exp+1)^(0+128),w
  3504  03DA  3A80               	xorlw	128
  3505  03DB  00FF               	movwf	127
  3506  03DC  3080               	movlw	128
  3507  03DD  027F               	subwf	127,w
  3508  03DE  1D03               	skipz
  3509  03DF  2BE2               	goto	u3885
  3510  03E0  300A               	movlw	10
  3511  03E1  022A               	subwf	sprintf@exp^(0+128),w
  3512  03E2                     u3885:	
  3513  03E2  1803               	skipnc
  3514  03E3  2C15               	goto	l2809
  3515  03E4  1683               	bsf	3,5	;RP0=1, select bank1
  3516  03E5  1303               	bcf	3,6	;RP1=0, select bank1
  3517  03E6  0835               	movf	(sprintf@fval+2)^(0+128),w
  3518  03E7  0434               	iorwf	(sprintf@fval+1)^(0+128),w
  3519  03E8  0433               	iorwf	sprintf@fval^(0+128),w
  3520  03E9  1903               	skipnz
  3521  03EA  2C6E               	goto	l2823
  3522  03EB  0833               	movf	sprintf@fval^(0+128),w
  3523  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  3524  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  3525  03EE  00C0               	movwf	___fttol@f1
  3526  03EF  1683               	bsf	3,5	;RP0=1, select bank1
  3527  03F0  1303               	bcf	3,6	;RP1=0, select bank1
  3528  03F1  0834               	movf	(sprintf@fval+1)^(0+128),w
  3529  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  3530  03F3  1303               	bcf	3,6	;RP1=0, select bank0
  3531  03F4  00C1               	movwf	___fttol@f1+1
  3532  03F5  1683               	bsf	3,5	;RP0=1, select bank1
  3533  03F6  1303               	bcf	3,6	;RP1=0, select bank1
  3534  03F7  0835               	movf	(sprintf@fval+2)^(0+128),w
  3535  03F8  1283               	bcf	3,5	;RP0=0, select bank0
  3536  03F9  1303               	bcf	3,6	;RP1=0, select bank0
  3537  03FA  00C2               	movwf	___fttol@f1+2
  3538  03FB  160A  118A  24D3  120A  118A  	fcall	___fttol
  3539  0400  1283               	bcf	3,5	;RP0=0, select bank0
  3540  0401  1303               	bcf	3,6	;RP1=0, select bank0
  3541  0402  0843               	movf	?___fttol+3,w
  3542  0403  0442               	iorwf	?___fttol+2,w
  3543  0404  0441               	iorwf	?___fttol+1,w
  3544  0405  0440               	iorwf	?___fttol,w
  3545  0406  1D03               	skipz
  3546  0407  2C6E               	goto	l2823
  3547  0408  1683               	bsf	3,5	;RP0=1, select bank1
  3548  0409  1303               	bcf	3,6	;RP1=0, select bank1
  3549  040A  082B               	movf	(sprintf@exp+1)^(0+128),w
  3550  040B  3A80               	xorlw	128
  3551  040C  00FF               	movwf	127
  3552  040D  3080               	movlw	128
  3553  040E  027F               	subwf	127,w
  3554  040F  1D03               	skipz
  3555  0410  2C13               	goto	u3915
  3556  0411  3002               	movlw	2
  3557  0412  022A               	subwf	sprintf@exp^(0+128),w
  3558  0413                     u3915:	
  3559  0413  1C03               	skipc
  3560  0414  2C6E               	goto	l2823
  3561  0415                     l2809:	
  3562                           
  3563                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3564  0415  1683               	bsf	3,5	;RP0=1, select bank1
  3565  0416  1303               	bcf	3,6	;RP1=0, select bank1
  3566  0417  082C               	movf	sprintf@tmpval^(0+128),w
  3567  0418  00F0               	movwf	___ftge@ff1
  3568  0419  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  3569  041A  00F1               	movwf	___ftge@ff1+1
  3570  041B  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  3571  041C  00F2               	movwf	___ftge@ff1+2
  3572  041D  3070               	movlw	112
  3573  041E  00F3               	movwf	___ftge@ff2
  3574  041F  3089               	movlw	137
  3575  0420  00F4               	movwf	___ftge@ff2+1
  3576  0421  3040               	movlw	64
  3577  0422  00F5               	movwf	___ftge@ff2+2
  3578  0423  120A  118A  2003  120A  118A  	fcall	___ftge
  3579  0428  1803               	btfsc	3,0
  3580  0429  2C2C               	goto	l2813
  3581                           
  3582                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3583  042A  30F7               	movlw	247
  3584  042B  2C2D               	goto	L7
  3585  042C                     l2813:	
  3586                           ;doprnt.c: 1122: }else{
  3587                           
  3588                           
  3589                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3590  042C  30F8               	movlw	248
  3591  042D                     L7:	
  3592  042D  1683               	bsf	3,5	;RP0=1, select bank1
  3593  042E  1303               	bcf	3,6	;RP1=0, select bank1
  3594  042F  07AA               	addwf	sprintf@exp^(0+128),f
  3595  0430  1803               	skipnc
  3596  0431  0AAB               	incf	(sprintf@exp+1)^(0+128),f
  3597  0432  30FF               	movlw	255
  3598  0433  07AB               	addwf	(sprintf@exp+1)^(0+128),f
  3599                           
  3600                           ;doprnt.c: 1124: }
  3601                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3602  0434  082A               	movf	sprintf@exp^(0+128),w
  3603  0435  120A  158A  221C  120A  118A  	fcall	_scale
  3604  043A  1283               	bcf	3,5	;RP0=0, select bank0
  3605  043B  1303               	bcf	3,6	;RP1=0, select bank0
  3606  043C  0837               	movf	?_scale,w
  3607  043D  1683               	bsf	3,5	;RP0=1, select bank1
  3608  043E  1303               	bcf	3,6	;RP1=0, select bank1
  3609  043F  00AC               	movwf	sprintf@tmpval^(0+128)
  3610  0440  1283               	bcf	3,5	;RP0=0, select bank0
  3611  0441  1303               	bcf	3,6	;RP1=0, select bank0
  3612  0442  0838               	movf	?_scale+1,w
  3613  0443  1683               	bsf	3,5	;RP0=1, select bank1
  3614  0444  1303               	bcf	3,6	;RP1=0, select bank1
  3615  0445  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  3616  0446  1283               	bcf	3,5	;RP0=0, select bank0
  3617  0447  1303               	bcf	3,6	;RP1=0, select bank0
  3618  0448  0839               	movf	?_scale+2,w
  3619  0449  1683               	bsf	3,5	;RP0=1, select bank1
  3620  044A  1303               	bcf	3,6	;RP1=0, select bank1
  3621  044B  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  3622                           
  3623                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3624  044C  0833               	movf	sprintf@fval^(0+128),w
  3625  044D  00F0               	movwf	__tdiv_to_l_@f1
  3626  044E  0834               	movf	(sprintf@fval+1)^(0+128),w
  3627  044F  00F1               	movwf	__tdiv_to_l_@f1+1
  3628  0450  0835               	movf	(sprintf@fval+2)^(0+128),w
  3629  0451  00F2               	movwf	__tdiv_to_l_@f1+2
  3630  0452  082C               	movf	sprintf@tmpval^(0+128),w
  3631  0453  00F3               	movwf	__tdiv_to_l_@f2
  3632  0454  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  3633  0455  00F4               	movwf	__tdiv_to_l_@f2+1
  3634  0456  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  3635  0457  00F5               	movwf	__tdiv_to_l_@f2+2
  3636  0458  160A  118A  2561  120A  118A  	fcall	__tdiv_to_l_
  3637  045D  0873               	movf	?__tdiv_to_l_+3,w
  3638  045E  1683               	bsf	3,5	;RP0=1, select bank1
  3639  045F  1303               	bcf	3,6	;RP1=0, select bank1
  3640  0460  00A9               	movwf	(sprintf@val+3)^(0+128)
  3641  0461  0872               	movf	?__tdiv_to_l_+2,w
  3642  0462  00A8               	movwf	(sprintf@val+2)^(0+128)
  3643  0463  0871               	movf	?__tdiv_to_l_+1,w
  3644  0464  00A7               	movwf	(sprintf@val+1)^(0+128)
  3645  0465  0870               	movf	?__tdiv_to_l_,w
  3646  0466  00A6               	movwf	sprintf@val^(0+128)
  3647                           
  3648                           ;doprnt.c: 1129: fval = 0.0;
  3649  0467  3000               	movlw	0
  3650  0468  00B3               	movwf	sprintf@fval^(0+128)
  3651  0469  3000               	movlw	0
  3652  046A  00B4               	movwf	(sprintf@fval+1)^(0+128)
  3653  046B  3000               	movlw	0
  3654  046C  00B5               	movwf	(sprintf@fval+2)^(0+128)
  3655                           
  3656                           ;doprnt.c: 1130: } else {
  3657  046D  2CDD               	goto	l2827
  3658  046E                     l2823:	
  3659                           
  3660                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3661  046E  1683               	bsf	3,5	;RP0=1, select bank1
  3662  046F  1303               	bcf	3,6	;RP1=0, select bank1
  3663  0470  0833               	movf	sprintf@fval^(0+128),w
  3664  0471  1283               	bcf	3,5	;RP0=0, select bank0
  3665  0472  1303               	bcf	3,6	;RP1=0, select bank0
  3666  0473  00C0               	movwf	___fttol@f1
  3667  0474  1683               	bsf	3,5	;RP0=1, select bank1
  3668  0475  1303               	bcf	3,6	;RP1=0, select bank1
  3669  0476  0834               	movf	(sprintf@fval+1)^(0+128),w
  3670  0477  1283               	bcf	3,5	;RP0=0, select bank0
  3671  0478  1303               	bcf	3,6	;RP1=0, select bank0
  3672  0479  00C1               	movwf	___fttol@f1+1
  3673  047A  1683               	bsf	3,5	;RP0=1, select bank1
  3674  047B  1303               	bcf	3,6	;RP1=0, select bank1
  3675  047C  0835               	movf	(sprintf@fval+2)^(0+128),w
  3676  047D  1283               	bcf	3,5	;RP0=0, select bank0
  3677  047E  1303               	bcf	3,6	;RP1=0, select bank0
  3678  047F  00C2               	movwf	___fttol@f1+2
  3679  0480  160A  118A  24D3  120A  118A  	fcall	___fttol
  3680  0485  1283               	bcf	3,5	;RP0=0, select bank0
  3681  0486  1303               	bcf	3,6	;RP1=0, select bank0
  3682  0487  0843               	movf	?___fttol+3,w
  3683  0488  1683               	bsf	3,5	;RP0=1, select bank1
  3684  0489  1303               	bcf	3,6	;RP1=0, select bank1
  3685  048A  00A9               	movwf	(sprintf@val+3)^(0+128)
  3686  048B  1283               	bcf	3,5	;RP0=0, select bank0
  3687  048C  1303               	bcf	3,6	;RP1=0, select bank0
  3688  048D  0842               	movf	?___fttol+2,w
  3689  048E  1683               	bsf	3,5	;RP0=1, select bank1
  3690  048F  1303               	bcf	3,6	;RP1=0, select bank1
  3691  0490  00A8               	movwf	(sprintf@val+2)^(0+128)
  3692  0491  1283               	bcf	3,5	;RP0=0, select bank0
  3693  0492  1303               	bcf	3,6	;RP1=0, select bank0
  3694  0493  0841               	movf	?___fttol+1,w
  3695  0494  1683               	bsf	3,5	;RP0=1, select bank1
  3696  0495  1303               	bcf	3,6	;RP1=0, select bank1
  3697  0496  00A7               	movwf	(sprintf@val+1)^(0+128)
  3698  0497  1283               	bcf	3,5	;RP0=0, select bank0
  3699  0498  1303               	bcf	3,6	;RP1=0, select bank0
  3700  0499  0840               	movf	?___fttol,w
  3701  049A  1683               	bsf	3,5	;RP0=1, select bank1
  3702  049B  1303               	bcf	3,6	;RP1=0, select bank1
  3703  049C  00A6               	movwf	sprintf@val^(0+128)
  3704                           
  3705                           ;doprnt.c: 1132: fval -= (double)val;
  3706  049D  0829               	movf	(sprintf@val+3)^(0+128),w
  3707  049E  00FB               	movwf	___lltoft@c+3
  3708  049F  0828               	movf	(sprintf@val+2)^(0+128),w
  3709  04A0  00FA               	movwf	___lltoft@c+2
  3710  04A1  0827               	movf	(sprintf@val+1)^(0+128),w
  3711  04A2  00F9               	movwf	___lltoft@c+1
  3712  04A3  0826               	movf	sprintf@val^(0+128),w
  3713  04A4  00F8               	movwf	___lltoft@c
  3714  04A5  160A  158A  276A  120A  118A  	fcall	___lltoft
  3715  04AA  0878               	movf	?___lltoft,w
  3716  04AB  1283               	bcf	3,5	;RP0=0, select bank0
  3717  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  3718  04AD  00D4               	movwf	___ftsub@f2
  3719  04AE  0879               	movf	?___lltoft+1,w
  3720  04AF  00D5               	movwf	___ftsub@f2+1
  3721  04B0  087A               	movf	?___lltoft+2,w
  3722  04B1  00D6               	movwf	___ftsub@f2+2
  3723  04B2  1683               	bsf	3,5	;RP0=1, select bank1
  3724  04B3  1303               	bcf	3,6	;RP1=0, select bank1
  3725  04B4  0833               	movf	sprintf@fval^(0+128),w
  3726  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  3727  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  3728  04B7  00D7               	movwf	___ftsub@f1
  3729  04B8  1683               	bsf	3,5	;RP0=1, select bank1
  3730  04B9  1303               	bcf	3,6	;RP1=0, select bank1
  3731  04BA  0834               	movf	(sprintf@fval+1)^(0+128),w
  3732  04BB  1283               	bcf	3,5	;RP0=0, select bank0
  3733  04BC  1303               	bcf	3,6	;RP1=0, select bank0
  3734  04BD  00D8               	movwf	___ftsub@f1+1
  3735  04BE  1683               	bsf	3,5	;RP0=1, select bank1
  3736  04BF  1303               	bcf	3,6	;RP1=0, select bank1
  3737  04C0  0835               	movf	(sprintf@fval+2)^(0+128),w
  3738  04C1  1283               	bcf	3,5	;RP0=0, select bank0
  3739  04C2  1303               	bcf	3,6	;RP1=0, select bank0
  3740  04C3  00D9               	movwf	___ftsub@f1+2
  3741  04C4  160A  158A  26DE  120A  118A  	fcall	___ftsub
  3742  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  3743  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  3744  04CB  0854               	movf	?___ftsub,w
  3745  04CC  1683               	bsf	3,5	;RP0=1, select bank1
  3746  04CD  1303               	bcf	3,6	;RP1=0, select bank1
  3747  04CE  00B3               	movwf	sprintf@fval^(0+128)
  3748  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  3749  04D0  1303               	bcf	3,6	;RP1=0, select bank0
  3750  04D1  0855               	movf	?___ftsub+1,w
  3751  04D2  1683               	bsf	3,5	;RP0=1, select bank1
  3752  04D3  1303               	bcf	3,6	;RP1=0, select bank1
  3753  04D4  00B4               	movwf	(sprintf@fval+1)^(0+128)
  3754  04D5  1283               	bcf	3,5	;RP0=0, select bank0
  3755  04D6  1303               	bcf	3,6	;RP1=0, select bank0
  3756  04D7  0856               	movf	?___ftsub+2,w
  3757  04D8  1683               	bsf	3,5	;RP0=1, select bank1
  3758  04D9  1303               	bcf	3,6	;RP1=0, select bank1
  3759  04DA  00B5               	movwf	(sprintf@fval+2)^(0+128)
  3760                           
  3761                           ;doprnt.c: 1133: exp = 0;
  3762  04DB  01AA               	clrf	sprintf@exp^(0+128)
  3763  04DC  01AB               	clrf	(sprintf@exp+1)^(0+128)
  3764  04DD                     l2827:	
  3765                           
  3766                           ;doprnt.c: 1134: }
  3767                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3768  04DD  01B6               	clrf	sprintf@c^(0+128)
  3769  04DE  0AB6               	incf	sprintf@c^(0+128),f
  3770  04DF  300A               	movlw	10
  3771  04E0  0636               	xorwf	sprintf@c^(0+128),w
  3772  04E1  1903               	btfsc	3,2
  3773  04E2  2D37               	goto	l2839
  3774  04E3                     l2833:	
  3775                           
  3776                           ;doprnt.c: 1137: if(val < dpowers[c])
  3777  04E3  0836               	movf	sprintf@c^(0+128),w
  3778  04E4  1283               	bcf	3,5	;RP0=0, select bank0
  3779  04E5  1303               	bcf	3,6	;RP1=0, select bank0
  3780  04E6  00DF               	movwf	??_sprintf
  3781  04E7  3001               	movlw	1
  3782  04E8                     u3945:	
  3783  04E8  1003               	clrc
  3784  04E9  0DDF               	rlf	??_sprintf,f
  3785  04EA  3EFF               	addlw	-1
  3786  04EB  1D03               	skipz
  3787  04EC  2CE8               	goto	u3945
  3788  04ED  1003               	clrc
  3789  04EE  0D5F               	rlf	??_sprintf,w
  3790  04EF  3E12               	addlw	low (_dpowers| (0+32768))
  3791  04F0  0084               	movwf	4
  3792  04F1  3090               	movlw	high (_dpowers| (0+32768))
  3793  04F2  1803               	skipnc
  3794  04F3  3E01               	addlw	1
  3795  04F4  00FF               	movwf	127
  3796  04F5  160A  118A  2000  120A  118A  	fcall	stringtab
  3797  04FA  00E0               	movwf	??_sprintf+1
  3798  04FB  160A  118A  2000  120A  118A  	fcall	stringtab
  3799  0500  00E1               	movwf	??_sprintf+2
  3800  0501  160A  118A  2000  120A  118A  	fcall	stringtab
  3801  0506  00E2               	movwf	??_sprintf+3
  3802  0507  160A  118A  2000  120A  118A  	fcall	stringtab
  3803  050C  00E3               	movwf	??_sprintf+4
  3804  050D  0863               	movf	??_sprintf+4,w
  3805  050E  1683               	bsf	3,5	;RP0=1, select bank1
  3806  050F  1303               	bcf	3,6	;RP1=0, select bank1
  3807  0510  0229               	subwf	(sprintf@val+3)^(0+128),w
  3808  0511  1D03               	skipz
  3809  0512  2D29               	goto	u3955
  3810  0513  1283               	bcf	3,5	;RP0=0, select bank0
  3811  0514  1303               	bcf	3,6	;RP1=0, select bank0
  3812  0515  0862               	movf	??_sprintf+3,w
  3813  0516  1683               	bsf	3,5	;RP0=1, select bank1
  3814  0517  1303               	bcf	3,6	;RP1=0, select bank1
  3815  0518  0228               	subwf	(sprintf@val+2)^(0+128),w
  3816  0519  1D03               	skipz
  3817  051A  2D29               	goto	u3955
  3818  051B  1283               	bcf	3,5	;RP0=0, select bank0
  3819  051C  1303               	bcf	3,6	;RP1=0, select bank0
  3820  051D  0861               	movf	??_sprintf+2,w
  3821  051E  1683               	bsf	3,5	;RP0=1, select bank1
  3822  051F  1303               	bcf	3,6	;RP1=0, select bank1
  3823  0520  0227               	subwf	(sprintf@val+1)^(0+128),w
  3824  0521  1D03               	skipz
  3825  0522  2D29               	goto	u3955
  3826  0523  1283               	bcf	3,5	;RP0=0, select bank0
  3827  0524  1303               	bcf	3,6	;RP1=0, select bank0
  3828  0525  0860               	movf	??_sprintf+1,w
  3829  0526  1683               	bsf	3,5	;RP0=1, select bank1
  3830  0527  1303               	bcf	3,6	;RP1=0, select bank1
  3831  0528  0226               	subwf	sprintf@val^(0+128),w
  3832  0529                     u3955:	
  3833  0529  1C03               	btfss	3,0
  3834  052A  2D37               	goto	l2839
  3835                           
  3836                           ;doprnt.c: 1138: break;
  3837  052B  3001               	movlw	1
  3838  052C  1283               	bcf	3,5	;RP0=0, select bank0
  3839  052D  1303               	bcf	3,6	;RP1=0, select bank0
  3840  052E  00DF               	movwf	??_sprintf
  3841  052F  085F               	movf	??_sprintf,w
  3842  0530  1683               	bsf	3,5	;RP0=1, select bank1
  3843  0531  1303               	bcf	3,6	;RP1=0, select bank1
  3844  0532  07B6               	addwf	sprintf@c^(0+128),f
  3845  0533  300A               	movlw	10
  3846  0534  0636               	xorwf	sprintf@c^(0+128),w
  3847  0535  1D03               	btfss	3,2
  3848  0536  2CE3               	goto	l2833
  3849  0537                     l2839:	
  3850                           
  3851                           ;doprnt.c: 1175: {
  3852                           ;doprnt.c: 1188: if(flag & 0x03)
  3853  0537  3003               	movlw	3
  3854  0538  0524               	andwf	sprintf@flag^(0+128),w
  3855  0539  1283               	bcf	3,5	;RP0=0, select bank0
  3856  053A  1303               	bcf	3,6	;RP1=0, select bank0
  3857  053B  00DF               	movwf	??_sprintf
  3858  053C  3000               	movlw	0
  3859  053D  1683               	bsf	3,5	;RP0=1, select bank1
  3860  053E  1303               	bcf	3,6	;RP1=0, select bank1
  3861  053F  0525               	andwf	(sprintf@flag+1)^(0+128),w
  3862  0540  1283               	bcf	3,5	;RP0=0, select bank0
  3863  0541  1303               	bcf	3,6	;RP1=0, select bank0
  3864  0542  00E0               	movwf	??_sprintf+1
  3865  0543  085F               	movf	??_sprintf,w
  3866  0544  0460               	iorwf	??_sprintf+1,w
  3867  0545  1903               	btfsc	3,2
  3868  0546  2D58               	goto	l2853
  3869                           
  3870                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3871  0547  302D               	movlw	45
  3872  0548                     L11:	
  3873  0548  00DF               	movwf	??_sprintf
  3874  0549  1683               	bsf	3,5	;RP0=1, select bank1
  3875  054A  1303               	bcf	3,6	;RP1=0, select bank1
  3876  054B  0832               	movf	sprintf@sp^(0+128),w
  3877  054C  0084               	movwf	4
  3878  054D  1283               	bcf	3,5	;RP0=0, select bank0
  3879  054E  1303               	bcf	3,6	;RP1=0, select bank0
  3880  054F  085F               	movf	??_sprintf,w
  3881  0550  1383               	bcf	3,7	;select IRP bank0
  3882  0551  0080               	movwf	0
  3883  0552  3001               	movlw	1
  3884  0553  00DF               	movwf	??_sprintf
  3885  0554  085F               	movf	??_sprintf,w
  3886  0555  1683               	bsf	3,5	;RP0=1, select bank1
  3887  0556  1303               	bcf	3,6	;RP1=0, select bank1
  3888  0557  07B2               	addwf	sprintf@sp^(0+128),f
  3889  0558                     l2853:	
  3890  0558  30FF               	movlw	255
  3891  0559  1283               	bcf	3,5	;RP0=0, select bank0
  3892  055A  00DF               	movwf	??_sprintf
  3893  055B  085F               	movf	??_sprintf,w
  3894  055C  1683               	bsf	3,5	;RP0=1, select bank1
  3895  055D  1303               	bcf	3,6	;RP1=0, select bank1
  3896  055E  07B6               	addwf	sprintf@c^(0+128),f
  3897  055F  0A36               	incf	sprintf@c^(0+128),w
  3898  0560  1903               	btfsc	3,2
  3899  0561  2DE2               	goto	l2861
  3900                           
  3901                           ;doprnt.c: 1200: {
  3902                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3903                           
  3904                           ;doprnt.c: 1195: }
  3905                           ;doprnt.c: 1196: while(c--) {
  3906  0562  0836               	movf	sprintf@c^(0+128),w
  3907  0563  1283               	bcf	3,5	;RP0=0, select bank0
  3908  0564  1303               	bcf	3,6	;RP1=0, select bank0
  3909  0565  00DF               	movwf	??_sprintf
  3910  0566  3001               	movlw	1
  3911  0567                     u3985:	
  3912  0567  1003               	clrc
  3913  0568  0DDF               	rlf	??_sprintf,f
  3914  0569  3EFF               	addlw	-1
  3915  056A  1D03               	skipz
  3916  056B  2D67               	goto	u3985
  3917  056C  1003               	clrc
  3918  056D  0D5F               	rlf	??_sprintf,w
  3919  056E  3E12               	addlw	low (_dpowers| (0+32768))
  3920  056F  0084               	movwf	4
  3921  0570  3090               	movlw	high (_dpowers| (0+32768))
  3922  0571  1803               	skipnc
  3923  0572  3E01               	addlw	1
  3924  0573  00FF               	movwf	127
  3925  0574  160A  118A  2000  120A  118A  	fcall	stringtab
  3926  0579  00F0               	movwf	___lldiv@divisor
  3927  057A  160A  118A  2000  120A  118A  	fcall	stringtab
  3928  057F  00F1               	movwf	___lldiv@divisor+1
  3929  0580  160A  118A  2000  120A  118A  	fcall	stringtab
  3930  0585  00F2               	movwf	___lldiv@divisor+2
  3931  0586  160A  118A  2000  120A  118A  	fcall	stringtab
  3932  058B  00F3               	movwf	___lldiv@divisor+3
  3933  058C  1683               	bsf	3,5	;RP0=1, select bank1
  3934  058D  1303               	bcf	3,6	;RP1=0, select bank1
  3935  058E  0829               	movf	(sprintf@val+3)^(0+128),w
  3936  058F  00F7               	movwf	___lldiv@dividend+3
  3937  0590  0828               	movf	(sprintf@val+2)^(0+128),w
  3938  0591  00F6               	movwf	___lldiv@dividend+2
  3939  0592  0827               	movf	(sprintf@val+1)^(0+128),w
  3940  0593  00F5               	movwf	___lldiv@dividend+1
  3941  0594  0826               	movf	sprintf@val^(0+128),w
  3942  0595  00F4               	movwf	___lldiv@dividend
  3943  0596  160A  118A  22B5  120A  118A  	fcall	___lldiv
  3944  059B  0873               	movf	?___lldiv+3,w
  3945  059C  1683               	bsf	3,5	;RP0=1, select bank1
  3946  059D  1303               	bcf	3,6	;RP1=0, select bank1
  3947  059E  00AF               	movwf	(sprintf@tmpval+3)^(0+128)
  3948  059F  0872               	movf	?___lldiv+2,w
  3949  05A0  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  3950  05A1  0871               	movf	?___lldiv+1,w
  3951  05A2  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  3952  05A3  0870               	movf	?___lldiv,w
  3953  05A4  00AC               	movwf	sprintf@tmpval^(0+128)
  3954                           
  3955                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3956  05A5  3000               	movlw	0
  3957  05A6  00F3               	movwf	___llmod@divisor+3
  3958  05A7  3000               	movlw	0
  3959  05A8  00F2               	movwf	___llmod@divisor+2
  3960  05A9  3000               	movlw	0
  3961  05AA  00F1               	movwf	___llmod@divisor+1
  3962  05AB  300A               	movlw	10
  3963  05AC  00F0               	movwf	___llmod@divisor
  3964  05AD  082F               	movf	(sprintf@tmpval+3)^(0+128),w
  3965  05AE  00F7               	movwf	___llmod@dividend+3
  3966  05AF  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  3967  05B0  00F6               	movwf	___llmod@dividend+2
  3968  05B1  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  3969  05B2  00F5               	movwf	___llmod@dividend+1
  3970  05B3  082C               	movf	sprintf@tmpval^(0+128),w
  3971  05B4  00F4               	movwf	___llmod@dividend
  3972  05B5  160A  118A  21BB  120A  118A  	fcall	___llmod
  3973  05BA  0873               	movf	?___llmod+3,w
  3974  05BB  1683               	bsf	3,5	;RP0=1, select bank1
  3975  05BC  1303               	bcf	3,6	;RP1=0, select bank1
  3976  05BD  00AF               	movwf	(sprintf@tmpval+3)^(0+128)
  3977  05BE  0872               	movf	?___llmod+2,w
  3978  05BF  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  3979  05C0  0871               	movf	?___llmod+1,w
  3980  05C1  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  3981  05C2  0870               	movf	?___llmod,w
  3982  05C3  00AC               	movwf	sprintf@tmpval^(0+128)
  3983                           
  3984                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3985  05C4  082C               	movf	sprintf@tmpval^(0+128),w
  3986  05C5  3E30               	addlw	48
  3987  05C6  1283               	bcf	3,5	;RP0=0, select bank0
  3988  05C7  1303               	bcf	3,6	;RP1=0, select bank0
  3989  05C8  2D48               	goto	L11
  3990  05C9                     l2855:	
  3991                           ;doprnt.c: 1204: }
  3992                           ;doprnt.c: 1206: }
  3993                           ;doprnt.c: 1207: while(exp > 0) {
  3994                           
  3995                           
  3996                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3997  05C9  3030               	movlw	48
  3998  05CA  1283               	bcf	3,5	;RP0=0, select bank0
  3999  05CB  1303               	bcf	3,6	;RP1=0, select bank0
  4000  05CC  00DF               	movwf	??_sprintf
  4001  05CD  1683               	bsf	3,5	;RP0=1, select bank1
  4002  05CE  1303               	bcf	3,6	;RP1=0, select bank1
  4003  05CF  0832               	movf	sprintf@sp^(0+128),w
  4004  05D0  0084               	movwf	4
  4005  05D1  1283               	bcf	3,5	;RP0=0, select bank0
  4006  05D2  1303               	bcf	3,6	;RP1=0, select bank0
  4007  05D3  085F               	movf	??_sprintf,w
  4008  05D4  1383               	bcf	3,7	;select IRP bank0
  4009  05D5  0080               	movwf	0
  4010  05D6  3001               	movlw	1
  4011  05D7  00DF               	movwf	??_sprintf
  4012  05D8  085F               	movf	??_sprintf,w
  4013  05D9  1683               	bsf	3,5	;RP0=1, select bank1
  4014  05DA  1303               	bcf	3,6	;RP1=0, select bank1
  4015  05DB  07B2               	addwf	sprintf@sp^(0+128),f
  4016                           
  4017                           ;doprnt.c: 1209: exp--;
  4018  05DC  30FF               	movlw	255
  4019  05DD  07AA               	addwf	sprintf@exp^(0+128),f
  4020  05DE  1803               	skipnc
  4021  05DF  0AAB               	incf	(sprintf@exp+1)^(0+128),f
  4022  05E0  30FF               	movlw	255
  4023  05E1  07AB               	addwf	(sprintf@exp+1)^(0+128),f
  4024  05E2                     l2861:	
  4025  05E2  082B               	movf	(sprintf@exp+1)^(0+128),w
  4026  05E3  3A80               	xorlw	128
  4027  05E4  00FF               	movwf	127
  4028  05E5  3080               	movlw	128
  4029  05E6  027F               	subwf	127,w
  4030  05E7  1D03               	skipz
  4031  05E8  2DEB               	goto	u4005
  4032  05E9  3001               	movlw	1
  4033  05EA  022A               	subwf	sprintf@exp^(0+128),w
  4034  05EB                     u4005:	
  4035  05EB  1803               	skipnc
  4036  05EC  2DC9               	goto	l2855
  4037                           
  4038                           ;doprnt.c: 1210: }
  4039                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  4040  05ED  1683               	bsf	3,5	;RP0=1, select bank1
  4041  05EE  1303               	bcf	3,6	;RP1=0, select bank1
  4042  05EF  0831               	movf	(sprintf@prec+1)^(0+128),w
  4043  05F0  3A80               	xorlw	128
  4044  05F1  00FF               	movwf	127
  4045  05F2  3080               	movlw	128
  4046  05F3  027F               	subwf	127,w
  4047  05F4  1D03               	skipz
  4048  05F5  2DF8               	goto	u4015
  4049  05F6  3009               	movlw	9
  4050  05F7  0230               	subwf	sprintf@prec^(0+128),w
  4051  05F8                     u4015:	
  4052  05F8  1C03               	skipc
  4053  05F9  2DFC               	goto	l2867
  4054                           
  4055                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  4056  05FA  3008               	movlw	8
  4057  05FB  2DFF               	goto	L8
  4058  05FC                     l2867:	
  4059                           
  4060                           ;doprnt.c: 1213: else
  4061                           ;doprnt.c: 1214: c = prec;
  4062  05FC  1683               	bsf	3,5	;RP0=1, select bank1
  4063  05FD  1303               	bcf	3,6	;RP1=0, select bank1
  4064  05FE  0830               	movf	sprintf@prec^(0+128),w
  4065  05FF                     L8:	
  4066  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  4067  0600  1303               	bcf	3,6	;RP1=0, select bank0
  4068  0601  00DF               	movwf	??_sprintf
  4069  0602  085F               	movf	??_sprintf,w
  4070  0603  1683               	bsf	3,5	;RP0=1, select bank1
  4071  0604  1303               	bcf	3,6	;RP1=0, select bank1
  4072  0605  00B6               	movwf	sprintf@c^(0+128)
  4073                           
  4074                           ;doprnt.c: 1215: prec -= c;
  4075  0606  0836               	movf	sprintf@c^(0+128),w
  4076  0607  1283               	bcf	3,5	;RP0=0, select bank0
  4077  0608  1303               	bcf	3,6	;RP1=0, select bank0
  4078  0609  00DF               	movwf	??_sprintf
  4079  060A  01E0               	clrf	??_sprintf+1
  4080  060B  1BDF               	btfsc	??_sprintf,7
  4081  060C  03E0               	decf	??_sprintf+1,f
  4082  060D  085F               	movf	??_sprintf,w
  4083  060E  1683               	bsf	3,5	;RP0=1, select bank1
  4084  060F  1303               	bcf	3,6	;RP1=0, select bank1
  4085  0610  02B0               	subwf	sprintf@prec^(0+128),f
  4086  0611  1283               	bcf	3,5	;RP0=0, select bank0
  4087  0612  1303               	bcf	3,6	;RP1=0, select bank0
  4088  0613  0860               	movf	??_sprintf+1,w
  4089  0614  1683               	bsf	3,5	;RP0=1, select bank1
  4090  0615  1303               	bcf	3,6	;RP1=0, select bank1
  4091  0616  1C03               	skipc
  4092  0617  03B1               	decf	(sprintf@prec+1)^(0+128),f
  4093  0618  02B1               	subwf	(sprintf@prec+1)^(0+128),f
  4094                           
  4095                           ;doprnt.c: 1219: if(c)
  4096  0619  0836               	movf	sprintf@c^(0+128),w
  4097  061A  1903               	btfsc	3,2
  4098  061B  2E2F               	goto	l2875
  4099                           
  4100                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  4101  061C  302E               	movlw	46
  4102  061D  1283               	bcf	3,5	;RP0=0, select bank0
  4103  061E  1303               	bcf	3,6	;RP1=0, select bank0
  4104  061F  00DF               	movwf	??_sprintf
  4105  0620  1683               	bsf	3,5	;RP0=1, select bank1
  4106  0621  1303               	bcf	3,6	;RP1=0, select bank1
  4107  0622  0832               	movf	sprintf@sp^(0+128),w
  4108  0623  0084               	movwf	4
  4109  0624  1283               	bcf	3,5	;RP0=0, select bank0
  4110  0625  1303               	bcf	3,6	;RP1=0, select bank0
  4111  0626  085F               	movf	??_sprintf,w
  4112  0627  1383               	bcf	3,7	;select IRP bank0
  4113  0628  0080               	movwf	0
  4114  0629  3001               	movlw	1
  4115  062A  00DF               	movwf	??_sprintf
  4116  062B  085F               	movf	??_sprintf,w
  4117  062C  1683               	bsf	3,5	;RP0=1, select bank1
  4118  062D  1303               	bcf	3,6	;RP1=0, select bank1
  4119  062E  07B2               	addwf	sprintf@sp^(0+128),f
  4120  062F                     l2875:	
  4121                           
  4122                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4123  062F  0836               	movf	sprintf@c^(0+128),w
  4124  0630  120A  158A  221C  120A  118A  	fcall	_scale
  4125  0635  1283               	bcf	3,5	;RP0=0, select bank0
  4126  0636  1303               	bcf	3,6	;RP1=0, select bank0
  4127  0637  0837               	movf	?_scale,w
  4128  0638  1683               	bsf	3,5	;RP0=1, select bank1
  4129  0639  1303               	bcf	3,6	;RP1=0, select bank1
  4130  063A  00A0               	movwf	_sprintf$818^(0+128)
  4131  063B  1283               	bcf	3,5	;RP0=0, select bank0
  4132  063C  1303               	bcf	3,6	;RP1=0, select bank0
  4133  063D  0838               	movf	?_scale+1,w
  4134  063E  1683               	bsf	3,5	;RP0=1, select bank1
  4135  063F  1303               	bcf	3,6	;RP1=0, select bank1
  4136  0640  00A1               	movwf	(_sprintf$818+1)^(0+128)
  4137  0641  1283               	bcf	3,5	;RP0=0, select bank0
  4138  0642  1303               	bcf	3,6	;RP1=0, select bank0
  4139  0643  0839               	movf	?_scale+2,w
  4140  0644  1683               	bsf	3,5	;RP0=1, select bank1
  4141  0645  1303               	bcf	3,6	;RP1=0, select bank1
  4142  0646  00A2               	movwf	(_sprintf$818+2)^(0+128)
  4143                           
  4144                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  4145  0647  0820               	movf	_sprintf$818^(0+128),w
  4146  0648  1283               	bcf	3,5	;RP0=0, select bank0
  4147  0649  1303               	bcf	3,6	;RP1=0, select bank0
  4148  064A  00AA               	movwf	___ftmul@f2
  4149  064B  1683               	bsf	3,5	;RP0=1, select bank1
  4150  064C  1303               	bcf	3,6	;RP1=0, select bank1
  4151  064D  0821               	movf	(_sprintf$818+1)^(0+128),w
  4152  064E  1283               	bcf	3,5	;RP0=0, select bank0
  4153  064F  1303               	bcf	3,6	;RP1=0, select bank0
  4154  0650  00AB               	movwf	___ftmul@f2+1
  4155  0651  1683               	bsf	3,5	;RP0=1, select bank1
  4156  0652  1303               	bcf	3,6	;RP1=0, select bank1
  4157  0653  0822               	movf	(_sprintf$818+2)^(0+128),w
  4158  0654  1283               	bcf	3,5	;RP0=0, select bank0
  4159  0655  1303               	bcf	3,6	;RP1=0, select bank0
  4160  0656  00AC               	movwf	___ftmul@f2+2
  4161  0657  1683               	bsf	3,5	;RP0=1, select bank1
  4162  0658  1303               	bcf	3,6	;RP1=0, select bank1
  4163  0659  0833               	movf	sprintf@fval^(0+128),w
  4164  065A  1283               	bcf	3,5	;RP0=0, select bank0
  4165  065B  1303               	bcf	3,6	;RP1=0, select bank0
  4166  065C  00A7               	movwf	___ftmul@f1
  4167  065D  1683               	bsf	3,5	;RP0=1, select bank1
  4168  065E  1303               	bcf	3,6	;RP1=0, select bank1
  4169  065F  0834               	movf	(sprintf@fval+1)^(0+128),w
  4170  0660  1283               	bcf	3,5	;RP0=0, select bank0
  4171  0661  1303               	bcf	3,6	;RP1=0, select bank0
  4172  0662  00A8               	movwf	___ftmul@f1+1
  4173  0663  1683               	bsf	3,5	;RP0=1, select bank1
  4174  0664  1303               	bcf	3,6	;RP1=0, select bank1
  4175  0665  0835               	movf	(sprintf@fval+2)^(0+128),w
  4176  0666  1283               	bcf	3,5	;RP0=0, select bank0
  4177  0667  1303               	bcf	3,6	;RP1=0, select bank0
  4178  0668  00A9               	movwf	___ftmul@f1+2
  4179  0669  160A  118A  2624  120A  118A  	fcall	___ftmul
  4180  066E  1283               	bcf	3,5	;RP0=0, select bank0
  4181  066F  1303               	bcf	3,6	;RP1=0, select bank0
  4182  0670  0827               	movf	?___ftmul,w
  4183  0671  00C0               	movwf	___fttol@f1
  4184  0672  0828               	movf	?___ftmul+1,w
  4185  0673  00C1               	movwf	___fttol@f1+1
  4186  0674  0829               	movf	?___ftmul+2,w
  4187  0675  00C2               	movwf	___fttol@f1+2
  4188  0676  160A  118A  24D3  120A  118A  	fcall	___fttol
  4189  067B  1283               	bcf	3,5	;RP0=0, select bank0
  4190  067C  1303               	bcf	3,6	;RP1=0, select bank0
  4191  067D  0843               	movf	?___fttol+3,w
  4192  067E  1683               	bsf	3,5	;RP0=1, select bank1
  4193  067F  1303               	bcf	3,6	;RP1=0, select bank1
  4194  0680  00A9               	movwf	(sprintf@val+3)^(0+128)
  4195  0681  1283               	bcf	3,5	;RP0=0, select bank0
  4196  0682  1303               	bcf	3,6	;RP1=0, select bank0
  4197  0683  0842               	movf	?___fttol+2,w
  4198  0684  1683               	bsf	3,5	;RP0=1, select bank1
  4199  0685  1303               	bcf	3,6	;RP1=0, select bank1
  4200  0686  00A8               	movwf	(sprintf@val+2)^(0+128)
  4201  0687  1283               	bcf	3,5	;RP0=0, select bank0
  4202  0688  1303               	bcf	3,6	;RP1=0, select bank0
  4203  0689  0841               	movf	?___fttol+1,w
  4204  068A  1683               	bsf	3,5	;RP0=1, select bank1
  4205  068B  1303               	bcf	3,6	;RP1=0, select bank1
  4206  068C  00A7               	movwf	(sprintf@val+1)^(0+128)
  4207  068D  1283               	bcf	3,5	;RP0=0, select bank0
  4208  068E  1303               	bcf	3,6	;RP1=0, select bank0
  4209  068F  0840               	movf	?___fttol,w
  4210  0690  1683               	bsf	3,5	;RP0=1, select bank1
  4211  0691  1303               	bcf	3,6	;RP1=0, select bank1
  4212  0692                     L9:	
  4213  0692  00A6               	movwf	sprintf@val^(0+128)
  4214  0693  30FF               	movlw	255
  4215  0694  1283               	bcf	3,5	;RP0=0, select bank0
  4216  0695  1303               	bcf	3,6	;RP1=0, select bank0
  4217  0696  00DF               	movwf	??_sprintf
  4218  0697  085F               	movf	??_sprintf,w
  4219  0698  1683               	bsf	3,5	;RP0=1, select bank1
  4220  0699  1303               	bcf	3,6	;RP1=0, select bank1
  4221  069A  07B6               	addwf	sprintf@c^(0+128),f
  4222  069B  0A36               	incf	sprintf@c^(0+128),w
  4223  069C  1903               	btfsc	3,2
  4224  069D  2F70               	goto	l2897
  4225                           
  4226                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  4227                           
  4228                           ;doprnt.c: 1228: while(c--) {
  4229  069E  0836               	movf	sprintf@c^(0+128),w
  4230  069F  1283               	bcf	3,5	;RP0=0, select bank0
  4231  06A0  1303               	bcf	3,6	;RP1=0, select bank0
  4232  06A1  00DF               	movwf	??_sprintf
  4233  06A2  3001               	movlw	1
  4234  06A3                     u4035:	
  4235  06A3  1003               	clrc
  4236  06A4  0DDF               	rlf	??_sprintf,f
  4237  06A5  3EFF               	addlw	-1
  4238  06A6  1D03               	skipz
  4239  06A7  2EA3               	goto	u4035
  4240  06A8  1003               	clrc
  4241  06A9  0D5F               	rlf	??_sprintf,w
  4242  06AA  3E12               	addlw	low (_dpowers| (0+32768))
  4243  06AB  0084               	movwf	4
  4244  06AC  3090               	movlw	high (_dpowers| (0+32768))
  4245  06AD  1803               	skipnc
  4246  06AE  3E01               	addlw	1
  4247  06AF  00FF               	movwf	127
  4248  06B0  160A  118A  2000  120A  118A  	fcall	stringtab
  4249  06B5  00F0               	movwf	___lldiv@divisor
  4250  06B6  160A  118A  2000  120A  118A  	fcall	stringtab
  4251  06BB  00F1               	movwf	___lldiv@divisor+1
  4252  06BC  160A  118A  2000  120A  118A  	fcall	stringtab
  4253  06C1  00F2               	movwf	___lldiv@divisor+2
  4254  06C2  160A  118A  2000  120A  118A  	fcall	stringtab
  4255  06C7  00F3               	movwf	___lldiv@divisor+3
  4256  06C8  1683               	bsf	3,5	;RP0=1, select bank1
  4257  06C9  1303               	bcf	3,6	;RP1=0, select bank1
  4258  06CA  0829               	movf	(sprintf@val+3)^(0+128),w
  4259  06CB  00F7               	movwf	___lldiv@dividend+3
  4260  06CC  0828               	movf	(sprintf@val+2)^(0+128),w
  4261  06CD  00F6               	movwf	___lldiv@dividend+2
  4262  06CE  0827               	movf	(sprintf@val+1)^(0+128),w
  4263  06CF  00F5               	movwf	___lldiv@dividend+1
  4264  06D0  0826               	movf	sprintf@val^(0+128),w
  4265  06D1  00F4               	movwf	___lldiv@dividend
  4266  06D2  160A  118A  22B5  120A  118A  	fcall	___lldiv
  4267  06D7  0873               	movf	?___lldiv+3,w
  4268  06D8  1683               	bsf	3,5	;RP0=1, select bank1
  4269  06D9  1303               	bcf	3,6	;RP1=0, select bank1
  4270  06DA  00AF               	movwf	(sprintf@tmpval+3)^(0+128)
  4271  06DB  0872               	movf	?___lldiv+2,w
  4272  06DC  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  4273  06DD  0871               	movf	?___lldiv+1,w
  4274  06DE  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  4275  06DF  0870               	movf	?___lldiv,w
  4276  06E0  00AC               	movwf	sprintf@tmpval^(0+128)
  4277                           
  4278                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4279  06E1  3000               	movlw	0
  4280  06E2  00F3               	movwf	___llmod@divisor+3
  4281  06E3  3000               	movlw	0
  4282  06E4  00F2               	movwf	___llmod@divisor+2
  4283  06E5  3000               	movlw	0
  4284  06E6  00F1               	movwf	___llmod@divisor+1
  4285  06E7  300A               	movlw	10
  4286  06E8  00F0               	movwf	___llmod@divisor
  4287  06E9  082F               	movf	(sprintf@tmpval+3)^(0+128),w
  4288  06EA  00F7               	movwf	___llmod@dividend+3
  4289  06EB  082E               	movf	(sprintf@tmpval+2)^(0+128),w
  4290  06EC  00F6               	movwf	___llmod@dividend+2
  4291  06ED  082D               	movf	(sprintf@tmpval+1)^(0+128),w
  4292  06EE  00F5               	movwf	___llmod@dividend+1
  4293  06EF  082C               	movf	sprintf@tmpval^(0+128),w
  4294  06F0  00F4               	movwf	___llmod@dividend
  4295  06F1  160A  118A  21BB  120A  118A  	fcall	___llmod
  4296  06F6  0873               	movf	?___llmod+3,w
  4297  06F7  1683               	bsf	3,5	;RP0=1, select bank1
  4298  06F8  1303               	bcf	3,6	;RP1=0, select bank1
  4299  06F9  00AF               	movwf	(sprintf@tmpval+3)^(0+128)
  4300  06FA  0872               	movf	?___llmod+2,w
  4301  06FB  00AE               	movwf	(sprintf@tmpval+2)^(0+128)
  4302  06FC  0871               	movf	?___llmod+1,w
  4303  06FD  00AD               	movwf	(sprintf@tmpval+1)^(0+128)
  4304  06FE  0870               	movf	?___llmod,w
  4305  06FF  00AC               	movwf	sprintf@tmpval^(0+128)
  4306                           
  4307                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  4308  0700  082C               	movf	sprintf@tmpval^(0+128),w
  4309  0701  3E30               	addlw	48
  4310  0702  1283               	bcf	3,5	;RP0=0, select bank0
  4311  0703  1303               	bcf	3,6	;RP1=0, select bank0
  4312  0704  00DF               	movwf	??_sprintf
  4313  0705  1683               	bsf	3,5	;RP0=1, select bank1
  4314  0706  1303               	bcf	3,6	;RP1=0, select bank1
  4315  0707  0832               	movf	sprintf@sp^(0+128),w
  4316  0708  0084               	movwf	4
  4317  0709  1283               	bcf	3,5	;RP0=0, select bank0
  4318  070A  1303               	bcf	3,6	;RP1=0, select bank0
  4319  070B  085F               	movf	??_sprintf,w
  4320  070C  1383               	bcf	3,7	;select IRP bank0
  4321  070D  0080               	movwf	0
  4322  070E  3001               	movlw	1
  4323  070F  00DF               	movwf	??_sprintf
  4324  0710  085F               	movf	??_sprintf,w
  4325  0711  1683               	bsf	3,5	;RP0=1, select bank1
  4326  0712  1303               	bcf	3,6	;RP1=0, select bank1
  4327  0713  07B2               	addwf	sprintf@sp^(0+128),f
  4328                           
  4329                           ;doprnt.c: 1232: val %= dpowers[c];
  4330  0714  0836               	movf	sprintf@c^(0+128),w
  4331  0715  1283               	bcf	3,5	;RP0=0, select bank0
  4332  0716  1303               	bcf	3,6	;RP1=0, select bank0
  4333  0717  00DF               	movwf	??_sprintf
  4334  0718  3001               	movlw	1
  4335  0719                     u4045:	
  4336  0719  1003               	clrc
  4337  071A  0DDF               	rlf	??_sprintf,f
  4338  071B  3EFF               	addlw	-1
  4339  071C  1D03               	skipz
  4340  071D  2F19               	goto	u4045
  4341  071E  1003               	clrc
  4342  071F  0D5F               	rlf	??_sprintf,w
  4343  0720  3E12               	addlw	low (_dpowers| (0+32768))
  4344  0721  0084               	movwf	4
  4345  0722  3090               	movlw	high (_dpowers| (0+32768))
  4346  0723  1803               	skipnc
  4347  0724  3E01               	addlw	1
  4348  0725  00FF               	movwf	127
  4349  0726  160A  118A  2000  120A  118A  	fcall	stringtab
  4350  072B  00F0               	movwf	___llmod@divisor
  4351  072C  160A  118A  2000  120A  118A  	fcall	stringtab
  4352  0731  00F1               	movwf	___llmod@divisor+1
  4353  0732  160A  118A  2000  120A  118A  	fcall	stringtab
  4354  0737  00F2               	movwf	___llmod@divisor+2
  4355  0738  160A  118A  2000  120A  118A  	fcall	stringtab
  4356  073D  00F3               	movwf	___llmod@divisor+3
  4357  073E  1683               	bsf	3,5	;RP0=1, select bank1
  4358  073F  1303               	bcf	3,6	;RP1=0, select bank1
  4359  0740  0829               	movf	(sprintf@val+3)^(0+128),w
  4360  0741  00F7               	movwf	___llmod@dividend+3
  4361  0742  0828               	movf	(sprintf@val+2)^(0+128),w
  4362  0743  00F6               	movwf	___llmod@dividend+2
  4363  0744  0827               	movf	(sprintf@val+1)^(0+128),w
  4364  0745  00F5               	movwf	___llmod@dividend+1
  4365  0746  0826               	movf	sprintf@val^(0+128),w
  4366  0747  00F4               	movwf	___llmod@dividend
  4367  0748  160A  118A  21BB  120A  118A  	fcall	___llmod
  4368  074D  0873               	movf	?___llmod+3,w
  4369  074E  1683               	bsf	3,5	;RP0=1, select bank1
  4370  074F  1303               	bcf	3,6	;RP1=0, select bank1
  4371  0750  00A9               	movwf	(sprintf@val+3)^(0+128)
  4372  0751  0872               	movf	?___llmod+2,w
  4373  0752  00A8               	movwf	(sprintf@val+2)^(0+128)
  4374  0753  0871               	movf	?___llmod+1,w
  4375  0754  00A7               	movwf	(sprintf@val+1)^(0+128)
  4376  0755  0870               	movf	?___llmod,w
  4377  0756  2E92               	goto	L9
  4378  0757                     l2891:	
  4379                           ;doprnt.c: 1233: }
  4380                           ;doprnt.c: 1235: while(prec) {
  4381                           
  4382                           
  4383                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  4384  0757  3030               	movlw	48
  4385  0758  1283               	bcf	3,5	;RP0=0, select bank0
  4386  0759  1303               	bcf	3,6	;RP1=0, select bank0
  4387  075A  00DF               	movwf	??_sprintf
  4388  075B  1683               	bsf	3,5	;RP0=1, select bank1
  4389  075C  1303               	bcf	3,6	;RP1=0, select bank1
  4390  075D  0832               	movf	sprintf@sp^(0+128),w
  4391  075E  0084               	movwf	4
  4392  075F  1283               	bcf	3,5	;RP0=0, select bank0
  4393  0760  1303               	bcf	3,6	;RP1=0, select bank0
  4394  0761  085F               	movf	??_sprintf,w
  4395  0762  1383               	bcf	3,7	;select IRP bank0
  4396  0763  0080               	movwf	0
  4397  0764  3001               	movlw	1
  4398  0765  00DF               	movwf	??_sprintf
  4399  0766  085F               	movf	??_sprintf,w
  4400  0767  1683               	bsf	3,5	;RP0=1, select bank1
  4401  0768  1303               	bcf	3,6	;RP1=0, select bank1
  4402  0769  07B2               	addwf	sprintf@sp^(0+128),f
  4403                           
  4404                           ;doprnt.c: 1237: prec--;
  4405  076A  30FF               	movlw	255
  4406  076B  07B0               	addwf	sprintf@prec^(0+128),f
  4407  076C  1803               	skipnc
  4408  076D  0AB1               	incf	(sprintf@prec+1)^(0+128),f
  4409  076E  30FF               	movlw	255
  4410  076F  07B1               	addwf	(sprintf@prec+1)^(0+128),f
  4411  0770                     l2897:	
  4412  0770  0830               	movf	sprintf@prec^(0+128),w
  4413  0771  0431               	iorwf	(sprintf@prec+1)^(0+128),w
  4414  0772  1903               	btfsc	3,2
  4415  0773  299D               	goto	l2915
  4416  0774  2F57               	goto	l2891
  4417  0775                     l2899:	
  4418                           ;doprnt.c: 1238: }
  4419                           ;doprnt.c: 1245: continue;
  4420                           
  4421                           
  4422                           ;doprnt.c: 1246: }
  4423                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4424  0775  1683               	bsf	3,5	;RP0=1, select bank1
  4425  0776  1303               	bcf	3,6	;RP1=0, select bank1
  4426  0777  0830               	movf	sprintf@prec^(0+128),w
  4427  0778  0431               	iorwf	(sprintf@prec+1)^(0+128),w
  4428  0779  1D03               	btfss	3,2
  4429  077A  2F87               	goto	l292
  4430  077B  0829               	movf	(sprintf@val+3)^(0+128),w
  4431  077C  0428               	iorwf	(sprintf@val+2)^(0+128),w
  4432  077D  0427               	iorwf	(sprintf@val+1)^(0+128),w
  4433  077E  0426               	iorwf	sprintf@val^(0+128),w
  4434  077F  1D03               	skipz
  4435  0780  2F87               	goto	l292
  4436                           
  4437                           ;doprnt.c: 1291: prec++;
  4438  0781  3001               	movlw	1
  4439  0782  07B0               	addwf	sprintf@prec^(0+128),f
  4440  0783  1803               	skipnc
  4441  0784  0AB1               	incf	(sprintf@prec+1)^(0+128),f
  4442  0785  3000               	movlw	0
  4443  0786  07B1               	addwf	(sprintf@prec+1)^(0+128),f
  4444  0787                     l292:	
  4445                           
  4446                           ;doprnt.c: 1339: if(c < prec)
  4447  0787  0836               	movf	sprintf@c^(0+128),w
  4448  0788  1283               	bcf	3,5	;RP0=0, select bank0
  4449  0789  1303               	bcf	3,6	;RP1=0, select bank0
  4450  078A  00DF               	movwf	??_sprintf
  4451  078B  01E0               	clrf	??_sprintf+1
  4452  078C  1BDF               	btfsc	??_sprintf,7
  4453  078D  03E0               	decf	??_sprintf+1,f
  4454  078E  0860               	movf	??_sprintf+1,w
  4455  078F  3A80               	xorlw	128
  4456  0790  00E1               	movwf	??_sprintf+2
  4457  0791  1683               	bsf	3,5	;RP0=1, select bank1
  4458  0792  1303               	bcf	3,6	;RP1=0, select bank1
  4459  0793  0831               	movf	(sprintf@prec+1)^(0+128),w
  4460  0794  3A80               	xorlw	128
  4461  0795  1283               	bcf	3,5	;RP0=0, select bank0
  4462  0796  1303               	bcf	3,6	;RP1=0, select bank0
  4463  0797  0261               	subwf	??_sprintf+2,w
  4464  0798  1D03               	skipz
  4465  0799  2FA0               	goto	u4095
  4466  079A  1683               	bsf	3,5	;RP0=1, select bank1
  4467  079B  1303               	bcf	3,6	;RP1=0, select bank1
  4468  079C  0830               	movf	sprintf@prec^(0+128),w
  4469  079D  1283               	bcf	3,5	;RP0=0, select bank0
  4470  079E  1303               	bcf	3,6	;RP1=0, select bank0
  4471  079F  025F               	subwf	??_sprintf,w
  4472  07A0                     u4095:	
  4473  07A0  1803               	skipnc
  4474  07A1  2FAD               	goto	l2907
  4475                           
  4476                           ;doprnt.c: 1340: c = prec;
  4477  07A2  1683               	bsf	3,5	;RP0=1, select bank1
  4478  07A3  1303               	bcf	3,6	;RP1=0, select bank1
  4479  07A4  0830               	movf	sprintf@prec^(0+128),w
  4480  07A5  1283               	bcf	3,5	;RP0=0, select bank0
  4481  07A6  1303               	bcf	3,6	;RP1=0, select bank0
  4482  07A7  00DF               	movwf	??_sprintf
  4483  07A8  085F               	movf	??_sprintf,w
  4484  07A9  1683               	bsf	3,5	;RP0=1, select bank1
  4485  07AA  1303               	bcf	3,6	;RP1=0, select bank1
  4486  07AB  00B6               	movwf	sprintf@c^(0+128)
  4487  07AC  2FCF               	goto	l294
  4488  07AD                     l2907:	
  4489                           
  4490                           ;doprnt.c: 1341: else if(prec < c)
  4491  07AD  1683               	bsf	3,5	;RP0=1, select bank1
  4492  07AE  1303               	bcf	3,6	;RP1=0, select bank1
  4493  07AF  0836               	movf	sprintf@c^(0+128),w
  4494  07B0  1283               	bcf	3,5	;RP0=0, select bank0
  4495  07B1  1303               	bcf	3,6	;RP1=0, select bank0
  4496  07B2  00DF               	movwf	??_sprintf
  4497  07B3  01E0               	clrf	??_sprintf+1
  4498  07B4  1BDF               	btfsc	??_sprintf,7
  4499  07B5  03E0               	decf	??_sprintf+1,f
  4500  07B6  1683               	bsf	3,5	;RP0=1, select bank1
  4501  07B7  1303               	bcf	3,6	;RP1=0, select bank1
  4502  07B8  0831               	movf	(sprintf@prec+1)^(0+128),w
  4503  07B9  3A80               	xorlw	128
  4504  07BA  1283               	bcf	3,5	;RP0=0, select bank0
  4505  07BB  1303               	bcf	3,6	;RP1=0, select bank0
  4506  07BC  00E1               	movwf	??_sprintf+2
  4507  07BD  0860               	movf	??_sprintf+1,w
  4508  07BE  3A80               	xorlw	128
  4509  07BF  0261               	subwf	??_sprintf+2,w
  4510  07C0  1D03               	skipz
  4511  07C1  2FC6               	goto	u4105
  4512  07C2  085F               	movf	??_sprintf,w
  4513  07C3  1683               	bsf	3,5	;RP0=1, select bank1
  4514  07C4  1303               	bcf	3,6	;RP1=0, select bank1
  4515  07C5  0230               	subwf	sprintf@prec^(0+128),w
  4516  07C6                     u4105:	
  4517  07C6  1803               	skipnc
  4518  07C7  2FCF               	goto	l294
  4519                           
  4520                           ;doprnt.c: 1342: prec = c;
  4521  07C8  1683               	bsf	3,5	;RP0=1, select bank1
  4522  07C9  1303               	bcf	3,6	;RP1=0, select bank1
  4523  07CA  0836               	movf	sprintf@c^(0+128),w
  4524  07CB  00B0               	movwf	sprintf@prec^(0+128)
  4525  07CC  01B1               	clrf	(sprintf@prec+1)^(0+128)
  4526  07CD  1BB0               	btfsc	sprintf@prec^(0+128),7
  4527  07CE  03B1               	decf	(sprintf@prec+1)^(0+128),f
  4528  07CF                     l294:	
  4529                           
  4530                           ;doprnt.c: 1422: {
  4531                           ;doprnt.c: 1438: if(flag & 0x03)
  4532  07CF  3003               	movlw	3
  4533  07D0  1683               	bsf	3,5	;RP0=1, select bank1
  4534  07D1  1303               	bcf	3,6	;RP1=0, select bank1
  4535  07D2  0524               	andwf	sprintf@flag^(0+128),w
  4536  07D3  1283               	bcf	3,5	;RP0=0, select bank0
  4537  07D4  1303               	bcf	3,6	;RP1=0, select bank0
  4538  07D5  00DF               	movwf	??_sprintf
  4539  07D6  3000               	movlw	0
  4540  07D7  1683               	bsf	3,5	;RP0=1, select bank1
  4541  07D8  1303               	bcf	3,6	;RP1=0, select bank1
  4542  07D9  0525               	andwf	(sprintf@flag+1)^(0+128),w
  4543  07DA  1283               	bcf	3,5	;RP0=0, select bank0
  4544  07DB  1303               	bcf	3,6	;RP1=0, select bank0
  4545  07DC  00E0               	movwf	??_sprintf+1
  4546  07DD  085F               	movf	??_sprintf,w
  4547  07DE  0460               	iorwf	??_sprintf+1,w
  4548  07DF  1903               	btfsc	3,2
  4549  07E0  299D               	goto	l2915
  4550                           
  4551                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  4552  07E1  302D               	movlw	45
  4553  07E2                     L10:	
  4554  07E2  00DF               	movwf	??_sprintf
  4555  07E3  1683               	bsf	3,5	;RP0=1, select bank1
  4556  07E4  1303               	bcf	3,6	;RP1=0, select bank1
  4557  07E5  0832               	movf	sprintf@sp^(0+128),w
  4558  07E6  0084               	movwf	4
  4559  07E7  1283               	bcf	3,5	;RP0=0, select bank0
  4560  07E8  1303               	bcf	3,6	;RP1=0, select bank0
  4561  07E9  085F               	movf	??_sprintf,w
  4562  07EA  1383               	bcf	3,7	;select IRP bank0
  4563  07EB  0080               	movwf	0
  4564  07EC  3001               	movlw	1
  4565  07ED  00DF               	movwf	??_sprintf
  4566  07EE  085F               	movf	??_sprintf,w
  4567  07EF  1683               	bsf	3,5	;RP0=1, select bank1
  4568  07F0  1303               	bcf	3,6	;RP1=0, select bank1
  4569  07F1  07B2               	addwf	sprintf@sp^(0+128),f
  4570  07F2  299D               	goto	l2915
  4571  07F3                     l2917:	
  4572                           ;doprnt.c: 1469: }
  4573                           ;doprnt.c: 1533: }
  4574                           ;doprnt.c: 1535: alldone:
  4575                           
  4576                           
  4577                           ;doprnt.c: 1538: *sp = 0;
  4578  07F3  0832               	movf	sprintf@sp^(0+128),w
  4579  07F4  0084               	movwf	4
  4580  07F5  1383               	bcf	3,7	;select IRP bank0
  4581  07F6  0180               	clrf	0
  4582  07F7  0008               	return
  4583  07F8                     __end_of_sprintf:	
  4584                           ;doprnt.c: 1540: return 0;
  4585                           ;	Return value of _sprintf is never used
  4586                           
  4587                           
  4588                           	psect	text7
  4589  0A1C                     __ptext7:	
  4590 ;; *************** function _scale *****************
  4591 ;; Defined at:
  4592 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\doprnt.c"
  4593 ;; Parameters:    Size  Location     Type
  4594 ;;  scl             1    wreg     char 
  4595 ;; Auto vars:     Size  Location     Type
  4596 ;;  scl             1   31[BANK0 ] char 
  4597 ;; Return value:  Size  Location     Type
  4598 ;;                  3   23[BANK0 ] char 
  4599 ;; Registers used:
  4600 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4601 ;; Tracked objects:
  4602 ;;		On entry : 0/0
  4603 ;;		On exit  : 0/0
  4604 ;;		Unchanged: 0/0
  4605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4606 ;;      Params:         0       3       0       0       0
  4607 ;;      Locals:         0       4       0       0       0
  4608 ;;      Temps:          0       2       0       0       0
  4609 ;;      Totals:         0       9       0       0       0
  4610 ;;Total ram usage:        9 bytes
  4611 ;; Hardware stack levels used:    1
  4612 ;; Hardware stack levels required when called:    2
  4613 ;; This function calls:
  4614 ;;		___awdiv
  4615 ;;		___awmod
  4616 ;;		___bmul
  4617 ;;		___ftmul
  4618 ;; This function is called by:
  4619 ;;		_sprintf
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623                           
  4624                           ;psect for function _scale
  4625  0A1C                     _scale:	
  4626                           
  4627                           ;incstack = 0
  4628                           ; Regs used in _scale: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4629                           ;scale@scl stored from wreg
  4630  0A1C  1283               	bcf	3,5	;RP0=0, select bank0
  4631  0A1D  1303               	bcf	3,6	;RP1=0, select bank0
  4632  0A1E  00BF               	movwf	scale@scl
  4633                           
  4634                           ;doprnt.c: 428: if(scl < 0) {
  4635  0A1F  1FBF               	btfss	scale@scl,7
  4636  0A20  2B85               	goto	l2371
  4637                           
  4638                           ;doprnt.c: 429: scl = -scl;
  4639  0A21  09BF               	comf	scale@scl,f
  4640  0A22  0ABF               	incf	scale@scl,f
  4641                           
  4642                           ;doprnt.c: 430: if(scl>=110)
  4643  0A23  083F               	movf	scale@scl,w
  4644  0A24  3A80               	xorlw	128
  4645  0A25  3E12               	addlw	-238
  4646  0A26  1C03               	skipc
  4647  0A27  2AEC               	goto	l2361
  4648                           
  4649                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4650  0A28  3003               	movlw	3
  4651  0A29  00BA               	movwf	??_scale
  4652  0A2A  083A               	movf	??_scale,w
  4653  0A2B  00A4               	movwf	___bmul@multiplicand
  4654  0A2C  300A               	movlw	10
  4655  0A2D  00F7               	movwf	___awdiv@divisor
  4656  0A2E  3000               	movlw	0
  4657  0A2F  00F8               	movwf	___awdiv@divisor+1
  4658  0A30  083F               	movf	scale@scl,w
  4659  0A31  00F2               	movwf	___awmod@dividend
  4660  0A32  01F3               	clrf	___awmod@dividend+1
  4661  0A33  1BF2               	btfsc	___awmod@dividend,7
  4662  0A34  03F3               	decf	___awmod@dividend+1,f
  4663  0A35  3064               	movlw	100
  4664  0A36  00F0               	movwf	___awmod@divisor
  4665  0A37  3000               	movlw	0
  4666  0A38  00F1               	movwf	___awmod@divisor+1
  4667  0A39  160A  118A  2170  120A  158A  	fcall	___awmod
  4668  0A3E  0871               	movf	?___awmod+1,w
  4669  0A3F  00FA               	movwf	___awdiv@dividend+1
  4670  0A40  0870               	movf	?___awmod,w
  4671  0A41  00F9               	movwf	___awdiv@dividend
  4672  0A42  160A  118A  225A  120A  158A  	fcall	___awdiv
  4673  0A47  0877               	movf	?___awdiv,w
  4674  0A48  3E09               	addlw	9
  4675  0A49  160A  158A  2697  120A  158A  	fcall	___bmul
  4676  0A4E  3E61               	addlw	low (__npowers_| (0+32768))
  4677  0A4F  0084               	movwf	4
  4678  0A50  3090               	movlw	high (__npowers_| (0+32768))
  4679  0A51  1803               	skipnc
  4680  0A52  3E01               	addlw	1
  4681  0A53  1283               	bcf	3,5	;RP0=0, select bank0
  4682  0A54  1303               	bcf	3,6	;RP1=0, select bank0
  4683  0A55  00FF               	movwf	127
  4684  0A56  160A  118A  2000  120A  158A  	fcall	stringtab
  4685  0A5B  00A7               	movwf	___ftmul@f1
  4686  0A5C  160A  118A  2000  120A  158A  	fcall	stringtab
  4687  0A61  00A8               	movwf	___ftmul@f1+1
  4688  0A62  160A  118A  2000  120A  158A  	fcall	stringtab
  4689  0A67  00A9               	movwf	___ftmul@f1+2
  4690  0A68  3003               	movlw	3
  4691  0A69  00BB               	movwf	??_scale+1
  4692  0A6A  083B               	movf	??_scale+1,w
  4693  0A6B  00A4               	movwf	___bmul@multiplicand
  4694  0A6C  3064               	movlw	100
  4695  0A6D  00F7               	movwf	___awdiv@divisor
  4696  0A6E  3000               	movlw	0
  4697  0A6F  00F8               	movwf	___awdiv@divisor+1
  4698  0A70  083F               	movf	scale@scl,w
  4699  0A71  00F9               	movwf	___awdiv@dividend
  4700  0A72  01FA               	clrf	___awdiv@dividend+1
  4701  0A73  1BF9               	btfsc	___awdiv@dividend,7
  4702  0A74  03FA               	decf	___awdiv@dividend+1,f
  4703  0A75  160A  118A  225A  120A  158A  	fcall	___awdiv
  4704  0A7A  0877               	movf	?___awdiv,w
  4705  0A7B  3E12               	addlw	18
  4706  0A7C  160A  158A  2697  120A  158A  	fcall	___bmul
  4707  0A81  3E61               	addlw	low (__npowers_| (0+32768))
  4708  0A82  0084               	movwf	4
  4709  0A83  3090               	movlw	high (__npowers_| (0+32768))
  4710  0A84  1803               	skipnc
  4711  0A85  3E01               	addlw	1
  4712  0A86  1283               	bcf	3,5	;RP0=0, select bank0
  4713  0A87  1303               	bcf	3,6	;RP1=0, select bank0
  4714  0A88  00FF               	movwf	127
  4715  0A89  160A  118A  2000  120A  158A  	fcall	stringtab
  4716  0A8E  00AA               	movwf	___ftmul@f2
  4717  0A8F  160A  118A  2000  120A  158A  	fcall	stringtab
  4718  0A94  00AB               	movwf	___ftmul@f2+1
  4719  0A95  160A  118A  2000  120A  158A  	fcall	stringtab
  4720  0A9A  00AC               	movwf	___ftmul@f2+2
  4721  0A9B  160A  118A  2624  120A  158A  	fcall	___ftmul
  4722  0AA0  1283               	bcf	3,5	;RP0=0, select bank0
  4723  0AA1  1303               	bcf	3,6	;RP1=0, select bank0
  4724  0AA2  0827               	movf	?___ftmul,w
  4725  0AA3  00BC               	movwf	_scale$817
  4726  0AA4  0828               	movf	?___ftmul+1,w
  4727  0AA5  00BD               	movwf	_scale$817+1
  4728  0AA6  0829               	movf	?___ftmul+2,w
  4729  0AA7  00BE               	movwf	_scale$817+2
  4730                           
  4731                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4732  0AA8  3003               	movlw	3
  4733  0AA9  00BA               	movwf	??_scale
  4734  0AAA  083A               	movf	??_scale,w
  4735  0AAB  00A4               	movwf	___bmul@multiplicand
  4736  0AAC  083F               	movf	scale@scl,w
  4737  0AAD  00F2               	movwf	___awmod@dividend
  4738  0AAE  01F3               	clrf	___awmod@dividend+1
  4739  0AAF  1BF2               	btfsc	___awmod@dividend,7
  4740  0AB0  03F3               	decf	___awmod@dividend+1,f
  4741  0AB1  300A               	movlw	10
  4742  0AB2  00F0               	movwf	___awmod@divisor
  4743  0AB3  3000               	movlw	0
  4744  0AB4  00F1               	movwf	___awmod@divisor+1
  4745  0AB5  160A  118A  2170  120A  158A  	fcall	___awmod
  4746  0ABA  0870               	movf	?___awmod,w
  4747  0ABB  160A  158A  2697  120A  158A  	fcall	___bmul
  4748  0AC0  3E61               	addlw	low (__npowers_| (0+32768))
  4749  0AC1  0084               	movwf	4
  4750  0AC2  3090               	movlw	high (__npowers_| (0+32768))
  4751  0AC3  1803               	skipnc
  4752  0AC4  3E01               	addlw	1
  4753  0AC5  1283               	bcf	3,5	;RP0=0, select bank0
  4754  0AC6  1303               	bcf	3,6	;RP1=0, select bank0
  4755  0AC7  00FF               	movwf	127
  4756  0AC8  160A  118A  2000  120A  158A  	fcall	stringtab
  4757  0ACD  00A7               	movwf	___ftmul@f1
  4758  0ACE  160A  118A  2000  120A  158A  	fcall	stringtab
  4759  0AD3  00A8               	movwf	___ftmul@f1+1
  4760  0AD4  160A  118A  2000  120A  158A  	fcall	stringtab
  4761  0AD9  00A9               	movwf	___ftmul@f1+2
  4762  0ADA  083C               	movf	_scale$817,w
  4763  0ADB  00AA               	movwf	___ftmul@f2
  4764  0ADC  083D               	movf	_scale$817+1,w
  4765  0ADD  00AB               	movwf	___ftmul@f2+1
  4766  0ADE  083E               	movf	_scale$817+2,w
  4767  0ADF  00AC               	movwf	___ftmul@f2+2
  4768  0AE0  160A  118A  2624   	fcall	___ftmul
  4769  0AE3  1283               	bcf	3,5	;RP0=0, select bank0
  4770  0AE4  1303               	bcf	3,6	;RP1=0, select bank0
  4771  0AE5  0827               	movf	?___ftmul,w
  4772  0AE6  00B7               	movwf	?_scale
  4773  0AE7  0828               	movf	?___ftmul+1,w
  4774  0AE8  00B8               	movwf	?_scale+1
  4775  0AE9  0829               	movf	?___ftmul+2,w
  4776  0AEA  00B9               	movwf	?_scale+2
  4777  0AEB  0008               	return
  4778  0AEC                     l2361:	
  4779                           
  4780                           ;doprnt.c: 432: else if(scl > 10)
  4781  0AEC  083F               	movf	scale@scl,w
  4782  0AED  3A80               	xorlw	128
  4783  0AEE  3E75               	addlw	-139
  4784  0AEF  1C03               	skipc
  4785  0AF0  2B62               	goto	l2367
  4786                           
  4787                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4788  0AF1  3003               	movlw	3
  4789  0AF2  00BA               	movwf	??_scale
  4790  0AF3  083A               	movf	??_scale,w
  4791  0AF4  00A4               	movwf	___bmul@multiplicand
  4792  0AF5  083F               	movf	scale@scl,w
  4793  0AF6  00F2               	movwf	___awmod@dividend
  4794  0AF7  01F3               	clrf	___awmod@dividend+1
  4795  0AF8  1BF2               	btfsc	___awmod@dividend,7
  4796  0AF9  03F3               	decf	___awmod@dividend+1,f
  4797  0AFA  300A               	movlw	10
  4798  0AFB  00F0               	movwf	___awmod@divisor
  4799  0AFC  3000               	movlw	0
  4800  0AFD  00F1               	movwf	___awmod@divisor+1
  4801  0AFE  160A  118A  2170  120A  158A  	fcall	___awmod
  4802  0B03  0870               	movf	?___awmod,w
  4803  0B04  160A  158A  2697  120A  158A  	fcall	___bmul
  4804  0B09  3E61               	addlw	low (__npowers_| (0+32768))
  4805  0B0A  0084               	movwf	4
  4806  0B0B  3090               	movlw	high (__npowers_| (0+32768))
  4807  0B0C  1803               	skipnc
  4808  0B0D  3E01               	addlw	1
  4809  0B0E  1283               	bcf	3,5	;RP0=0, select bank0
  4810  0B0F  1303               	bcf	3,6	;RP1=0, select bank0
  4811  0B10  00FF               	movwf	127
  4812  0B11  160A  118A  2000  120A  158A  	fcall	stringtab
  4813  0B16  00A7               	movwf	___ftmul@f1
  4814  0B17  160A  118A  2000  120A  158A  	fcall	stringtab
  4815  0B1C  00A8               	movwf	___ftmul@f1+1
  4816  0B1D  160A  118A  2000  120A  158A  	fcall	stringtab
  4817  0B22  00A9               	movwf	___ftmul@f1+2
  4818  0B23  3003               	movlw	3
  4819  0B24  00BB               	movwf	??_scale+1
  4820  0B25  083B               	movf	??_scale+1,w
  4821  0B26  00A4               	movwf	___bmul@multiplicand
  4822  0B27  300A               	movlw	10
  4823  0B28  00F7               	movwf	___awdiv@divisor
  4824  0B29  3000               	movlw	0
  4825  0B2A  00F8               	movwf	___awdiv@divisor+1
  4826  0B2B  083F               	movf	scale@scl,w
  4827  0B2C  00F9               	movwf	___awdiv@dividend
  4828  0B2D  01FA               	clrf	___awdiv@dividend+1
  4829  0B2E  1BF9               	btfsc	___awdiv@dividend,7
  4830  0B2F  03FA               	decf	___awdiv@dividend+1,f
  4831  0B30  160A  118A  225A  120A  158A  	fcall	___awdiv
  4832  0B35  0877               	movf	?___awdiv,w
  4833  0B36  3E09               	addlw	9
  4834  0B37  160A  158A  2697  120A  158A  	fcall	___bmul
  4835  0B3C  3E61               	addlw	low (__npowers_| (0+32768))
  4836  0B3D  0084               	movwf	4
  4837  0B3E  3090               	movlw	high (__npowers_| (0+32768))
  4838  0B3F  1803               	skipnc
  4839  0B40  3E01               	addlw	1
  4840  0B41  1283               	bcf	3,5	;RP0=0, select bank0
  4841  0B42  1303               	bcf	3,6	;RP1=0, select bank0
  4842  0B43  00FF               	movwf	127
  4843  0B44  160A  118A  2000  120A  158A  	fcall	stringtab
  4844  0B49  00AA               	movwf	___ftmul@f2
  4845  0B4A  160A  118A  2000  120A  158A  	fcall	stringtab
  4846  0B4F  00AB               	movwf	___ftmul@f2+1
  4847  0B50  160A  118A  2000  120A  158A  	fcall	stringtab
  4848  0B55  00AC               	movwf	___ftmul@f2+2
  4849  0B56  160A  118A  2624   	fcall	___ftmul
  4850  0B59  1283               	bcf	3,5	;RP0=0, select bank0
  4851  0B5A  1303               	bcf	3,6	;RP1=0, select bank0
  4852  0B5B  0827               	movf	?___ftmul,w
  4853  0B5C  00B7               	movwf	?_scale
  4854  0B5D  0828               	movf	?___ftmul+1,w
  4855  0B5E  00B8               	movwf	?_scale+1
  4856  0B5F  0829               	movf	?___ftmul+2,w
  4857  0B60  00B9               	movwf	?_scale+2
  4858  0B61  0008               	return
  4859  0B62                     l2367:	
  4860                           
  4861                           ;doprnt.c: 434: return _npowers_[scl];
  4862  0B62  3003               	movlw	3
  4863  0B63  00BA               	movwf	??_scale
  4864  0B64  083A               	movf	??_scale,w
  4865  0B65  00A4               	movwf	___bmul@multiplicand
  4866  0B66  083F               	movf	scale@scl,w
  4867  0B67  160A  158A  2697  120A  158A  	fcall	___bmul
  4868  0B6C  3E61               	addlw	low (__npowers_| (0+32768))
  4869  0B6D  0084               	movwf	4
  4870  0B6E  3090               	movlw	high (__npowers_| (0+32768))
  4871  0B6F  1803               	skipnc
  4872  0B70  3E01               	addlw	1
  4873  0B71  1283               	bcf	3,5	;RP0=0, select bank0
  4874  0B72  1303               	bcf	3,6	;RP1=0, select bank0
  4875  0B73  00FF               	movwf	127
  4876  0B74  160A  118A  2000  120A  158A  	fcall	stringtab
  4877  0B79  00B7               	movwf	?_scale
  4878  0B7A  160A  118A  2000  120A  158A  	fcall	stringtab
  4879  0B7F  00B8               	movwf	?_scale+1
  4880  0B80  160A  118A  2000   	fcall	stringtab
  4881  0B83  00B9               	movwf	?_scale+2
  4882  0B84  0008               	return
  4883  0B85                     l2371:	
  4884                           
  4885                           ;doprnt.c: 435: }
  4886                           ;doprnt.c: 436: if(scl>=110)
  4887  0B85  083F               	movf	scale@scl,w
  4888  0B86  3A80               	xorlw	128
  4889  0B87  3E12               	addlw	-238
  4890  0B88  1C03               	skipc
  4891  0B89  2C4E               	goto	l2379
  4892                           
  4893                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4894  0B8A  3003               	movlw	3
  4895  0B8B  00BA               	movwf	??_scale
  4896  0B8C  083A               	movf	??_scale,w
  4897  0B8D  00A4               	movwf	___bmul@multiplicand
  4898  0B8E  300A               	movlw	10
  4899  0B8F  00F7               	movwf	___awdiv@divisor
  4900  0B90  3000               	movlw	0
  4901  0B91  00F8               	movwf	___awdiv@divisor+1
  4902  0B92  083F               	movf	scale@scl,w
  4903  0B93  00F2               	movwf	___awmod@dividend
  4904  0B94  01F3               	clrf	___awmod@dividend+1
  4905  0B95  1BF2               	btfsc	___awmod@dividend,7
  4906  0B96  03F3               	decf	___awmod@dividend+1,f
  4907  0B97  3064               	movlw	100
  4908  0B98  00F0               	movwf	___awmod@divisor
  4909  0B99  3000               	movlw	0
  4910  0B9A  00F1               	movwf	___awmod@divisor+1
  4911  0B9B  160A  118A  2170  120A  158A  	fcall	___awmod
  4912  0BA0  0871               	movf	?___awmod+1,w
  4913  0BA1  00FA               	movwf	___awdiv@dividend+1
  4914  0BA2  0870               	movf	?___awmod,w
  4915  0BA3  00F9               	movwf	___awdiv@dividend
  4916  0BA4  160A  118A  225A  120A  158A  	fcall	___awdiv
  4917  0BA9  0877               	movf	?___awdiv,w
  4918  0BAA  3E09               	addlw	9
  4919  0BAB  160A  158A  2697  120A  158A  	fcall	___bmul
  4920  0BB0  3E3A               	addlw	low (__powers_| (0+32768))
  4921  0BB1  0084               	movwf	4
  4922  0BB2  3090               	movlw	high (__powers_| (0+32768))
  4923  0BB3  1803               	skipnc
  4924  0BB4  3E01               	addlw	1
  4925  0BB5  1283               	bcf	3,5	;RP0=0, select bank0
  4926  0BB6  1303               	bcf	3,6	;RP1=0, select bank0
  4927  0BB7  00FF               	movwf	127
  4928  0BB8  160A  118A  2000  120A  158A  	fcall	stringtab
  4929  0BBD  00A7               	movwf	___ftmul@f1
  4930  0BBE  160A  118A  2000  120A  158A  	fcall	stringtab
  4931  0BC3  00A8               	movwf	___ftmul@f1+1
  4932  0BC4  160A  118A  2000  120A  158A  	fcall	stringtab
  4933  0BC9  00A9               	movwf	___ftmul@f1+2
  4934  0BCA  3003               	movlw	3
  4935  0BCB  00BB               	movwf	??_scale+1
  4936  0BCC  083B               	movf	??_scale+1,w
  4937  0BCD  00A4               	movwf	___bmul@multiplicand
  4938  0BCE  3064               	movlw	100
  4939  0BCF  00F7               	movwf	___awdiv@divisor
  4940  0BD0  3000               	movlw	0
  4941  0BD1  00F8               	movwf	___awdiv@divisor+1
  4942  0BD2  083F               	movf	scale@scl,w
  4943  0BD3  00F9               	movwf	___awdiv@dividend
  4944  0BD4  01FA               	clrf	___awdiv@dividend+1
  4945  0BD5  1BF9               	btfsc	___awdiv@dividend,7
  4946  0BD6  03FA               	decf	___awdiv@dividend+1,f
  4947  0BD7  160A  118A  225A  120A  158A  	fcall	___awdiv
  4948  0BDC  0877               	movf	?___awdiv,w
  4949  0BDD  3E12               	addlw	18
  4950  0BDE  160A  158A  2697  120A  158A  	fcall	___bmul
  4951  0BE3  3E3A               	addlw	low (__powers_| (0+32768))
  4952  0BE4  0084               	movwf	4
  4953  0BE5  3090               	movlw	high (__powers_| (0+32768))
  4954  0BE6  1803               	skipnc
  4955  0BE7  3E01               	addlw	1
  4956  0BE8  1283               	bcf	3,5	;RP0=0, select bank0
  4957  0BE9  1303               	bcf	3,6	;RP1=0, select bank0
  4958  0BEA  00FF               	movwf	127
  4959  0BEB  160A  118A  2000  120A  158A  	fcall	stringtab
  4960  0BF0  00AA               	movwf	___ftmul@f2
  4961  0BF1  160A  118A  2000  120A  158A  	fcall	stringtab
  4962  0BF6  00AB               	movwf	___ftmul@f2+1
  4963  0BF7  160A  118A  2000  120A  158A  	fcall	stringtab
  4964  0BFC  00AC               	movwf	___ftmul@f2+2
  4965  0BFD  160A  118A  2624  120A  158A  	fcall	___ftmul
  4966  0C02  1283               	bcf	3,5	;RP0=0, select bank0
  4967  0C03  1303               	bcf	3,6	;RP1=0, select bank0
  4968  0C04  0827               	movf	?___ftmul,w
  4969  0C05  00BC               	movwf	_scale$817
  4970  0C06  0828               	movf	?___ftmul+1,w
  4971  0C07  00BD               	movwf	_scale$817+1
  4972  0C08  0829               	movf	?___ftmul+2,w
  4973  0C09  00BE               	movwf	_scale$817+2
  4974                           
  4975                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4976  0C0A  3003               	movlw	3
  4977  0C0B  00BA               	movwf	??_scale
  4978  0C0C  083A               	movf	??_scale,w
  4979  0C0D  00A4               	movwf	___bmul@multiplicand
  4980  0C0E  083F               	movf	scale@scl,w
  4981  0C0F  00F2               	movwf	___awmod@dividend
  4982  0C10  01F3               	clrf	___awmod@dividend+1
  4983  0C11  1BF2               	btfsc	___awmod@dividend,7
  4984  0C12  03F3               	decf	___awmod@dividend+1,f
  4985  0C13  300A               	movlw	10
  4986  0C14  00F0               	movwf	___awmod@divisor
  4987  0C15  3000               	movlw	0
  4988  0C16  00F1               	movwf	___awmod@divisor+1
  4989  0C17  160A  118A  2170  120A  158A  	fcall	___awmod
  4990  0C1C  0870               	movf	?___awmod,w
  4991  0C1D  160A  158A  2697  120A  158A  	fcall	___bmul
  4992  0C22  3E3A               	addlw	low (__powers_| (0+32768))
  4993  0C23  0084               	movwf	4
  4994  0C24  3090               	movlw	high (__powers_| (0+32768))
  4995  0C25  1803               	skipnc
  4996  0C26  3E01               	addlw	1
  4997  0C27  1283               	bcf	3,5	;RP0=0, select bank0
  4998  0C28  1303               	bcf	3,6	;RP1=0, select bank0
  4999  0C29  00FF               	movwf	127
  5000  0C2A  160A  118A  2000  120A  158A  	fcall	stringtab
  5001  0C2F  00A7               	movwf	___ftmul@f1
  5002  0C30  160A  118A  2000  120A  158A  	fcall	stringtab
  5003  0C35  00A8               	movwf	___ftmul@f1+1
  5004  0C36  160A  118A  2000  120A  158A  	fcall	stringtab
  5005  0C3B  00A9               	movwf	___ftmul@f1+2
  5006  0C3C  083C               	movf	_scale$817,w
  5007  0C3D  00AA               	movwf	___ftmul@f2
  5008  0C3E  083D               	movf	_scale$817+1,w
  5009  0C3F  00AB               	movwf	___ftmul@f2+1
  5010  0C40  083E               	movf	_scale$817+2,w
  5011  0C41  00AC               	movwf	___ftmul@f2+2
  5012  0C42  160A  118A  2624   	fcall	___ftmul
  5013  0C45  1283               	bcf	3,5	;RP0=0, select bank0
  5014  0C46  1303               	bcf	3,6	;RP1=0, select bank0
  5015  0C47  0827               	movf	?___ftmul,w
  5016  0C48  00B7               	movwf	?_scale
  5017  0C49  0828               	movf	?___ftmul+1,w
  5018  0C4A  00B8               	movwf	?_scale+1
  5019  0C4B  0829               	movf	?___ftmul+2,w
  5020  0C4C  00B9               	movwf	?_scale+2
  5021  0C4D  0008               	return
  5022  0C4E                     l2379:	
  5023                           
  5024                           ;doprnt.c: 438: else if(scl > 10)
  5025  0C4E  083F               	movf	scale@scl,w
  5026  0C4F  3A80               	xorlw	128
  5027  0C50  3E75               	addlw	-139
  5028  0C51  1C03               	skipc
  5029  0C52  2CC4               	goto	l2385
  5030                           
  5031                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5032  0C53  3003               	movlw	3
  5033  0C54  00BA               	movwf	??_scale
  5034  0C55  083A               	movf	??_scale,w
  5035  0C56  00A4               	movwf	___bmul@multiplicand
  5036  0C57  083F               	movf	scale@scl,w
  5037  0C58  00F2               	movwf	___awmod@dividend
  5038  0C59  01F3               	clrf	___awmod@dividend+1
  5039  0C5A  1BF2               	btfsc	___awmod@dividend,7
  5040  0C5B  03F3               	decf	___awmod@dividend+1,f
  5041  0C5C  300A               	movlw	10
  5042  0C5D  00F0               	movwf	___awmod@divisor
  5043  0C5E  3000               	movlw	0
  5044  0C5F  00F1               	movwf	___awmod@divisor+1
  5045  0C60  160A  118A  2170  120A  158A  	fcall	___awmod
  5046  0C65  0870               	movf	?___awmod,w
  5047  0C66  160A  158A  2697  120A  158A  	fcall	___bmul
  5048  0C6B  3E3A               	addlw	low (__powers_| (0+32768))
  5049  0C6C  0084               	movwf	4
  5050  0C6D  3090               	movlw	high (__powers_| (0+32768))
  5051  0C6E  1803               	skipnc
  5052  0C6F  3E01               	addlw	1
  5053  0C70  1283               	bcf	3,5	;RP0=0, select bank0
  5054  0C71  1303               	bcf	3,6	;RP1=0, select bank0
  5055  0C72  00FF               	movwf	127
  5056  0C73  160A  118A  2000  120A  158A  	fcall	stringtab
  5057  0C78  00A7               	movwf	___ftmul@f1
  5058  0C79  160A  118A  2000  120A  158A  	fcall	stringtab
  5059  0C7E  00A8               	movwf	___ftmul@f1+1
  5060  0C7F  160A  118A  2000  120A  158A  	fcall	stringtab
  5061  0C84  00A9               	movwf	___ftmul@f1+2
  5062  0C85  3003               	movlw	3
  5063  0C86  00BB               	movwf	??_scale+1
  5064  0C87  083B               	movf	??_scale+1,w
  5065  0C88  00A4               	movwf	___bmul@multiplicand
  5066  0C89  300A               	movlw	10
  5067  0C8A  00F7               	movwf	___awdiv@divisor
  5068  0C8B  3000               	movlw	0
  5069  0C8C  00F8               	movwf	___awdiv@divisor+1
  5070  0C8D  083F               	movf	scale@scl,w
  5071  0C8E  00F9               	movwf	___awdiv@dividend
  5072  0C8F  01FA               	clrf	___awdiv@dividend+1
  5073  0C90  1BF9               	btfsc	___awdiv@dividend,7
  5074  0C91  03FA               	decf	___awdiv@dividend+1,f
  5075  0C92  160A  118A  225A  120A  158A  	fcall	___awdiv
  5076  0C97  0877               	movf	?___awdiv,w
  5077  0C98  3E09               	addlw	9
  5078  0C99  160A  158A  2697  120A  158A  	fcall	___bmul
  5079  0C9E  3E3A               	addlw	low (__powers_| (0+32768))
  5080  0C9F  0084               	movwf	4
  5081  0CA0  3090               	movlw	high (__powers_| (0+32768))
  5082  0CA1  1803               	skipnc
  5083  0CA2  3E01               	addlw	1
  5084  0CA3  1283               	bcf	3,5	;RP0=0, select bank0
  5085  0CA4  1303               	bcf	3,6	;RP1=0, select bank0
  5086  0CA5  00FF               	movwf	127
  5087  0CA6  160A  118A  2000  120A  158A  	fcall	stringtab
  5088  0CAB  00AA               	movwf	___ftmul@f2
  5089  0CAC  160A  118A  2000  120A  158A  	fcall	stringtab
  5090  0CB1  00AB               	movwf	___ftmul@f2+1
  5091  0CB2  160A  118A  2000  120A  158A  	fcall	stringtab
  5092  0CB7  00AC               	movwf	___ftmul@f2+2
  5093  0CB8  160A  118A  2624   	fcall	___ftmul
  5094  0CBB  1283               	bcf	3,5	;RP0=0, select bank0
  5095  0CBC  1303               	bcf	3,6	;RP1=0, select bank0
  5096  0CBD  0827               	movf	?___ftmul,w
  5097  0CBE  00B7               	movwf	?_scale
  5098  0CBF  0828               	movf	?___ftmul+1,w
  5099  0CC0  00B8               	movwf	?_scale+1
  5100  0CC1  0829               	movf	?___ftmul+2,w
  5101  0CC2  00B9               	movwf	?_scale+2
  5102  0CC3  0008               	return
  5103  0CC4                     l2385:	
  5104                           
  5105                           ;doprnt.c: 440: return _powers_[scl];
  5106  0CC4  3003               	movlw	3
  5107  0CC5  00BA               	movwf	??_scale
  5108  0CC6  083A               	movf	??_scale,w
  5109  0CC7  00A4               	movwf	___bmul@multiplicand
  5110  0CC8  083F               	movf	scale@scl,w
  5111  0CC9  160A  158A  2697  120A  158A  	fcall	___bmul
  5112  0CCE  3E3A               	addlw	low (__powers_| (0+32768))
  5113  0CCF  0084               	movwf	4
  5114  0CD0  3090               	movlw	high (__powers_| (0+32768))
  5115  0CD1  1803               	skipnc
  5116  0CD2  3E01               	addlw	1
  5117  0CD3  1283               	bcf	3,5	;RP0=0, select bank0
  5118  0CD4  1303               	bcf	3,6	;RP1=0, select bank0
  5119  0CD5  00FF               	movwf	127
  5120  0CD6  160A  118A  2000  120A  158A  	fcall	stringtab
  5121  0CDB  00B7               	movwf	?_scale
  5122  0CDC  160A  118A  2000  120A  158A  	fcall	stringtab
  5123  0CE1  00B8               	movwf	?_scale+1
  5124  0CE2  160A  118A  2000   	fcall	stringtab
  5125  0CE5  00B9               	movwf	?_scale+2
  5126  0CE6  0008               	return
  5127  0CE7                     __end_of_scale:	
  5128                           
  5129                           	psect	text8
  5130  1E89                     __ptext8:	
  5131 ;; *************** function _isdigit *****************
  5132 ;; Defined at:
  5133 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\isdigit.c"
  5134 ;; Parameters:    Size  Location     Type
  5135 ;;  c               1    wreg     unsigned char 
  5136 ;; Auto vars:     Size  Location     Type
  5137 ;;  c               1    1[COMMON] unsigned char 
  5138 ;; Return value:  Size  Location     Type
  5139 ;;		None               void
  5140 ;; Registers used:
  5141 ;;		wreg, status,2, status,0
  5142 ;; Tracked objects:
  5143 ;;		On entry : 0/0
  5144 ;;		On exit  : 0/0
  5145 ;;		Unchanged: 0/0
  5146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5147 ;;      Params:         0       0       0       0       0
  5148 ;;      Locals:         2       0       0       0       0
  5149 ;;      Temps:          0       0       0       0       0
  5150 ;;      Totals:         2       0       0       0       0
  5151 ;;Total ram usage:        2 bytes
  5152 ;; Hardware stack levels used:    1
  5153 ;; This function calls:
  5154 ;;		Nothing
  5155 ;; This function is called by:
  5156 ;;		_sprintf
  5157 ;; This function uses a non-reentrant model
  5158 ;;
  5159                           
  5160                           
  5161                           ;psect for function _isdigit
  5162  1E89                     _isdigit:	
  5163                           
  5164                           ;incstack = 0
  5165                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5166                           ;isdigit@c stored from wreg
  5167  1E89  00F1               	movwf	isdigit@c
  5168  1E8A  01F0               	clrf	_isdigit$611
  5169  1E8B  303A               	movlw	58
  5170  1E8C  0271               	subwf	isdigit@c,w
  5171  1E8D  1803               	skipnc
  5172  1E8E  2E95               	goto	l2397
  5173  1E8F  3030               	movlw	48
  5174  1E90  0271               	subwf	isdigit@c,w
  5175  1E91  1C03               	skipc
  5176  1E92  2E95               	goto	l2397
  5177  1E93  01F0               	clrf	_isdigit$611
  5178  1E94  0AF0               	incf	_isdigit$611,f
  5179  1E95                     l2397:	
  5180  1E95  0C70               	rrf	_isdigit$611,w
  5181  1E96  0008               	return
  5182  1E97                     __end_of_isdigit:	
  5183                           
  5184                           	psect	text9
  5185  086A                     __ptext9:	
  5186 ;; *************** function _fround *****************
  5187 ;; Defined at:
  5188 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\doprnt.c"
  5189 ;; Parameters:    Size  Location     Type
  5190 ;;  prec            1    wreg     unsigned char 
  5191 ;; Auto vars:     Size  Location     Type
  5192 ;;  prec            1   38[BANK0 ] unsigned char 
  5193 ;; Return value:  Size  Location     Type
  5194 ;;                  3   23[BANK0 ] unsigned char 
  5195 ;; Registers used:
  5196 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5197 ;; Tracked objects:
  5198 ;;		On entry : 0/0
  5199 ;;		On exit  : 0/0
  5200 ;;		Unchanged: 0/0
  5201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5202 ;;      Params:         0       3       0       0       0
  5203 ;;      Locals:         0       7       0       0       0
  5204 ;;      Temps:          0       6       0       0       0
  5205 ;;      Totals:         0      16       0       0       0
  5206 ;;Total ram usage:       16 bytes
  5207 ;; Hardware stack levels used:    1
  5208 ;; Hardware stack levels required when called:    2
  5209 ;; This function calls:
  5210 ;;		___awdiv
  5211 ;;		___awmod
  5212 ;;		___bmul
  5213 ;;		___ftmul
  5214 ;; This function is called by:
  5215 ;;		_sprintf
  5216 ;; This function uses a non-reentrant model
  5217 ;;
  5218                           
  5219                           
  5220                           ;psect for function _fround
  5221  086A                     _fround:	
  5222                           
  5223                           ;incstack = 0
  5224                           ; Regs used in _fround: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5225                           ;fround@prec stored from wreg
  5226  086A  1283               	bcf	3,5	;RP0=0, select bank0
  5227  086B  1303               	bcf	3,6	;RP1=0, select bank0
  5228  086C  00C6               	movwf	fround@prec
  5229                           
  5230                           ;doprnt.c: 413: if(prec>=110)
  5231  086D  306E               	movlw	110
  5232  086E  0246               	subwf	fround@prec,w
  5233  086F  1C03               	skipc
  5234  0870  2954               	goto	l2337
  5235                           
  5236                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5237  0871  3003               	movlw	3
  5238  0872  00BA               	movwf	??_fround
  5239  0873  083A               	movf	??_fround,w
  5240  0874  00A4               	movwf	___bmul@multiplicand
  5241  0875  300A               	movlw	10
  5242  0876  00F7               	movwf	___awdiv@divisor
  5243  0877  3000               	movlw	0
  5244  0878  00F8               	movwf	___awdiv@divisor+1
  5245  0879  0846               	movf	fround@prec,w
  5246  087A  00BB               	movwf	??_fround+1
  5247  087B  01BC               	clrf	??_fround+2
  5248  087C  083B               	movf	??_fround+1,w
  5249  087D  00F2               	movwf	___awmod@dividend
  5250  087E  083C               	movf	??_fround+2,w
  5251  087F  00F3               	movwf	___awmod@dividend+1
  5252  0880  3064               	movlw	100
  5253  0881  00F0               	movwf	___awmod@divisor
  5254  0882  3000               	movlw	0
  5255  0883  00F1               	movwf	___awmod@divisor+1
  5256  0884  160A  118A  2170  120A  158A  	fcall	___awmod
  5257  0889  0871               	movf	?___awmod+1,w
  5258  088A  00FA               	movwf	___awdiv@dividend+1
  5259  088B  0870               	movf	?___awmod,w
  5260  088C  00F9               	movwf	___awdiv@dividend
  5261  088D  160A  118A  225A  120A  158A  	fcall	___awdiv
  5262  0892  0877               	movf	?___awdiv,w
  5263  0893  3E09               	addlw	9
  5264  0894  160A  158A  2697  120A  158A  	fcall	___bmul
  5265  0899  3E61               	addlw	low (__npowers_| (0+32768))
  5266  089A  0084               	movwf	4
  5267  089B  3090               	movlw	high (__npowers_| (0+32768))
  5268  089C  1803               	skipnc
  5269  089D  3E01               	addlw	1
  5270  089E  1283               	bcf	3,5	;RP0=0, select bank0
  5271  089F  1303               	bcf	3,6	;RP1=0, select bank0
  5272  08A0  00FF               	movwf	127
  5273  08A1  160A  118A  2000  120A  158A  	fcall	stringtab
  5274  08A6  00A7               	movwf	___ftmul@f1
  5275  08A7  160A  118A  2000  120A  158A  	fcall	stringtab
  5276  08AC  00A8               	movwf	___ftmul@f1+1
  5277  08AD  160A  118A  2000  120A  158A  	fcall	stringtab
  5278  08B2  00A9               	movwf	___ftmul@f1+2
  5279  08B3  3003               	movlw	3
  5280  08B4  00BD               	movwf	??_fround+3
  5281  08B5  083D               	movf	??_fround+3,w
  5282  08B6  00A4               	movwf	___bmul@multiplicand
  5283  08B7  3064               	movlw	100
  5284  08B8  00F7               	movwf	___awdiv@divisor
  5285  08B9  3000               	movlw	0
  5286  08BA  00F8               	movwf	___awdiv@divisor+1
  5287  08BB  0846               	movf	fround@prec,w
  5288  08BC  00BE               	movwf	??_fround+4
  5289  08BD  01BF               	clrf	??_fround+5
  5290  08BE  083E               	movf	??_fround+4,w
  5291  08BF  00F9               	movwf	___awdiv@dividend
  5292  08C0  083F               	movf	??_fround+5,w
  5293  08C1  00FA               	movwf	___awdiv@dividend+1
  5294  08C2  160A  118A  225A  120A  158A  	fcall	___awdiv
  5295  08C7  0877               	movf	?___awdiv,w
  5296  08C8  3E12               	addlw	18
  5297  08C9  160A  158A  2697  120A  158A  	fcall	___bmul
  5298  08CE  3E61               	addlw	low (__npowers_| (0+32768))
  5299  08CF  0084               	movwf	4
  5300  08D0  3090               	movlw	high (__npowers_| (0+32768))
  5301  08D1  1803               	skipnc
  5302  08D2  3E01               	addlw	1
  5303  08D3  1283               	bcf	3,5	;RP0=0, select bank0
  5304  08D4  1303               	bcf	3,6	;RP1=0, select bank0
  5305  08D5  00FF               	movwf	127
  5306  08D6  160A  118A  2000  120A  158A  	fcall	stringtab
  5307  08DB  00AA               	movwf	___ftmul@f2
  5308  08DC  160A  118A  2000  120A  158A  	fcall	stringtab
  5309  08E1  00AB               	movwf	___ftmul@f2+1
  5310  08E2  160A  118A  2000  120A  158A  	fcall	stringtab
  5311  08E7  00AC               	movwf	___ftmul@f2+2
  5312  08E8  160A  118A  2624  120A  158A  	fcall	___ftmul
  5313  08ED  1283               	bcf	3,5	;RP0=0, select bank0
  5314  08EE  1303               	bcf	3,6	;RP1=0, select bank0
  5315  08EF  0827               	movf	?___ftmul,w
  5316  08F0  00C3               	movwf	_fround$815
  5317  08F1  0828               	movf	?___ftmul+1,w
  5318  08F2  00C4               	movwf	_fround$815+1
  5319  08F3  0829               	movf	?___ftmul+2,w
  5320  08F4  00C5               	movwf	_fround$815+2
  5321                           
  5322                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5323  08F5  3003               	movlw	3
  5324  08F6  00BA               	movwf	??_fround
  5325  08F7  083A               	movf	??_fround,w
  5326  08F8  00A4               	movwf	___bmul@multiplicand
  5327  08F9  0846               	movf	fround@prec,w
  5328  08FA  00BB               	movwf	??_fround+1
  5329  08FB  01BC               	clrf	??_fround+2
  5330  08FC  083B               	movf	??_fround+1,w
  5331  08FD  00F2               	movwf	___awmod@dividend
  5332  08FE  083C               	movf	??_fround+2,w
  5333  08FF  00F3               	movwf	___awmod@dividend+1
  5334  0900  300A               	movlw	10
  5335  0901  00F0               	movwf	___awmod@divisor
  5336  0902  3000               	movlw	0
  5337  0903  00F1               	movwf	___awmod@divisor+1
  5338  0904  160A  118A  2170  120A  158A  	fcall	___awmod
  5339  0909  0870               	movf	?___awmod,w
  5340  090A  160A  158A  2697  120A  158A  	fcall	___bmul
  5341  090F  3E61               	addlw	low (__npowers_| (0+32768))
  5342  0910  0084               	movwf	4
  5343  0911  3090               	movlw	high (__npowers_| (0+32768))
  5344  0912  1803               	skipnc
  5345  0913  3E01               	addlw	1
  5346  0914  1283               	bcf	3,5	;RP0=0, select bank0
  5347  0915  1303               	bcf	3,6	;RP1=0, select bank0
  5348  0916  00FF               	movwf	127
  5349  0917  160A  118A  2000  120A  158A  	fcall	stringtab
  5350  091C  00A7               	movwf	___ftmul@f1
  5351  091D  160A  118A  2000  120A  158A  	fcall	stringtab
  5352  0922  00A8               	movwf	___ftmul@f1+1
  5353  0923  160A  118A  2000  120A  158A  	fcall	stringtab
  5354  0928  00A9               	movwf	___ftmul@f1+2
  5355  0929  0843               	movf	_fround$815,w
  5356  092A  00AA               	movwf	___ftmul@f2
  5357  092B  0844               	movf	_fround$815+1,w
  5358  092C  00AB               	movwf	___ftmul@f2+1
  5359  092D  0845               	movf	_fround$815+2,w
  5360  092E  00AC               	movwf	___ftmul@f2+2
  5361  092F  160A  118A  2624  120A  158A  	fcall	___ftmul
  5362  0934  1283               	bcf	3,5	;RP0=0, select bank0
  5363  0935  1303               	bcf	3,6	;RP1=0, select bank0
  5364  0936  0827               	movf	?___ftmul,w
  5365  0937  00C0               	movwf	_fround$816
  5366  0938  0828               	movf	?___ftmul+1,w
  5367  0939  00C1               	movwf	_fround$816+1
  5368  093A  0829               	movf	?___ftmul+2,w
  5369  093B  00C2               	movwf	_fround$816+2
  5370                           
  5371                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5372  093C  3000               	movlw	0
  5373  093D  00A7               	movwf	___ftmul@f1
  5374  093E  3000               	movlw	0
  5375  093F  00A8               	movwf	___ftmul@f1+1
  5376  0940  303F               	movlw	63
  5377  0941  00A9               	movwf	___ftmul@f1+2
  5378  0942  0840               	movf	_fround$816,w
  5379  0943  00AA               	movwf	___ftmul@f2
  5380  0944  0841               	movf	_fround$816+1,w
  5381  0945  00AB               	movwf	___ftmul@f2+1
  5382  0946  0842               	movf	_fround$816+2,w
  5383  0947  00AC               	movwf	___ftmul@f2+2
  5384  0948  160A  118A  2624   	fcall	___ftmul
  5385  094B  1283               	bcf	3,5	;RP0=0, select bank0
  5386  094C  1303               	bcf	3,6	;RP1=0, select bank0
  5387  094D  0827               	movf	?___ftmul,w
  5388  094E  00B7               	movwf	?_fround
  5389  094F  0828               	movf	?___ftmul+1,w
  5390  0950  00B8               	movwf	?_fround+1
  5391  0951  0829               	movf	?___ftmul+2,w
  5392  0952  00B9               	movwf	?_fround+2
  5393  0953  0008               	return
  5394  0954                     l2337:	
  5395                           
  5396                           ;doprnt.c: 415: else if(prec > 10)
  5397  0954  300B               	movlw	11
  5398  0955  0246               	subwf	fround@prec,w
  5399  0956  1C03               	skipc
  5400  0957  29E6               	goto	l2345
  5401                           
  5402                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5403  0958  3003               	movlw	3
  5404  0959  00BA               	movwf	??_fround
  5405  095A  083A               	movf	??_fround,w
  5406  095B  00A4               	movwf	___bmul@multiplicand
  5407  095C  0846               	movf	fround@prec,w
  5408  095D  00BB               	movwf	??_fround+1
  5409  095E  01BC               	clrf	??_fround+2
  5410  095F  083B               	movf	??_fround+1,w
  5411  0960  00F2               	movwf	___awmod@dividend
  5412  0961  083C               	movf	??_fround+2,w
  5413  0962  00F3               	movwf	___awmod@dividend+1
  5414  0963  300A               	movlw	10
  5415  0964  00F0               	movwf	___awmod@divisor
  5416  0965  3000               	movlw	0
  5417  0966  00F1               	movwf	___awmod@divisor+1
  5418  0967  160A  118A  2170  120A  158A  	fcall	___awmod
  5419  096C  0870               	movf	?___awmod,w
  5420  096D  160A  158A  2697  120A  158A  	fcall	___bmul
  5421  0972  3E61               	addlw	low (__npowers_| (0+32768))
  5422  0973  0084               	movwf	4
  5423  0974  3090               	movlw	high (__npowers_| (0+32768))
  5424  0975  1803               	skipnc
  5425  0976  3E01               	addlw	1
  5426  0977  1283               	bcf	3,5	;RP0=0, select bank0
  5427  0978  1303               	bcf	3,6	;RP1=0, select bank0
  5428  0979  00FF               	movwf	127
  5429  097A  160A  118A  2000  120A  158A  	fcall	stringtab
  5430  097F  00A7               	movwf	___ftmul@f1
  5431  0980  160A  118A  2000  120A  158A  	fcall	stringtab
  5432  0985  00A8               	movwf	___ftmul@f1+1
  5433  0986  160A  118A  2000  120A  158A  	fcall	stringtab
  5434  098B  00A9               	movwf	___ftmul@f1+2
  5435  098C  3003               	movlw	3
  5436  098D  00BD               	movwf	??_fround+3
  5437  098E  083D               	movf	??_fround+3,w
  5438  098F  00A4               	movwf	___bmul@multiplicand
  5439  0990  300A               	movlw	10
  5440  0991  00F7               	movwf	___awdiv@divisor
  5441  0992  3000               	movlw	0
  5442  0993  00F8               	movwf	___awdiv@divisor+1
  5443  0994  0846               	movf	fround@prec,w
  5444  0995  00BE               	movwf	??_fround+4
  5445  0996  01BF               	clrf	??_fround+5
  5446  0997  083E               	movf	??_fround+4,w
  5447  0998  00F9               	movwf	___awdiv@dividend
  5448  0999  083F               	movf	??_fround+5,w
  5449  099A  00FA               	movwf	___awdiv@dividend+1
  5450  099B  160A  118A  225A  120A  158A  	fcall	___awdiv
  5451  09A0  0877               	movf	?___awdiv,w
  5452  09A1  3E09               	addlw	9
  5453  09A2  160A  158A  2697  120A  158A  	fcall	___bmul
  5454  09A7  3E61               	addlw	low (__npowers_| (0+32768))
  5455  09A8  0084               	movwf	4
  5456  09A9  3090               	movlw	high (__npowers_| (0+32768))
  5457  09AA  1803               	skipnc
  5458  09AB  3E01               	addlw	1
  5459  09AC  1283               	bcf	3,5	;RP0=0, select bank0
  5460  09AD  1303               	bcf	3,6	;RP1=0, select bank0
  5461  09AE  00FF               	movwf	127
  5462  09AF  160A  118A  2000  120A  158A  	fcall	stringtab
  5463  09B4  00AA               	movwf	___ftmul@f2
  5464  09B5  160A  118A  2000  120A  158A  	fcall	stringtab
  5465  09BA  00AB               	movwf	___ftmul@f2+1
  5466  09BB  160A  118A  2000  120A  158A  	fcall	stringtab
  5467  09C0  00AC               	movwf	___ftmul@f2+2
  5468  09C1  160A  118A  2624  120A  158A  	fcall	___ftmul
  5469  09C6  1283               	bcf	3,5	;RP0=0, select bank0
  5470  09C7  1303               	bcf	3,6	;RP1=0, select bank0
  5471  09C8  0827               	movf	?___ftmul,w
  5472  09C9  00C3               	movwf	_fround$815
  5473  09CA  0828               	movf	?___ftmul+1,w
  5474  09CB  00C4               	movwf	_fround$815+1
  5475  09CC  0829               	movf	?___ftmul+2,w
  5476  09CD  00C5               	movwf	_fround$815+2
  5477                           
  5478                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5479  09CE  3000               	movlw	0
  5480  09CF  00A7               	movwf	___ftmul@f1
  5481  09D0  3000               	movlw	0
  5482  09D1  00A8               	movwf	___ftmul@f1+1
  5483  09D2  303F               	movlw	63
  5484  09D3  00A9               	movwf	___ftmul@f1+2
  5485  09D4  0843               	movf	_fround$815,w
  5486  09D5  00AA               	movwf	___ftmul@f2
  5487  09D6  0844               	movf	_fround$815+1,w
  5488  09D7  00AB               	movwf	___ftmul@f2+1
  5489  09D8  0845               	movf	_fround$815+2,w
  5490  09D9  00AC               	movwf	___ftmul@f2+2
  5491  09DA  160A  118A  2624   	fcall	___ftmul
  5492  09DD  1283               	bcf	3,5	;RP0=0, select bank0
  5493  09DE  1303               	bcf	3,6	;RP1=0, select bank0
  5494  09DF  0827               	movf	?___ftmul,w
  5495  09E0  00B7               	movwf	?_fround
  5496  09E1  0828               	movf	?___ftmul+1,w
  5497  09E2  00B8               	movwf	?_fround+1
  5498  09E3  0829               	movf	?___ftmul+2,w
  5499  09E4  00B9               	movwf	?_fround+2
  5500  09E5  0008               	return
  5501  09E6                     l2345:	
  5502                           
  5503                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5504  09E6  3000               	movlw	0
  5505  09E7  00A7               	movwf	___ftmul@f1
  5506  09E8  3000               	movlw	0
  5507  09E9  00A8               	movwf	___ftmul@f1+1
  5508  09EA  303F               	movlw	63
  5509  09EB  00A9               	movwf	___ftmul@f1+2
  5510  09EC  3003               	movlw	3
  5511  09ED  00BA               	movwf	??_fround
  5512  09EE  083A               	movf	??_fround,w
  5513  09EF  00A4               	movwf	___bmul@multiplicand
  5514  09F0  0846               	movf	fround@prec,w
  5515  09F1  160A  158A  2697  120A  158A  	fcall	___bmul
  5516  09F6  3E61               	addlw	low (__npowers_| (0+32768))
  5517  09F7  0084               	movwf	4
  5518  09F8  3090               	movlw	high (__npowers_| (0+32768))
  5519  09F9  1803               	skipnc
  5520  09FA  3E01               	addlw	1
  5521  09FB  1283               	bcf	3,5	;RP0=0, select bank0
  5522  09FC  1303               	bcf	3,6	;RP1=0, select bank0
  5523  09FD  00FF               	movwf	127
  5524  09FE  160A  118A  2000  120A  158A  	fcall	stringtab
  5525  0A03  00AA               	movwf	___ftmul@f2
  5526  0A04  160A  118A  2000  120A  158A  	fcall	stringtab
  5527  0A09  00AB               	movwf	___ftmul@f2+1
  5528  0A0A  160A  118A  2000  120A  158A  	fcall	stringtab
  5529  0A0F  00AC               	movwf	___ftmul@f2+2
  5530  0A10  160A  118A  2624   	fcall	___ftmul
  5531  0A13  1283               	bcf	3,5	;RP0=0, select bank0
  5532  0A14  1303               	bcf	3,6	;RP1=0, select bank0
  5533  0A15  0827               	movf	?___ftmul,w
  5534  0A16  00B7               	movwf	?_fround
  5535  0A17  0828               	movf	?___ftmul+1,w
  5536  0A18  00B8               	movwf	?_fround+1
  5537  0A19  0829               	movf	?___ftmul+2,w
  5538  0A1A  00B9               	movwf	?_fround+2
  5539  0A1B  0008               	return
  5540  0A1C                     __end_of_fround:	
  5541                           
  5542                           	psect	text10
  5543  1624                     __ptext10:	
  5544 ;; *************** function ___ftmul *****************
  5545 ;; Defined at:
  5546 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\ftmul.c"
  5547 ;; Parameters:    Size  Location     Type
  5548 ;;  f1              3    7[BANK0 ] float 
  5549 ;;  f2              3   10[BANK0 ] float 
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;  f3_as_produc    3   18[BANK0 ] unsigned um
  5552 ;;  sign            1   22[BANK0 ] unsigned char 
  5553 ;;  cntr            1   21[BANK0 ] unsigned char 
  5554 ;;  exp             1   17[BANK0 ] unsigned char 
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  3    7[BANK0 ] float 
  5557 ;; Registers used:
  5558 ;;		wreg, status,2, status,0, pclath, cstack
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5564 ;;      Params:         0       6       0       0       0
  5565 ;;      Locals:         0       6       0       0       0
  5566 ;;      Temps:          0       4       0       0       0
  5567 ;;      Totals:         0      16       0       0       0
  5568 ;;Total ram usage:       16 bytes
  5569 ;; Hardware stack levels used:    1
  5570 ;; Hardware stack levels required when called:    1
  5571 ;; This function calls:
  5572 ;;		___ftpack
  5573 ;; This function is called by:
  5574 ;;		_fround
  5575 ;;		_scale
  5576 ;;		_sprintf
  5577 ;; This function uses a non-reentrant model
  5578 ;;
  5579                           
  5580                           
  5581                           ;psect for function ___ftmul
  5582  1624                     ___ftmul:	
  5583                           
  5584                           ;incstack = 0
  5585                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5586  1624  1283               	bcf	3,5	;RP0=0, select bank0
  5587  1625  1303               	bcf	3,6	;RP1=0, select bank0
  5588  1626  0827               	movf	___ftmul@f1,w
  5589  1627  00AD               	movwf	??___ftmul
  5590  1628  0828               	movf	___ftmul@f1+1,w
  5591  1629  00AE               	movwf	??___ftmul+1
  5592  162A  0829               	movf	___ftmul@f1+2,w
  5593  162B  00AF               	movwf	??___ftmul+2
  5594  162C  1003               	clrc
  5595  162D  0D2E               	rlf	??___ftmul+1,w
  5596  162E  0D2F               	rlf	??___ftmul+2,w
  5597  162F  00B0               	movwf	??___ftmul+3
  5598  1630  0830               	movf	??___ftmul+3,w
  5599  1631  00B1               	movwf	___ftmul@exp
  5600  1632  0831               	movf	___ftmul@exp,w
  5601  1633  1D03               	btfss	3,2
  5602  1634  2E3C               	goto	l2279
  5603  1635  3000               	movlw	0
  5604  1636  00A7               	movwf	?___ftmul
  5605  1637  3000               	movlw	0
  5606  1638  00A8               	movwf	?___ftmul+1
  5607  1639  3000               	movlw	0
  5608  163A  00A9               	movwf	?___ftmul+2
  5609  163B  0008               	return
  5610  163C                     l2279:	
  5611  163C  082A               	movf	___ftmul@f2,w
  5612  163D  00AD               	movwf	??___ftmul
  5613  163E  082B               	movf	___ftmul@f2+1,w
  5614  163F  00AE               	movwf	??___ftmul+1
  5615  1640  082C               	movf	___ftmul@f2+2,w
  5616  1641  00AF               	movwf	??___ftmul+2
  5617  1642  1003               	clrc
  5618  1643  0D2E               	rlf	??___ftmul+1,w
  5619  1644  0D2F               	rlf	??___ftmul+2,w
  5620  1645  00B0               	movwf	??___ftmul+3
  5621  1646  0830               	movf	??___ftmul+3,w
  5622  1647  00B6               	movwf	___ftmul@sign
  5623  1648  0836               	movf	___ftmul@sign,w
  5624  1649  1D03               	btfss	3,2
  5625  164A  2E52               	goto	l2285
  5626  164B  3000               	movlw	0
  5627  164C  00A7               	movwf	?___ftmul
  5628  164D  3000               	movlw	0
  5629  164E  00A8               	movwf	?___ftmul+1
  5630  164F  3000               	movlw	0
  5631  1650  00A9               	movwf	?___ftmul+2
  5632  1651  0008               	return
  5633  1652                     l2285:	
  5634  1652  0836               	movf	___ftmul@sign,w
  5635  1653  3E7B               	addlw	123
  5636  1654  00AD               	movwf	??___ftmul
  5637  1655  082D               	movf	??___ftmul,w
  5638  1656  07B1               	addwf	___ftmul@exp,f
  5639  1657  0827               	movf	___ftmul@f1,w
  5640  1658  00AD               	movwf	??___ftmul
  5641  1659  0828               	movf	___ftmul@f1+1,w
  5642  165A  00AE               	movwf	??___ftmul+1
  5643  165B  0829               	movf	___ftmul@f1+2,w
  5644  165C  00AF               	movwf	??___ftmul+2
  5645  165D  3010               	movlw	16
  5646  165E                     u2825:	
  5647  165E  1003               	clrc
  5648  165F  0CAF               	rrf	??___ftmul+2,f
  5649  1660  0CAE               	rrf	??___ftmul+1,f
  5650  1661  0CAD               	rrf	??___ftmul,f
  5651  1662  3EFF               	addlw	-1
  5652  1663  1D03               	skipz
  5653  1664  2E5E               	goto	u2825
  5654  1665  082D               	movf	??___ftmul,w
  5655  1666  00B0               	movwf	??___ftmul+3
  5656  1667  0830               	movf	??___ftmul+3,w
  5657  1668  00B6               	movwf	___ftmul@sign
  5658  1669  082A               	movf	___ftmul@f2,w
  5659  166A  00AD               	movwf	??___ftmul
  5660  166B  082B               	movf	___ftmul@f2+1,w
  5661  166C  00AE               	movwf	??___ftmul+1
  5662  166D  082C               	movf	___ftmul@f2+2,w
  5663  166E  00AF               	movwf	??___ftmul+2
  5664  166F  3010               	movlw	16
  5665  1670                     u2835:	
  5666  1670  1003               	clrc
  5667  1671  0CAF               	rrf	??___ftmul+2,f
  5668  1672  0CAE               	rrf	??___ftmul+1,f
  5669  1673  0CAD               	rrf	??___ftmul,f
  5670  1674  3EFF               	addlw	-1
  5671  1675  1D03               	skipz
  5672  1676  2E70               	goto	u2835
  5673  1677  082D               	movf	??___ftmul,w
  5674  1678  00B0               	movwf	??___ftmul+3
  5675  1679  0830               	movf	??___ftmul+3,w
  5676  167A  06B6               	xorwf	___ftmul@sign,f
  5677  167B  3080               	movlw	128
  5678  167C  00AD               	movwf	??___ftmul
  5679  167D  082D               	movf	??___ftmul,w
  5680  167E  05B6               	andwf	___ftmul@sign,f
  5681  167F  17A8               	bsf	___ftmul@f1+1,7
  5682  1680  17AB               	bsf	___ftmul@f2+1,7
  5683  1681  30FF               	movlw	255
  5684  1682  05AA               	andwf	___ftmul@f2,f
  5685  1683  30FF               	movlw	255
  5686  1684  05AB               	andwf	___ftmul@f2+1,f
  5687  1685  3000               	movlw	0
  5688  1686  05AC               	andwf	___ftmul@f2+2,f
  5689  1687  3000               	movlw	0
  5690  1688  00B2               	movwf	___ftmul@f3_as_product
  5691  1689  3000               	movlw	0
  5692  168A  00B3               	movwf	___ftmul@f3_as_product+1
  5693  168B  3000               	movlw	0
  5694  168C  00B4               	movwf	___ftmul@f3_as_product+2
  5695  168D  3007               	movlw	7
  5696  168E  00AD               	movwf	??___ftmul
  5697  168F  082D               	movf	??___ftmul,w
  5698  1690  00B5               	movwf	___ftmul@cntr
  5699  1691                     l2297:	
  5700  1691  1C27               	btfss	___ftmul@f1,0
  5701  1692  2EA1               	goto	l2301
  5702  1693  082A               	movf	___ftmul@f2,w
  5703  1694  07B2               	addwf	___ftmul@f3_as_product,f
  5704  1695  082B               	movf	___ftmul@f2+1,w
  5705  1696  1103               	clrz
  5706  1697  1803               	skipnc
  5707  1698  0A2B               	incf	___ftmul@f2+1,w
  5708  1699  1D03               	btfss	3,2
  5709  169A  07B3               	addwf	___ftmul@f3_as_product+1,f
  5710  169B  082C               	movf	___ftmul@f2+2,w
  5711  169C  1103               	clrz
  5712  169D  1803               	skipnc
  5713  169E  0A2C               	incf	___ftmul@f2+2,w
  5714  169F  1D03               	btfss	3,2
  5715  16A0  07B4               	addwf	___ftmul@f3_as_product+2,f
  5716  16A1                     l2301:	
  5717  16A1  3001               	movlw	1
  5718  16A2                     u2865:	
  5719  16A2  1003               	clrc
  5720  16A3  0CA9               	rrf	___ftmul@f1+2,f
  5721  16A4  0CA8               	rrf	___ftmul@f1+1,f
  5722  16A5  0CA7               	rrf	___ftmul@f1,f
  5723  16A6  3EFF               	addlw	-1
  5724  16A7  1D03               	skipz
  5725  16A8  2EA2               	goto	u2865
  5726  16A9  3001               	movlw	1
  5727  16AA                     u2875:	
  5728  16AA  1003               	clrc
  5729  16AB  0DAA               	rlf	___ftmul@f2,f
  5730  16AC  0DAB               	rlf	___ftmul@f2+1,f
  5731  16AD  0DAC               	rlf	___ftmul@f2+2,f
  5732  16AE  3EFF               	addlw	-1
  5733  16AF  1D03               	skipz
  5734  16B0  2EAA               	goto	u2875
  5735  16B1  3001               	movlw	1
  5736  16B2  02B5               	subwf	___ftmul@cntr,f
  5737  16B3  1D03               	btfss	3,2
  5738  16B4  2E91               	goto	l2297
  5739  16B5  3009               	movlw	9
  5740  16B6  00AD               	movwf	??___ftmul
  5741  16B7  082D               	movf	??___ftmul,w
  5742  16B8  00B5               	movwf	___ftmul@cntr
  5743  16B9                     l2309:	
  5744  16B9  1C27               	btfss	___ftmul@f1,0
  5745  16BA  2EC9               	goto	l2313
  5746  16BB  082A               	movf	___ftmul@f2,w
  5747  16BC  07B2               	addwf	___ftmul@f3_as_product,f
  5748  16BD  082B               	movf	___ftmul@f2+1,w
  5749  16BE  1103               	clrz
  5750  16BF  1803               	skipnc
  5751  16C0  0A2B               	incf	___ftmul@f2+1,w
  5752  16C1  1D03               	btfss	3,2
  5753  16C2  07B3               	addwf	___ftmul@f3_as_product+1,f
  5754  16C3  082C               	movf	___ftmul@f2+2,w
  5755  16C4  1103               	clrz
  5756  16C5  1803               	skipnc
  5757  16C6  0A2C               	incf	___ftmul@f2+2,w
  5758  16C7  1D03               	btfss	3,2
  5759  16C8  07B4               	addwf	___ftmul@f3_as_product+2,f
  5760  16C9                     l2313:	
  5761  16C9  3001               	movlw	1
  5762  16CA                     u2915:	
  5763  16CA  1003               	clrc
  5764  16CB  0CA9               	rrf	___ftmul@f1+2,f
  5765  16CC  0CA8               	rrf	___ftmul@f1+1,f
  5766  16CD  0CA7               	rrf	___ftmul@f1,f
  5767  16CE  3EFF               	addlw	-1
  5768  16CF  1D03               	skipz
  5769  16D0  2ECA               	goto	u2915
  5770  16D1  3001               	movlw	1
  5771  16D2                     u2925:	
  5772  16D2  1003               	clrc
  5773  16D3  0CB4               	rrf	___ftmul@f3_as_product+2,f
  5774  16D4  0CB3               	rrf	___ftmul@f3_as_product+1,f
  5775  16D5  0CB2               	rrf	___ftmul@f3_as_product,f
  5776  16D6  3EFF               	addlw	-1
  5777  16D7  1D03               	skipz
  5778  16D8  2ED2               	goto	u2925
  5779  16D9  3001               	movlw	1
  5780  16DA  02B5               	subwf	___ftmul@cntr,f
  5781  16DB  1D03               	btfss	3,2
  5782  16DC  2EB9               	goto	l2309
  5783  16DD  0832               	movf	___ftmul@f3_as_product,w
  5784  16DE  00F0               	movwf	___ftpack@arg
  5785  16DF  0833               	movf	___ftmul@f3_as_product+1,w
  5786  16E0  00F1               	movwf	___ftpack@arg+1
  5787  16E1  0834               	movf	___ftmul@f3_as_product+2,w
  5788  16E2  00F2               	movwf	___ftpack@arg+2
  5789  16E3  0831               	movf	___ftmul@exp,w
  5790  16E4  00AD               	movwf	??___ftmul
  5791  16E5  082D               	movf	??___ftmul,w
  5792  16E6  00F3               	movwf	___ftpack@exp
  5793  16E7  0836               	movf	___ftmul@sign,w
  5794  16E8  00AE               	movwf	??___ftmul+1
  5795  16E9  082E               	movf	??___ftmul+1,w
  5796  16EA  00F4               	movwf	___ftpack@sign
  5797  16EB  160A  118A  237E   	fcall	___ftpack
  5798  16EE  0870               	movf	?___ftpack,w
  5799  16EF  1283               	bcf	3,5	;RP0=0, select bank0
  5800  16F0  1303               	bcf	3,6	;RP1=0, select bank0
  5801  16F1  00A7               	movwf	?___ftmul
  5802  16F2  0871               	movf	?___ftpack+1,w
  5803  16F3  00A8               	movwf	?___ftmul+1
  5804  16F4  0872               	movf	?___ftpack+2,w
  5805  16F5  00A9               	movwf	?___ftmul+2
  5806  16F6  0008               	return
  5807  16F7                     __end_of___ftmul:	
  5808                           
  5809                           	psect	text11
  5810  1E97                     __ptext11:	
  5811 ;; *************** function ___bmul *****************
  5812 ;; Defined at:
  5813 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\Umul8.c"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;  multiplier      1    wreg     unsigned char 
  5816 ;;  multiplicand    1    4[BANK0 ] unsigned char 
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;  multiplier      1    6[BANK0 ] unsigned char 
  5819 ;;  product         1    5[BANK0 ] unsigned char 
  5820 ;; Return value:  Size  Location     Type
  5821 ;;                  1    wreg      unsigned char 
  5822 ;; Registers used:
  5823 ;;		wreg, status,2, status,0
  5824 ;; Tracked objects:
  5825 ;;		On entry : 0/0
  5826 ;;		On exit  : 0/0
  5827 ;;		Unchanged: 0/0
  5828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5829 ;;      Params:         0       1       0       0       0
  5830 ;;      Locals:         0       2       0       0       0
  5831 ;;      Temps:          1       0       0       0       0
  5832 ;;      Totals:         1       3       0       0       0
  5833 ;;Total ram usage:        4 bytes
  5834 ;; Hardware stack levels used:    1
  5835 ;; This function calls:
  5836 ;;		Nothing
  5837 ;; This function is called by:
  5838 ;;		_fround
  5839 ;;		_scale
  5840 ;; This function uses a non-reentrant model
  5841 ;;
  5842                           
  5843                           
  5844                           ;psect for function ___bmul
  5845  1E97                     ___bmul:	
  5846                           
  5847                           ;incstack = 0
  5848                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5849                           ;___bmul@multiplier stored from wreg
  5850  1E97  1283               	bcf	3,5	;RP0=0, select bank0
  5851  1E98  1303               	bcf	3,6	;RP1=0, select bank0
  5852  1E99  00A6               	movwf	___bmul@multiplier
  5853  1E9A  01A5               	clrf	___bmul@product
  5854  1E9B                     l2109:	
  5855  1E9B  1C26               	btfss	___bmul@multiplier,0
  5856  1E9C  2EA1               	goto	l2113
  5857  1E9D  0824               	movf	___bmul@multiplicand,w
  5858  1E9E  00FC               	movwf	??___bmul
  5859  1E9F  087C               	movf	??___bmul,w
  5860  1EA0  07A5               	addwf	___bmul@product,f
  5861  1EA1                     l2113:	
  5862  1EA1  1003               	clrc
  5863  1EA2  0DA4               	rlf	___bmul@multiplicand,f
  5864  1EA3  1003               	clrc
  5865  1EA4  0CA6               	rrf	___bmul@multiplier,f
  5866  1EA5  0826               	movf	___bmul@multiplier,w
  5867  1EA6  1D03               	btfss	3,2
  5868  1EA7  2E9B               	goto	l2109
  5869  1EA8  0825               	movf	___bmul@product,w
  5870  1EA9  0008               	return
  5871  1EAA                     __end_of___bmul:	
  5872                           
  5873                           	psect	text12
  5874  1170                     __ptext12:	
  5875 ;; *************** function ___awmod *****************
  5876 ;; Defined at:
  5877 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\awmod.c"
  5878 ;; Parameters:    Size  Location     Type
  5879 ;;  divisor         2    0[COMMON] int 
  5880 ;;  dividend        2    2[COMMON] int 
  5881 ;; Auto vars:     Size  Location     Type
  5882 ;;  sign            1    6[COMMON] unsigned char 
  5883 ;;  counter         1    5[COMMON] unsigned char 
  5884 ;; Return value:  Size  Location     Type
  5885 ;;                  2    0[COMMON] int 
  5886 ;; Registers used:
  5887 ;;		wreg, status,2, status,0
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : 0/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5893 ;;      Params:         4       0       0       0       0
  5894 ;;      Locals:         2       0       0       0       0
  5895 ;;      Temps:          1       0       0       0       0
  5896 ;;      Totals:         7       0       0       0       0
  5897 ;;Total ram usage:        7 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; This function calls:
  5900 ;;		Nothing
  5901 ;; This function is called by:
  5902 ;;		_fround
  5903 ;;		_scale
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           
  5908                           ;psect for function ___awmod
  5909  1170                     ___awmod:	
  5910                           
  5911                           ;incstack = 0
  5912                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5913  1170  01F6               	clrf	___awmod@sign
  5914  1171  1FF3               	btfss	___awmod@dividend+1,7
  5915  1172  297A               	goto	l2173
  5916  1173  09F2               	comf	___awmod@dividend,f
  5917  1174  09F3               	comf	___awmod@dividend+1,f
  5918  1175  0AF2               	incf	___awmod@dividend,f
  5919  1176  1903               	skipnz
  5920  1177  0AF3               	incf	___awmod@dividend+1,f
  5921  1178  01F6               	clrf	___awmod@sign
  5922  1179  0AF6               	incf	___awmod@sign,f
  5923  117A                     l2173:	
  5924  117A  1FF1               	btfss	___awmod@divisor+1,7
  5925  117B  2981               	goto	l2177
  5926  117C  09F0               	comf	___awmod@divisor,f
  5927  117D  09F1               	comf	___awmod@divisor+1,f
  5928  117E  0AF0               	incf	___awmod@divisor,f
  5929  117F  1903               	skipnz
  5930  1180  0AF1               	incf	___awmod@divisor+1,f
  5931  1181                     l2177:	
  5932  1181  0870               	movf	___awmod@divisor,w
  5933  1182  0471               	iorwf	___awmod@divisor+1,w
  5934  1183  1903               	btfsc	3,2
  5935  1184  29AE               	goto	l2195
  5936  1185  01F5               	clrf	___awmod@counter
  5937  1186  0AF5               	incf	___awmod@counter,f
  5938  1187                     l2185:	
  5939  1187  1BF1               	btfsc	___awmod@divisor+1,7
  5940  1188  2995               	goto	l2187
  5941  1189  3001               	movlw	1
  5942  118A                     u2505:	
  5943  118A  1003               	clrc
  5944  118B  0DF0               	rlf	___awmod@divisor,f
  5945  118C  0DF1               	rlf	___awmod@divisor+1,f
  5946  118D  3EFF               	addlw	-1
  5947  118E  1D03               	skipz
  5948  118F  298A               	goto	u2505
  5949  1190  3001               	movlw	1
  5950  1191  00F4               	movwf	??___awmod
  5951  1192  0874               	movf	??___awmod,w
  5952  1193  07F5               	addwf	___awmod@counter,f
  5953  1194  2987               	goto	l2185
  5954  1195                     l2187:	
  5955  1195  0871               	movf	___awmod@divisor+1,w
  5956  1196  0273               	subwf	___awmod@dividend+1,w
  5957  1197  1D03               	skipz
  5958  1198  299B               	goto	u2525
  5959  1199  0870               	movf	___awmod@divisor,w
  5960  119A  0272               	subwf	___awmod@dividend,w
  5961  119B                     u2525:	
  5962  119B  1C03               	skipc
  5963  119C  29A3               	goto	l2191
  5964  119D  0870               	movf	___awmod@divisor,w
  5965  119E  02F2               	subwf	___awmod@dividend,f
  5966  119F  0871               	movf	___awmod@divisor+1,w
  5967  11A0  1C03               	skipc
  5968  11A1  03F3               	decf	___awmod@dividend+1,f
  5969  11A2  02F3               	subwf	___awmod@dividend+1,f
  5970  11A3                     l2191:	
  5971  11A3  3001               	movlw	1
  5972  11A4                     u2535:	
  5973  11A4  1003               	clrc
  5974  11A5  0CF1               	rrf	___awmod@divisor+1,f
  5975  11A6  0CF0               	rrf	___awmod@divisor,f
  5976  11A7  3EFF               	addlw	-1
  5977  11A8  1D03               	skipz
  5978  11A9  29A4               	goto	u2535
  5979  11AA  3001               	movlw	1
  5980  11AB  02F5               	subwf	___awmod@counter,f
  5981  11AC  1D03               	btfss	3,2
  5982  11AD  2995               	goto	l2187
  5983  11AE                     l2195:	
  5984  11AE  0876               	movf	___awmod@sign,w
  5985  11AF  1903               	btfsc	3,2
  5986  11B0  29B6               	goto	l2199
  5987  11B1  09F2               	comf	___awmod@dividend,f
  5988  11B2  09F3               	comf	___awmod@dividend+1,f
  5989  11B3  0AF2               	incf	___awmod@dividend,f
  5990  11B4  1903               	skipnz
  5991  11B5  0AF3               	incf	___awmod@dividend+1,f
  5992  11B6                     l2199:	
  5993  11B6  0873               	movf	___awmod@dividend+1,w
  5994  11B7  00F1               	movwf	?___awmod+1
  5995  11B8  0872               	movf	___awmod@dividend,w
  5996  11B9  00F0               	movwf	?___awmod
  5997  11BA  0008               	return
  5998  11BB                     __end_of___awmod:	
  5999                           
  6000                           	psect	text13
  6001  125A                     __ptext13:	
  6002 ;; *************** function ___awdiv *****************
  6003 ;; Defined at:
  6004 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\awdiv.c"
  6005 ;; Parameters:    Size  Location     Type
  6006 ;;  divisor         2    7[COMMON] int 
  6007 ;;  dividend        2    9[COMMON] int 
  6008 ;; Auto vars:     Size  Location     Type
  6009 ;;  quotient        2    2[BANK0 ] int 
  6010 ;;  sign            1    1[BANK0 ] unsigned char 
  6011 ;;  counter         1    0[BANK0 ] unsigned char 
  6012 ;; Return value:  Size  Location     Type
  6013 ;;                  2    7[COMMON] int 
  6014 ;; Registers used:
  6015 ;;		wreg, status,2, status,0
  6016 ;; Tracked objects:
  6017 ;;		On entry : 0/0
  6018 ;;		On exit  : 0/0
  6019 ;;		Unchanged: 0/0
  6020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6021 ;;      Params:         4       0       0       0       0
  6022 ;;      Locals:         0       4       0       0       0
  6023 ;;      Temps:          1       0       0       0       0
  6024 ;;      Totals:         5       4       0       0       0
  6025 ;;Total ram usage:        9 bytes
  6026 ;; Hardware stack levels used:    1
  6027 ;; This function calls:
  6028 ;;		Nothing
  6029 ;; This function is called by:
  6030 ;;		_fround
  6031 ;;		_scale
  6032 ;;		_sprintf
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           
  6037                           ;psect for function ___awdiv
  6038  125A                     ___awdiv:	
  6039                           
  6040                           ;incstack = 0
  6041                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6042  125A  1283               	bcf	3,5	;RP0=0, select bank0
  6043  125B  1303               	bcf	3,6	;RP1=0, select bank0
  6044  125C  01A1               	clrf	___awdiv@sign
  6045  125D  1FF8               	btfss	___awdiv@divisor+1,7
  6046  125E  2A66               	goto	l2129
  6047  125F  09F7               	comf	___awdiv@divisor,f
  6048  1260  09F8               	comf	___awdiv@divisor+1,f
  6049  1261  0AF7               	incf	___awdiv@divisor,f
  6050  1262  1903               	skipnz
  6051  1263  0AF8               	incf	___awdiv@divisor+1,f
  6052  1264  01A1               	clrf	___awdiv@sign
  6053  1265  0AA1               	incf	___awdiv@sign,f
  6054  1266                     l2129:	
  6055  1266  1FFA               	btfss	___awdiv@dividend+1,7
  6056  1267  2A71               	goto	l2135
  6057  1268  09F9               	comf	___awdiv@dividend,f
  6058  1269  09FA               	comf	___awdiv@dividend+1,f
  6059  126A  0AF9               	incf	___awdiv@dividend,f
  6060  126B  1903               	skipnz
  6061  126C  0AFA               	incf	___awdiv@dividend+1,f
  6062  126D  3001               	movlw	1
  6063  126E  00FB               	movwf	??___awdiv
  6064  126F  087B               	movf	??___awdiv,w
  6065  1270  06A1               	xorwf	___awdiv@sign,f
  6066  1271                     l2135:	
  6067  1271  01A2               	clrf	___awdiv@quotient
  6068  1272  01A3               	clrf	___awdiv@quotient+1
  6069  1273  0877               	movf	___awdiv@divisor,w
  6070  1274  0478               	iorwf	___awdiv@divisor+1,w
  6071  1275  1903               	btfsc	3,2
  6072  1276  2AA8               	goto	l2157
  6073  1277  01A0               	clrf	___awdiv@counter
  6074  1278  0AA0               	incf	___awdiv@counter,f
  6075  1279                     l2145:	
  6076  1279  1BF8               	btfsc	___awdiv@divisor+1,7
  6077  127A  2A87               	goto	l2147
  6078  127B  3001               	movlw	1
  6079  127C                     u2405:	
  6080  127C  1003               	clrc
  6081  127D  0DF7               	rlf	___awdiv@divisor,f
  6082  127E  0DF8               	rlf	___awdiv@divisor+1,f
  6083  127F  3EFF               	addlw	-1
  6084  1280  1D03               	skipz
  6085  1281  2A7C               	goto	u2405
  6086  1282  3001               	movlw	1
  6087  1283  00FB               	movwf	??___awdiv
  6088  1284  087B               	movf	??___awdiv,w
  6089  1285  07A0               	addwf	___awdiv@counter,f
  6090  1286  2A79               	goto	l2145
  6091  1287                     l2147:	
  6092  1287  3001               	movlw	1
  6093  1288                     u2425:	
  6094  1288  1003               	clrc
  6095  1289  0DA2               	rlf	___awdiv@quotient,f
  6096  128A  0DA3               	rlf	___awdiv@quotient+1,f
  6097  128B  3EFF               	addlw	-1
  6098  128C  1D03               	skipz
  6099  128D  2A88               	goto	u2425
  6100  128E  0878               	movf	___awdiv@divisor+1,w
  6101  128F  027A               	subwf	___awdiv@dividend+1,w
  6102  1290  1D03               	skipz
  6103  1291  2A94               	goto	u2435
  6104  1292  0877               	movf	___awdiv@divisor,w
  6105  1293  0279               	subwf	___awdiv@dividend,w
  6106  1294                     u2435:	
  6107  1294  1C03               	skipc
  6108  1295  2A9D               	goto	l2153
  6109  1296  0877               	movf	___awdiv@divisor,w
  6110  1297  02F9               	subwf	___awdiv@dividend,f
  6111  1298  0878               	movf	___awdiv@divisor+1,w
  6112  1299  1C03               	skipc
  6113  129A  03FA               	decf	___awdiv@dividend+1,f
  6114  129B  02FA               	subwf	___awdiv@dividend+1,f
  6115  129C  1422               	bsf	___awdiv@quotient,0
  6116  129D                     l2153:	
  6117  129D  3001               	movlw	1
  6118  129E                     u2445:	
  6119  129E  1003               	clrc
  6120  129F  0CF8               	rrf	___awdiv@divisor+1,f
  6121  12A0  0CF7               	rrf	___awdiv@divisor,f
  6122  12A1  3EFF               	addlw	-1
  6123  12A2  1D03               	skipz
  6124  12A3  2A9E               	goto	u2445
  6125  12A4  3001               	movlw	1
  6126  12A5  02A0               	subwf	___awdiv@counter,f
  6127  12A6  1D03               	btfss	3,2
  6128  12A7  2A87               	goto	l2147
  6129  12A8                     l2157:	
  6130  12A8  0821               	movf	___awdiv@sign,w
  6131  12A9  1903               	btfsc	3,2
  6132  12AA  2AB0               	goto	l2161
  6133  12AB  09A2               	comf	___awdiv@quotient,f
  6134  12AC  09A3               	comf	___awdiv@quotient+1,f
  6135  12AD  0AA2               	incf	___awdiv@quotient,f
  6136  12AE  1903               	skipnz
  6137  12AF  0AA3               	incf	___awdiv@quotient+1,f
  6138  12B0                     l2161:	
  6139  12B0  0823               	movf	___awdiv@quotient+1,w
  6140  12B1  00F8               	movwf	?___awdiv+1
  6141  12B2  0822               	movf	___awdiv@quotient,w
  6142  12B3  00F7               	movwf	?___awdiv
  6143  12B4  0008               	return
  6144  12B5                     __end_of___awdiv:	
  6145                           
  6146                           	psect	text14
  6147  1561                     __ptext14:	
  6148 ;; *************** function __tdiv_to_l_ *****************
  6149 ;; Defined at:
  6150 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\ftdivl.c"
  6151 ;; Parameters:    Size  Location     Type
  6152 ;;  f1              3    0[COMMON] float 
  6153 ;;  f2              3    3[COMMON] float 
  6154 ;; Auto vars:     Size  Location     Type
  6155 ;;  quot            4    0[BANK0 ] unsigned long 
  6156 ;;  exp1            1    5[BANK0 ] unsigned char 
  6157 ;;  cntr            1    4[BANK0 ] unsigned char 
  6158 ;; Return value:  Size  Location     Type
  6159 ;;                  4    0[COMMON] unsigned long 
  6160 ;; Registers used:
  6161 ;;		wreg, status,2, status,0
  6162 ;; Tracked objects:
  6163 ;;		On entry : 0/0
  6164 ;;		On exit  : 0/0
  6165 ;;		Unchanged: 0/0
  6166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6167 ;;      Params:         6       0       0       0       0
  6168 ;;      Locals:         0       6       0       0       0
  6169 ;;      Temps:          4       0       0       0       0
  6170 ;;      Totals:        10       6       0       0       0
  6171 ;;Total ram usage:       16 bytes
  6172 ;; Hardware stack levels used:    1
  6173 ;; This function calls:
  6174 ;;		Nothing
  6175 ;; This function is called by:
  6176 ;;		_sprintf
  6177 ;; This function uses a non-reentrant model
  6178 ;;
  6179                           
  6180                           
  6181                           ;psect for function __tdiv_to_l_
  6182  1561                     __tdiv_to_l_:	
  6183                           
  6184                           ;incstack = 0
  6185                           ; Regs used in __tdiv_to_l_: [wreg+status,2+status,0]
  6186  1561  0870               	movf	__tdiv_to_l_@f1,w
  6187  1562  00F6               	movwf	??__tdiv_to_l_
  6188  1563  0871               	movf	__tdiv_to_l_@f1+1,w
  6189  1564  00F7               	movwf	??__tdiv_to_l_+1
  6190  1565  0872               	movf	__tdiv_to_l_@f1+2,w
  6191  1566  00F8               	movwf	??__tdiv_to_l_+2
  6192  1567  1003               	clrc
  6193  1568  0D77               	rlf	??__tdiv_to_l_+1,w
  6194  1569  0D78               	rlf	??__tdiv_to_l_+2,w
  6195  156A  00F9               	movwf	??__tdiv_to_l_+3
  6196  156B  0879               	movf	??__tdiv_to_l_+3,w
  6197  156C  1283               	bcf	3,5	;RP0=0, select bank0
  6198  156D  1303               	bcf	3,6	;RP1=0, select bank0
  6199  156E  00A5               	movwf	__tdiv_to_l_@exp1
  6200  156F  0825               	movf	__tdiv_to_l_@exp1,w
  6201  1570  1D03               	btfss	3,2
  6202  1571  2D7B               	goto	l2407
  6203  1572  3000               	movlw	0
  6204  1573  00F3               	movwf	?__tdiv_to_l_+3
  6205  1574  3000               	movlw	0
  6206  1575  00F2               	movwf	?__tdiv_to_l_+2
  6207  1576  3000               	movlw	0
  6208  1577  00F1               	movwf	?__tdiv_to_l_+1
  6209  1578  3000               	movlw	0
  6210  1579  00F0               	movwf	?__tdiv_to_l_
  6211  157A  0008               	return
  6212  157B                     l2407:	
  6213  157B  0873               	movf	__tdiv_to_l_@f2,w
  6214  157C  00F6               	movwf	??__tdiv_to_l_
  6215  157D  0874               	movf	__tdiv_to_l_@f2+1,w
  6216  157E  00F7               	movwf	??__tdiv_to_l_+1
  6217  157F  0875               	movf	__tdiv_to_l_@f2+2,w
  6218  1580  00F8               	movwf	??__tdiv_to_l_+2
  6219  1581  1003               	clrc
  6220  1582  0D77               	rlf	??__tdiv_to_l_+1,w
  6221  1583  0D78               	rlf	??__tdiv_to_l_+2,w
  6222  1584  00F9               	movwf	??__tdiv_to_l_+3
  6223  1585  0879               	movf	??__tdiv_to_l_+3,w
  6224  1586  00A4               	movwf	__tdiv_to_l_@cntr
  6225  1587  0824               	movf	__tdiv_to_l_@cntr,w
  6226  1588  1D03               	btfss	3,2
  6227  1589  2D93               	goto	l617
  6228  158A  3000               	movlw	0
  6229  158B  00F3               	movwf	?__tdiv_to_l_+3
  6230  158C  3000               	movlw	0
  6231  158D  00F2               	movwf	?__tdiv_to_l_+2
  6232  158E  3000               	movlw	0
  6233  158F  00F1               	movwf	?__tdiv_to_l_+1
  6234  1590  3000               	movlw	0
  6235  1591  00F0               	movwf	?__tdiv_to_l_
  6236  1592  0008               	return
  6237  1593                     l617:	
  6238  1593  17F1               	bsf	__tdiv_to_l_@f1+1,7
  6239  1594  30FF               	movlw	255
  6240  1595  05F0               	andwf	__tdiv_to_l_@f1,f
  6241  1596  30FF               	movlw	255
  6242  1597  05F1               	andwf	__tdiv_to_l_@f1+1,f
  6243  1598  3000               	movlw	0
  6244  1599  05F2               	andwf	__tdiv_to_l_@f1+2,f
  6245  159A  17F4               	bsf	__tdiv_to_l_@f2+1,7
  6246  159B  30FF               	movlw	255
  6247  159C  05F3               	andwf	__tdiv_to_l_@f2,f
  6248  159D  30FF               	movlw	255
  6249  159E  05F4               	andwf	__tdiv_to_l_@f2+1,f
  6250  159F  3000               	movlw	0
  6251  15A0  05F5               	andwf	__tdiv_to_l_@f2+2,f
  6252  15A1  3000               	movlw	0
  6253  15A2  00A3               	movwf	__tdiv_to_l_@quot+3
  6254  15A3  3000               	movlw	0
  6255  15A4  00A2               	movwf	__tdiv_to_l_@quot+2
  6256  15A5  3000               	movlw	0
  6257  15A6  00A1               	movwf	__tdiv_to_l_@quot+1
  6258  15A7  3000               	movlw	0
  6259  15A8  00A0               	movwf	__tdiv_to_l_@quot
  6260  15A9  307F               	movlw	127
  6261  15AA  02A5               	subwf	__tdiv_to_l_@exp1,f
  6262  15AB  3098               	movlw	152
  6263  15AC  0724               	addwf	__tdiv_to_l_@cntr,w
  6264  15AD  00F6               	movwf	??__tdiv_to_l_
  6265  15AE  0876               	movf	??__tdiv_to_l_,w
  6266  15AF  02A5               	subwf	__tdiv_to_l_@exp1,f
  6267  15B0  3018               	movlw	24
  6268  15B1  00F6               	movwf	??__tdiv_to_l_
  6269  15B2  0876               	movf	??__tdiv_to_l_,w
  6270  15B3  00A4               	movwf	__tdiv_to_l_@cntr
  6271  15B4                     l2421:	
  6272  15B4  3001               	movlw	1
  6273  15B5  00F6               	movwf	??__tdiv_to_l_
  6274  15B6                     u3055:	
  6275  15B6  1003               	clrc
  6276  15B7  0DA0               	rlf	__tdiv_to_l_@quot,f
  6277  15B8  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  6278  15B9  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  6279  15BA  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  6280  15BB  0BF6               	decfsz	??__tdiv_to_l_,f
  6281  15BC  2DB6               	goto	u3055
  6282  15BD  0875               	movf	__tdiv_to_l_@f2+2,w
  6283  15BE  0272               	subwf	__tdiv_to_l_@f1+2,w
  6284  15BF  1D03               	skipz
  6285  15C0  2DC7               	goto	u3065
  6286  15C1  0874               	movf	__tdiv_to_l_@f2+1,w
  6287  15C2  0271               	subwf	__tdiv_to_l_@f1+1,w
  6288  15C3  1D03               	skipz
  6289  15C4  2DC7               	goto	u3065
  6290  15C5  0873               	movf	__tdiv_to_l_@f2,w
  6291  15C6  0270               	subwf	__tdiv_to_l_@f1,w
  6292  15C7                     u3065:	
  6293  15C7  1C03               	skipc
  6294  15C8  2DD4               	goto	l2429
  6295  15C9  0873               	movf	__tdiv_to_l_@f2,w
  6296  15CA  02F0               	subwf	__tdiv_to_l_@f1,f
  6297  15CB  0874               	movf	__tdiv_to_l_@f2+1,w
  6298  15CC  1C03               	skipc
  6299  15CD  0F74               	incfsz	__tdiv_to_l_@f2+1,w
  6300  15CE  02F1               	subwf	__tdiv_to_l_@f1+1,f
  6301  15CF  0875               	movf	__tdiv_to_l_@f2+2,w
  6302  15D0  1C03               	skipc
  6303  15D1  0A75               	incf	__tdiv_to_l_@f2+2,w
  6304  15D2  02F2               	subwf	__tdiv_to_l_@f1+2,f
  6305  15D3  1420               	bsf	__tdiv_to_l_@quot,0
  6306  15D4                     l2429:	
  6307  15D4  3001               	movlw	1
  6308  15D5                     u3075:	
  6309  15D5  1003               	clrc
  6310  15D6  0DF0               	rlf	__tdiv_to_l_@f1,f
  6311  15D7  0DF1               	rlf	__tdiv_to_l_@f1+1,f
  6312  15D8  0DF2               	rlf	__tdiv_to_l_@f1+2,f
  6313  15D9  3EFF               	addlw	-1
  6314  15DA  1D03               	skipz
  6315  15DB  2DD5               	goto	u3075
  6316  15DC  3001               	movlw	1
  6317  15DD  02A4               	subwf	__tdiv_to_l_@cntr,f
  6318  15DE  1D03               	btfss	3,2
  6319  15DF  2DB4               	goto	l2421
  6320  15E0  1FA5               	btfss	__tdiv_to_l_@exp1,7
  6321  15E1  2E00               	goto	l2441
  6322  15E2  0825               	movf	__tdiv_to_l_@exp1,w
  6323  15E3  3A80               	xorlw	128
  6324  15E4  3E97               	addlw	151
  6325  15E5  1803               	skipnc
  6326  15E6  2DF0               	goto	l2439
  6327  15E7  3000               	movlw	0
  6328  15E8  00F3               	movwf	?__tdiv_to_l_+3
  6329  15E9  3000               	movlw	0
  6330  15EA  00F2               	movwf	?__tdiv_to_l_+2
  6331  15EB  3000               	movlw	0
  6332  15EC  00F1               	movwf	?__tdiv_to_l_+1
  6333  15ED  3000               	movlw	0
  6334  15EE  00F0               	movwf	?__tdiv_to_l_
  6335  15EF  0008               	return
  6336  15F0                     l2439:	
  6337  15F0  3001               	movlw	1
  6338  15F1                     u3115:	
  6339  15F1  1003               	clrc
  6340  15F2  0CA3               	rrf	__tdiv_to_l_@quot+3,f
  6341  15F3  0CA2               	rrf	__tdiv_to_l_@quot+2,f
  6342  15F4  0CA1               	rrf	__tdiv_to_l_@quot+1,f
  6343  15F5  0CA0               	rrf	__tdiv_to_l_@quot,f
  6344  15F6  3EFF               	addlw	-1
  6345  15F7  1D03               	skipz
  6346  15F8  2DF1               	goto	u3115
  6347  15F9  3001               	movlw	1
  6348  15FA  00F6               	movwf	??__tdiv_to_l_
  6349  15FB  0876               	movf	??__tdiv_to_l_,w
  6350  15FC  07A5               	addwf	__tdiv_to_l_@exp1,f
  6351  15FD  1903               	btfsc	3,2
  6352  15FE  2E1B               	goto	l2449
  6353  15FF  2DF0               	goto	l2439
  6354  1600                     l2441:	
  6355  1600  3018               	movlw	24
  6356  1601  0225               	subwf	__tdiv_to_l_@exp1,w
  6357  1602  1C03               	skipc
  6358  1603  2E18               	goto	l627
  6359  1604  3000               	movlw	0
  6360  1605  00F3               	movwf	?__tdiv_to_l_+3
  6361  1606  3000               	movlw	0
  6362  1607  00F2               	movwf	?__tdiv_to_l_+2
  6363  1608  3000               	movlw	0
  6364  1609  00F1               	movwf	?__tdiv_to_l_+1
  6365  160A  3000               	movlw	0
  6366  160B  00F0               	movwf	?__tdiv_to_l_
  6367  160C  0008               	return
  6368  160D                     l2447:	
  6369  160D  3001               	movlw	1
  6370  160E  00F6               	movwf	??__tdiv_to_l_
  6371  160F                     u3145:	
  6372  160F  1003               	clrc
  6373  1610  0DA0               	rlf	__tdiv_to_l_@quot,f
  6374  1611  0DA1               	rlf	__tdiv_to_l_@quot+1,f
  6375  1612  0DA2               	rlf	__tdiv_to_l_@quot+2,f
  6376  1613  0DA3               	rlf	__tdiv_to_l_@quot+3,f
  6377  1614  0BF6               	decfsz	??__tdiv_to_l_,f
  6378  1615  2E0F               	goto	u3145
  6379  1616  3001               	movlw	1
  6380  1617  02A5               	subwf	__tdiv_to_l_@exp1,f
  6381  1618                     l627:	
  6382  1618  0825               	movf	__tdiv_to_l_@exp1,w
  6383  1619  1D03               	btfss	3,2
  6384  161A  2E0D               	goto	l2447
  6385  161B                     l2449:	
  6386  161B  0823               	movf	__tdiv_to_l_@quot+3,w
  6387  161C  00F3               	movwf	?__tdiv_to_l_+3
  6388  161D  0822               	movf	__tdiv_to_l_@quot+2,w
  6389  161E  00F2               	movwf	?__tdiv_to_l_+2
  6390  161F  0821               	movf	__tdiv_to_l_@quot+1,w
  6391  1620  00F1               	movwf	?__tdiv_to_l_+1
  6392  1621  0820               	movf	__tdiv_to_l_@quot,w
  6393  1622  00F0               	movwf	?__tdiv_to_l_
  6394  1623  0008               	return
  6395  1624                     __end_of__tdiv_to_l_:	
  6396                           
  6397                           	psect	text15
  6398  0060                     __ptext15:	
  6399 ;; *************** function __div_to_l_ *****************
  6400 ;; Defined at:
  6401 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\fldivl.c"
  6402 ;; Parameters:    Size  Location     Type
  6403 ;;  f1              3    0[COMMON] unsigned long 
  6404 ;;  f2              3    3[COMMON] unsigned long 
  6405 ;; Auto vars:     Size  Location     Type
  6406 ;;  quot            4    0[BANK0 ] unsigned long 
  6407 ;;  exp1            1    5[BANK0 ] unsigned char 
  6408 ;;  cntr            1    4[BANK0 ] unsigned char 
  6409 ;; Return value:  Size  Location     Type
  6410 ;;                  4    0[COMMON] unsigned long 
  6411 ;; Registers used:
  6412 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6413 ;; Tracked objects:
  6414 ;;		On entry : 0/0
  6415 ;;		On exit  : 0/0
  6416 ;;		Unchanged: 0/0
  6417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6418 ;;      Params:         6       0       0       0       0
  6419 ;;      Locals:         0       6       0       0       0
  6420 ;;      Temps:          8       0       0       0       0
  6421 ;;      Totals:        14       6       0       0       0
  6422 ;;Total ram usage:       20 bytes
  6423 ;; Hardware stack levels used:    1
  6424 ;; This function calls:
  6425 ;;		Nothing
  6426 ;; This function is called by:
  6427 ;;		_sprintf
  6428 ;; This function uses a non-reentrant model
  6429 ;;
  6430                           
  6431                           
  6432                           ;psect for function __div_to_l_
  6433  0060                     __div_to_l_:	
  6434                           
  6435                           ;incstack = 0
  6436                           ; Regs used in __div_to_l_: [wreg-fsr0h+status,2+status,0]
  6437  0060  3070               	movlw	low (__div_to_l_@f1| 0)
  6438  0061  0084               	movwf	4
  6439  0062  0800               	movf	0,w
  6440  0063  00F6               	movwf	??__div_to_l_
  6441  0064  0A84               	incf	4,f
  6442  0065  0800               	movf	0,w
  6443  0066  00F7               	movwf	??__div_to_l_+1
  6444  0067  0A84               	incf	4,f
  6445  0068  0800               	movf	0,w
  6446  0069  00F8               	movwf	??__div_to_l_+2
  6447  006A  0A84               	incf	4,f
  6448  006B  0800               	movf	0,w
  6449  006C  00F9               	movwf	??__div_to_l_+3
  6450  006D  1003               	clrc
  6451  006E  0D78               	rlf	??__div_to_l_+2,w
  6452  006F  0D79               	rlf	??__div_to_l_+3,w
  6453  0070  00FA               	movwf	??__div_to_l_+4
  6454  0071  087A               	movf	??__div_to_l_+4,w
  6455  0072  1283               	bcf	3,5	;RP0=0, select bank0
  6456  0073  1303               	bcf	3,6	;RP1=0, select bank0
  6457  0074  00A5               	movwf	__div_to_l_@exp1
  6458  0075  0825               	movf	__div_to_l_@exp1,w
  6459  0076  1D03               	btfss	3,2
  6460  0077  2881               	goto	l2459
  6461  0078  3000               	movlw	0
  6462  0079  00F3               	movwf	?__div_to_l_+3
  6463  007A  3000               	movlw	0
  6464  007B  00F2               	movwf	?__div_to_l_+2
  6465  007C  3000               	movlw	0
  6466  007D  00F1               	movwf	?__div_to_l_+1
  6467  007E  3000               	movlw	0
  6468  007F  00F0               	movwf	?__div_to_l_
  6469  0080  0008               	return
  6470  0081                     l2459:	
  6471  0081  3073               	movlw	low (__div_to_l_@f2| 0)
  6472  0082  0084               	movwf	4
  6473  0083  0800               	movf	0,w
  6474  0084  00F6               	movwf	??__div_to_l_
  6475  0085  0A84               	incf	4,f
  6476  0086  0800               	movf	0,w
  6477  0087  00F7               	movwf	??__div_to_l_+1
  6478  0088  0A84               	incf	4,f
  6479  0089  0800               	movf	0,w
  6480  008A  00F8               	movwf	??__div_to_l_+2
  6481  008B  0A84               	incf	4,f
  6482  008C  0800               	movf	0,w
  6483  008D  00F9               	movwf	??__div_to_l_+3
  6484  008E  1003               	clrc
  6485  008F  0D78               	rlf	??__div_to_l_+2,w
  6486  0090  0D79               	rlf	??__div_to_l_+3,w
  6487  0091  00FA               	movwf	??__div_to_l_+4
  6488  0092  087A               	movf	??__div_to_l_+4,w
  6489  0093  00A4               	movwf	__div_to_l_@cntr
  6490  0094  0824               	movf	__div_to_l_@cntr,w
  6491  0095  1D03               	btfss	3,2
  6492  0096  28A0               	goto	l2465
  6493  0097  3000               	movlw	0
  6494  0098  00F3               	movwf	?__div_to_l_+3
  6495  0099  3000               	movlw	0
  6496  009A  00F2               	movwf	?__div_to_l_+2
  6497  009B  3000               	movlw	0
  6498  009C  00F1               	movwf	?__div_to_l_+1
  6499  009D  3000               	movlw	0
  6500  009E  00F0               	movwf	?__div_to_l_
  6501  009F  0008               	return
  6502  00A0                     l2465:	
  6503  00A0  3070               	movlw	low (__div_to_l_@f1| 0)
  6504  00A1  0084               	movwf	4
  6505  00A2  3000               	movlw	0
  6506  00A3  0480               	iorwf	0,f
  6507  00A4  0A84               	incf	4,f
  6508  00A5  3000               	movlw	0
  6509  00A6  0480               	iorwf	0,f
  6510  00A7  0A84               	incf	4,f
  6511  00A8  3080               	movlw	128
  6512  00A9  0480               	iorwf	0,f
  6513  00AA  0A84               	incf	4,f
  6514  00AB  3000               	movlw	0
  6515  00AC  0480               	iorwf	0,f
  6516  00AD  3070               	movlw	low (__div_to_l_@f1| 0)
  6517  00AE  0084               	movwf	4
  6518  00AF  30FF               	movlw	255
  6519  00B0  0580               	andwf	0,f
  6520  00B1  0A84               	incf	4,f
  6521  00B2  30FF               	movlw	255
  6522  00B3  0580               	andwf	0,f
  6523  00B4  0A84               	incf	4,f
  6524  00B5  30FF               	movlw	255
  6525  00B6  0580               	andwf	0,f
  6526  00B7  0A84               	incf	4,f
  6527  00B8  3000               	movlw	0
  6528  00B9  0580               	andwf	0,f
  6529  00BA  3073               	movlw	low (__div_to_l_@f2| 0)
  6530  00BB  0084               	movwf	4
  6531  00BC  3000               	movlw	0
  6532  00BD  0480               	iorwf	0,f
  6533  00BE  0A84               	incf	4,f
  6534  00BF  3000               	movlw	0
  6535  00C0  0480               	iorwf	0,f
  6536  00C1  0A84               	incf	4,f
  6537  00C2  3080               	movlw	128
  6538  00C3  0480               	iorwf	0,f
  6539  00C4  0A84               	incf	4,f
  6540  00C5  3000               	movlw	0
  6541  00C6  0480               	iorwf	0,f
  6542  00C7  3073               	movlw	low (__div_to_l_@f2| 0)
  6543  00C8  0084               	movwf	4
  6544  00C9  30FF               	movlw	255
  6545  00CA  0580               	andwf	0,f
  6546  00CB  0A84               	incf	4,f
  6547  00CC  30FF               	movlw	255
  6548  00CD  0580               	andwf	0,f
  6549  00CE  0A84               	incf	4,f
  6550  00CF  30FF               	movlw	255
  6551  00D0  0580               	andwf	0,f
  6552  00D1  0A84               	incf	4,f
  6553  00D2  3000               	movlw	0
  6554  00D3  0580               	andwf	0,f
  6555  00D4  3000               	movlw	0
  6556  00D5  00A3               	movwf	__div_to_l_@quot+3
  6557  00D6  3000               	movlw	0
  6558  00D7  00A2               	movwf	__div_to_l_@quot+2
  6559  00D8  3000               	movlw	0
  6560  00D9  00A1               	movwf	__div_to_l_@quot+1
  6561  00DA  3000               	movlw	0
  6562  00DB  00A0               	movwf	__div_to_l_@quot
  6563  00DC  307F               	movlw	127
  6564  00DD  02A5               	subwf	__div_to_l_@exp1,f
  6565  00DE  30A0               	movlw	160
  6566  00DF  0724               	addwf	__div_to_l_@cntr,w
  6567  00E0  00F6               	movwf	??__div_to_l_
  6568  00E1  0876               	movf	??__div_to_l_,w
  6569  00E2  02A5               	subwf	__div_to_l_@exp1,f
  6570  00E3  3020               	movlw	32
  6571  00E4  00F6               	movwf	??__div_to_l_
  6572  00E5  0876               	movf	??__div_to_l_,w
  6573  00E6  00A4               	movwf	__div_to_l_@cntr
  6574  00E7                     l2475:	
  6575  00E7  3001               	movlw	1
  6576  00E8  00F6               	movwf	??__div_to_l_
  6577  00E9                     u3185:	
  6578  00E9  1003               	clrc
  6579  00EA  0DA0               	rlf	__div_to_l_@quot,f
  6580  00EB  0DA1               	rlf	__div_to_l_@quot+1,f
  6581  00EC  0DA2               	rlf	__div_to_l_@quot+2,f
  6582  00ED  0DA3               	rlf	__div_to_l_@quot+3,f
  6583  00EE  0BF6               	decfsz	??__div_to_l_,f
  6584  00EF  28E9               	goto	u3185
  6585  00F0  3073               	movlw	low (__div_to_l_@f2| 0)
  6586  00F1  0084               	movwf	4
  6587  00F2  0800               	movf	0,w
  6588  00F3  00F6               	movwf	??__div_to_l_
  6589  00F4  0A84               	incf	4,f
  6590  00F5  0800               	movf	0,w
  6591  00F6  00F7               	movwf	??__div_to_l_+1
  6592  00F7  0A84               	incf	4,f
  6593  00F8  0800               	movf	0,w
  6594  00F9  00F8               	movwf	??__div_to_l_+2
  6595  00FA  0A84               	incf	4,f
  6596  00FB  0800               	movf	0,w
  6597  00FC  00F9               	movwf	??__div_to_l_+3
  6598  00FD  3070               	movlw	low (__div_to_l_@f1| 0)
  6599  00FE  0084               	movwf	4
  6600  00FF  0800               	movf	0,w
  6601  0100  00FA               	movwf	??__div_to_l_+4
  6602  0101  0A84               	incf	4,f
  6603  0102  0800               	movf	0,w
  6604  0103  00FB               	movwf	??__div_to_l_+5
  6605  0104  0A84               	incf	4,f
  6606  0105  0800               	movf	0,w
  6607  0106  00FC               	movwf	??__div_to_l_+6
  6608  0107  0A84               	incf	4,f
  6609  0108  0800               	movf	0,w
  6610  0109  00FD               	movwf	??__div_to_l_+7
  6611  010A  0879               	movf	??__div_to_l_+3,w
  6612  010B  027D               	subwf	??__div_to_l_+7,w
  6613  010C  1D03               	skipz
  6614  010D  2918               	goto	u3195
  6615  010E  0878               	movf	??__div_to_l_+2,w
  6616  010F  027C               	subwf	??__div_to_l_+6,w
  6617  0110  1D03               	skipz
  6618  0111  2918               	goto	u3195
  6619  0112  0877               	movf	??__div_to_l_+1,w
  6620  0113  027B               	subwf	??__div_to_l_+5,w
  6621  0114  1D03               	skipz
  6622  0115  2918               	goto	u3195
  6623  0116  0876               	movf	??__div_to_l_,w
  6624  0117  027A               	subwf	??__div_to_l_+4,w
  6625  0118                     u3195:	
  6626  0118  1C03               	skipc
  6627  0119  293D               	goto	l540
  6628  011A  3073               	movlw	low (__div_to_l_@f2| 0)
  6629  011B  0084               	movwf	4
  6630  011C  0800               	movf	0,w
  6631  011D  00F6               	movwf	??__div_to_l_
  6632  011E  0A84               	incf	4,f
  6633  011F  0800               	movf	0,w
  6634  0120  00F7               	movwf	??__div_to_l_+1
  6635  0121  0A84               	incf	4,f
  6636  0122  0800               	movf	0,w
  6637  0123  00F8               	movwf	??__div_to_l_+2
  6638  0124  0A84               	incf	4,f
  6639  0125  0800               	movf	0,w
  6640  0126  00F9               	movwf	??__div_to_l_+3
  6641  0127  3070               	movlw	low (__div_to_l_@f1| 0)
  6642  0128  0084               	movwf	4
  6643  0129  0876               	movf	??__div_to_l_,w
  6644  012A  0280               	subwf	0,f
  6645  012B  0A84               	incf	4,f
  6646  012C  0877               	movf	??__div_to_l_+1,w
  6647  012D  1C03               	skipc
  6648  012E  0F77               	incfsz	??__div_to_l_+1,w
  6649  012F  0280               	subwf	0,f
  6650  0130  0A84               	incf	4,f
  6651  0131  0878               	movf	??__div_to_l_+2,w
  6652  0132  1C03               	skipc
  6653  0133  0F78               	incfsz	??__div_to_l_+2,w
  6654  0134  0280               	subwf	0,f
  6655  0135  0A84               	incf	4,f
  6656  0136  0879               	movf	??__div_to_l_+3,w
  6657  0137  1C03               	skipc
  6658  0138  0A79               	incf	??__div_to_l_+3,w
  6659  0139  0280               	subwf	0,f
  6660  013A  3003               	movlw	3
  6661  013B  0284               	subwf	4,f
  6662  013C  1420               	bsf	__div_to_l_@quot,0
  6663  013D                     l540:	
  6664  013D  3070               	movlw	low (__div_to_l_@f1| 0)
  6665  013E  0084               	movwf	4
  6666  013F  1003               	clrc
  6667  0140  0D80               	rlf	0,f
  6668  0141  0A84               	incf	4,f
  6669  0142  0D80               	rlf	0,f
  6670  0143  0A84               	incf	4,f
  6671  0144  0D80               	rlf	0,f
  6672  0145  0A84               	incf	4,f
  6673  0146  0D80               	rlf	0,f
  6674  0147  0384               	decf	4,f
  6675  0148  0384               	decf	4,f
  6676  0149  0384               	decf	4,f
  6677  014A  3001               	movlw	1
  6678  014B  02A4               	subwf	__div_to_l_@cntr,f
  6679  014C  1D03               	btfss	3,2
  6680  014D  28E7               	goto	l2475
  6681  014E  1FA5               	btfss	__div_to_l_@exp1,7
  6682  014F  296E               	goto	l2493
  6683  0150  0825               	movf	__div_to_l_@exp1,w
  6684  0151  3A80               	xorlw	128
  6685  0152  3E9F               	addlw	159
  6686  0153  1803               	skipnc
  6687  0154  295E               	goto	l2491
  6688  0155  3000               	movlw	0
  6689  0156  00F3               	movwf	?__div_to_l_+3
  6690  0157  3000               	movlw	0
  6691  0158  00F2               	movwf	?__div_to_l_+2
  6692  0159  3000               	movlw	0
  6693  015A  00F1               	movwf	?__div_to_l_+1
  6694  015B  3000               	movlw	0
  6695  015C  00F0               	movwf	?__div_to_l_
  6696  015D  0008               	return
  6697  015E                     l2491:	
  6698  015E  3001               	movlw	1
  6699  015F                     u3235:	
  6700  015F  1003               	clrc
  6701  0160  0CA3               	rrf	__div_to_l_@quot+3,f
  6702  0161  0CA2               	rrf	__div_to_l_@quot+2,f
  6703  0162  0CA1               	rrf	__div_to_l_@quot+1,f
  6704  0163  0CA0               	rrf	__div_to_l_@quot,f
  6705  0164  3EFF               	addlw	-1
  6706  0165  1D03               	skipz
  6707  0166  295F               	goto	u3235
  6708  0167  3001               	movlw	1
  6709  0168  00F6               	movwf	??__div_to_l_
  6710  0169  0876               	movf	??__div_to_l_,w
  6711  016A  07A5               	addwf	__div_to_l_@exp1,f
  6712  016B  1903               	btfsc	3,2
  6713  016C  2989               	goto	l2501
  6714  016D  295E               	goto	l2491
  6715  016E                     l2493:	
  6716  016E  3020               	movlw	32
  6717  016F  0225               	subwf	__div_to_l_@exp1,w
  6718  0170  1C03               	skipc
  6719  0171  2986               	goto	l548
  6720  0172  3000               	movlw	0
  6721  0173  00F3               	movwf	?__div_to_l_+3
  6722  0174  3000               	movlw	0
  6723  0175  00F2               	movwf	?__div_to_l_+2
  6724  0176  3000               	movlw	0
  6725  0177  00F1               	movwf	?__div_to_l_+1
  6726  0178  3000               	movlw	0
  6727  0179  00F0               	movwf	?__div_to_l_
  6728  017A  0008               	return
  6729  017B                     l2499:	
  6730  017B  3001               	movlw	1
  6731  017C  00F6               	movwf	??__div_to_l_
  6732  017D                     u3265:	
  6733  017D  1003               	clrc
  6734  017E  0DA0               	rlf	__div_to_l_@quot,f
  6735  017F  0DA1               	rlf	__div_to_l_@quot+1,f
  6736  0180  0DA2               	rlf	__div_to_l_@quot+2,f
  6737  0181  0DA3               	rlf	__div_to_l_@quot+3,f
  6738  0182  0BF6               	decfsz	??__div_to_l_,f
  6739  0183  297D               	goto	u3265
  6740  0184  3001               	movlw	1
  6741  0185  02A5               	subwf	__div_to_l_@exp1,f
  6742  0186                     l548:	
  6743  0186  0825               	movf	__div_to_l_@exp1,w
  6744  0187  1D03               	btfss	3,2
  6745  0188  297B               	goto	l2499
  6746  0189                     l2501:	
  6747  0189  0823               	movf	__div_to_l_@quot+3,w
  6748  018A  00F3               	movwf	?__div_to_l_+3
  6749  018B  0822               	movf	__div_to_l_@quot+2,w
  6750  018C  00F2               	movwf	?__div_to_l_+2
  6751  018D  0821               	movf	__div_to_l_@quot+1,w
  6752  018E  00F1               	movwf	?__div_to_l_+1
  6753  018F  0820               	movf	__div_to_l_@quot,w
  6754  0190  00F0               	movwf	?__div_to_l_
  6755  0191  0008               	return
  6756  0192                     __end_of__div_to_l_:	
  6757                           
  6758                           	psect	text16
  6759  1EFF                     __ptext16:	
  6760 ;; *************** function ___wmul *****************
  6761 ;; Defined at:
  6762 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\Umul16.c"
  6763 ;; Parameters:    Size  Location     Type
  6764 ;;  multiplier      2    0[COMMON] unsigned int 
  6765 ;;  multiplicand    2    2[COMMON] unsigned int 
  6766 ;; Auto vars:     Size  Location     Type
  6767 ;;  product         2    4[COMMON] unsigned int 
  6768 ;; Return value:  Size  Location     Type
  6769 ;;                  2    0[COMMON] unsigned int 
  6770 ;; Registers used:
  6771 ;;		wreg, status,2, status,0
  6772 ;; Tracked objects:
  6773 ;;		On entry : 0/0
  6774 ;;		On exit  : 0/0
  6775 ;;		Unchanged: 0/0
  6776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6777 ;;      Params:         4       0       0       0       0
  6778 ;;      Locals:         2       0       0       0       0
  6779 ;;      Temps:          0       0       0       0       0
  6780 ;;      Totals:         6       0       0       0       0
  6781 ;;Total ram usage:        6 bytes
  6782 ;; Hardware stack levels used:    1
  6783 ;; This function calls:
  6784 ;;		Nothing
  6785 ;; This function is called by:
  6786 ;;		_LCD_Writeuns
  6787 ;;		_LCD_Writesig
  6788 ;;		_sprintf
  6789 ;; This function uses a non-reentrant model
  6790 ;;
  6791                           
  6792                           
  6793                           ;psect for function ___wmul
  6794  1EFF                     ___wmul:	
  6795                           
  6796                           ;incstack = 0
  6797                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6798  1EFF  01F4               	clrf	___wmul@product
  6799  1F00  01F5               	clrf	___wmul@product+1
  6800  1F01                     l2507:	
  6801  1F01  1C70               	btfss	___wmul@multiplier,0
  6802  1F02  2F09               	goto	l382
  6803  1F03  0872               	movf	___wmul@multiplicand,w
  6804  1F04  07F4               	addwf	___wmul@product,f
  6805  1F05  1803               	skipnc
  6806  1F06  0AF5               	incf	___wmul@product+1,f
  6807  1F07  0873               	movf	___wmul@multiplicand+1,w
  6808  1F08  07F5               	addwf	___wmul@product+1,f
  6809  1F09                     l382:	
  6810  1F09  3001               	movlw	1
  6811  1F0A                     u3295:	
  6812  1F0A  1003               	clrc
  6813  1F0B  0DF2               	rlf	___wmul@multiplicand,f
  6814  1F0C  0DF3               	rlf	___wmul@multiplicand+1,f
  6815  1F0D  3EFF               	addlw	-1
  6816  1F0E  1D03               	skipz
  6817  1F0F  2F0A               	goto	u3295
  6818  1F10  3001               	movlw	1
  6819  1F11                     u3305:	
  6820  1F11  1003               	clrc
  6821  1F12  0CF1               	rrf	___wmul@multiplier+1,f
  6822  1F13  0CF0               	rrf	___wmul@multiplier,f
  6823  1F14  3EFF               	addlw	-1
  6824  1F15  1D03               	skipz
  6825  1F16  2F11               	goto	u3305
  6826  1F17  0870               	movf	___wmul@multiplier,w
  6827  1F18  0471               	iorwf	___wmul@multiplier+1,w
  6828  1F19  1D03               	btfss	3,2
  6829  1F1A  2F01               	goto	l2507
  6830  1F1B  0875               	movf	___wmul@product+1,w
  6831  1F1C  00F1               	movwf	?___wmul+1
  6832  1F1D  0874               	movf	___wmul@product,w
  6833  1F1E  00F0               	movwf	?___wmul
  6834  1F1F  0008               	return
  6835  1F20                     __end_of___wmul:	
  6836                           
  6837                           	psect	text17
  6838  1F6A                     __ptext17:	
  6839 ;; *************** function ___lltoft *****************
  6840 ;; Defined at:
  6841 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\lltoft.c"
  6842 ;; Parameters:    Size  Location     Type
  6843 ;;  c               4    8[COMMON] unsigned long 
  6844 ;; Auto vars:     Size  Location     Type
  6845 ;;  exp             1   13[COMMON] unsigned char 
  6846 ;; Return value:  Size  Location     Type
  6847 ;;                  3    8[COMMON] float 
  6848 ;; Registers used:
  6849 ;;		wreg, status,2, status,0, pclath, cstack
  6850 ;; Tracked objects:
  6851 ;;		On entry : 0/0
  6852 ;;		On exit  : 0/0
  6853 ;;		Unchanged: 0/0
  6854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6855 ;;      Params:         4       0       0       0       0
  6856 ;;      Locals:         1       0       0       0       0
  6857 ;;      Temps:          1       0       0       0       0
  6858 ;;      Totals:         6       0       0       0       0
  6859 ;;Total ram usage:        6 bytes
  6860 ;; Hardware stack levels used:    1
  6861 ;; Hardware stack levels required when called:    1
  6862 ;; This function calls:
  6863 ;;		___ftpack
  6864 ;; This function is called by:
  6865 ;;		_sprintf
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           
  6870                           ;psect for function ___lltoft
  6871  1F6A                     ___lltoft:	
  6872                           
  6873                           ;incstack = 0
  6874                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6875  1F6A  308E               	movlw	142
  6876  1F6B  00FC               	movwf	??___lltoft
  6877  1F6C  087C               	movf	??___lltoft,w
  6878  1F6D  00FD               	movwf	___lltoft@exp
  6879  1F6E                     l2645:	
  6880  1F6E  30FF               	movlw	255
  6881  1F6F  057B               	andwf	___lltoft@c+3,w
  6882  1F70  1903               	btfsc	3,2
  6883  1F71  2F80               	goto	l2647
  6884  1F72  3001               	movlw	1
  6885  1F73                     u3625:	
  6886  1F73  1003               	clrc
  6887  1F74  0CFB               	rrf	___lltoft@c+3,f
  6888  1F75  0CFA               	rrf	___lltoft@c+2,f
  6889  1F76  0CF9               	rrf	___lltoft@c+1,f
  6890  1F77  0CF8               	rrf	___lltoft@c,f
  6891  1F78  3EFF               	addlw	-1
  6892  1F79  1D03               	skipz
  6893  1F7A  2F73               	goto	u3625
  6894  1F7B  3001               	movlw	1
  6895  1F7C  00FC               	movwf	??___lltoft
  6896  1F7D  087C               	movf	??___lltoft,w
  6897  1F7E  07FD               	addwf	___lltoft@exp,f
  6898  1F7F  2F6E               	goto	l2645
  6899  1F80                     l2647:	
  6900  1F80  0878               	movf	___lltoft@c,w
  6901  1F81  00F0               	movwf	___ftpack@arg
  6902  1F82  0879               	movf	___lltoft@c+1,w
  6903  1F83  00F1               	movwf	___ftpack@arg+1
  6904  1F84  087A               	movf	___lltoft@c+2,w
  6905  1F85  00F2               	movwf	___ftpack@arg+2
  6906  1F86  087D               	movf	___lltoft@exp,w
  6907  1F87  00FC               	movwf	??___lltoft
  6908  1F88  087C               	movf	??___lltoft,w
  6909  1F89  00F3               	movwf	___ftpack@exp
  6910  1F8A  01F4               	clrf	___ftpack@sign
  6911  1F8B  160A  118A  237E   	fcall	___ftpack
  6912  1F8E  0870               	movf	?___ftpack,w
  6913  1F8F  00F8               	movwf	?___lltoft
  6914  1F90  0871               	movf	?___ftpack+1,w
  6915  1F91  00F9               	movwf	?___lltoft+1
  6916  1F92  0872               	movf	?___ftpack+2,w
  6917  1F93  00FA               	movwf	?___lltoft+2
  6918  1F94  0008               	return
  6919  1F95                     __end_of___lltoft:	
  6920                           
  6921                           	psect	text18
  6922  11BB                     __ptext18:	
  6923 ;; *************** function ___llmod *****************
  6924 ;; Defined at:
  6925 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\llmod.c"
  6926 ;; Parameters:    Size  Location     Type
  6927 ;;  divisor         4    0[COMMON] unsigned long 
  6928 ;;  dividend        4    4[COMMON] unsigned long 
  6929 ;; Auto vars:     Size  Location     Type
  6930 ;;  counter         1    9[COMMON] unsigned char 
  6931 ;; Return value:  Size  Location     Type
  6932 ;;                  4    0[COMMON] unsigned long 
  6933 ;; Registers used:
  6934 ;;		wreg, status,2, status,0
  6935 ;; Tracked objects:
  6936 ;;		On entry : 0/0
  6937 ;;		On exit  : 0/0
  6938 ;;		Unchanged: 0/0
  6939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6940 ;;      Params:         8       0       0       0       0
  6941 ;;      Locals:         1       0       0       0       0
  6942 ;;      Temps:          1       0       0       0       0
  6943 ;;      Totals:        10       0       0       0       0
  6944 ;;Total ram usage:       10 bytes
  6945 ;; Hardware stack levels used:    1
  6946 ;; This function calls:
  6947 ;;		Nothing
  6948 ;; This function is called by:
  6949 ;;		_sprintf
  6950 ;; This function uses a non-reentrant model
  6951 ;;
  6952                           
  6953                           
  6954                           ;psect for function ___llmod
  6955  11BB                     ___llmod:	
  6956                           
  6957                           ;incstack = 0
  6958                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  6959  11BB  0873               	movf	___llmod@divisor+3,w
  6960  11BC  0472               	iorwf	___llmod@divisor+2,w
  6961  11BD  0471               	iorwf	___llmod@divisor+1,w
  6962  11BE  0470               	iorwf	___llmod@divisor,w
  6963  11BF  1903               	skipnz
  6964  11C0  29FE               	goto	l2637
  6965  11C1  01F9               	clrf	___llmod@counter
  6966  11C2  0AF9               	incf	___llmod@counter,f
  6967  11C3                     l2627:	
  6968  11C3  1BF3               	btfsc	___llmod@divisor+3,7
  6969  11C4  29D3               	goto	l2629
  6970  11C5  3001               	movlw	1
  6971  11C6  00F8               	movwf	??___llmod
  6972  11C7                     u3575:	
  6973  11C7  1003               	clrc
  6974  11C8  0DF0               	rlf	___llmod@divisor,f
  6975  11C9  0DF1               	rlf	___llmod@divisor+1,f
  6976  11CA  0DF2               	rlf	___llmod@divisor+2,f
  6977  11CB  0DF3               	rlf	___llmod@divisor+3,f
  6978  11CC  0BF8               	decfsz	??___llmod,f
  6979  11CD  29C7               	goto	u3575
  6980  11CE  3001               	movlw	1
  6981  11CF  00F8               	movwf	??___llmod
  6982  11D0  0878               	movf	??___llmod,w
  6983  11D1  07F9               	addwf	___llmod@counter,f
  6984  11D2  29C3               	goto	l2627
  6985  11D3                     l2629:	
  6986  11D3  0873               	movf	___llmod@divisor+3,w
  6987  11D4  0277               	subwf	___llmod@dividend+3,w
  6988  11D5  1D03               	skipz
  6989  11D6  29E1               	goto	u3595
  6990  11D7  0872               	movf	___llmod@divisor+2,w
  6991  11D8  0276               	subwf	___llmod@dividend+2,w
  6992  11D9  1D03               	skipz
  6993  11DA  29E1               	goto	u3595
  6994  11DB  0871               	movf	___llmod@divisor+1,w
  6995  11DC  0275               	subwf	___llmod@dividend+1,w
  6996  11DD  1D03               	skipz
  6997  11DE  29E1               	goto	u3595
  6998  11DF  0870               	movf	___llmod@divisor,w
  6999  11E0  0274               	subwf	___llmod@dividend,w
  7000  11E1                     u3595:	
  7001  11E1  1C03               	skipc
  7002  11E2  29F1               	goto	l2633
  7003  11E3  0870               	movf	___llmod@divisor,w
  7004  11E4  02F4               	subwf	___llmod@dividend,f
  7005  11E5  0871               	movf	___llmod@divisor+1,w
  7006  11E6  1C03               	skipc
  7007  11E7  0F71               	incfsz	___llmod@divisor+1,w
  7008  11E8  02F5               	subwf	___llmod@dividend+1,f
  7009  11E9  0872               	movf	___llmod@divisor+2,w
  7010  11EA  1C03               	skipc
  7011  11EB  0F72               	incfsz	___llmod@divisor+2,w
  7012  11EC  02F6               	subwf	___llmod@dividend+2,f
  7013  11ED  0873               	movf	___llmod@divisor+3,w
  7014  11EE  1C03               	skipc
  7015  11EF  0F73               	incfsz	___llmod@divisor+3,w
  7016  11F0  02F7               	subwf	___llmod@dividend+3,f
  7017  11F1                     l2633:	
  7018  11F1  3001               	movlw	1
  7019  11F2                     u3605:	
  7020  11F2  1003               	clrc
  7021  11F3  0CF3               	rrf	___llmod@divisor+3,f
  7022  11F4  0CF2               	rrf	___llmod@divisor+2,f
  7023  11F5  0CF1               	rrf	___llmod@divisor+1,f
  7024  11F6  0CF0               	rrf	___llmod@divisor,f
  7025  11F7  3EFF               	addlw	-1
  7026  11F8  1D03               	skipz
  7027  11F9  29F2               	goto	u3605
  7028  11FA  3001               	movlw	1
  7029  11FB  02F9               	subwf	___llmod@counter,f
  7030  11FC  1D03               	btfss	3,2
  7031  11FD  29D3               	goto	l2629
  7032  11FE                     l2637:	
  7033  11FE  0877               	movf	___llmod@dividend+3,w
  7034  11FF  00F3               	movwf	?___llmod+3
  7035  1200  0876               	movf	___llmod@dividend+2,w
  7036  1201  00F2               	movwf	?___llmod+2
  7037  1202  0875               	movf	___llmod@dividend+1,w
  7038  1203  00F1               	movwf	?___llmod+1
  7039  1204  0874               	movf	___llmod@dividend,w
  7040  1205  00F0               	movwf	?___llmod
  7041  1206  0008               	return
  7042  1207                     __end_of___llmod:	
  7043                           
  7044                           	psect	text19
  7045  12B5                     __ptext19:	
  7046 ;; *************** function ___lldiv *****************
  7047 ;; Defined at:
  7048 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\lldiv.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;  divisor         4    0[COMMON] unsigned long 
  7051 ;;  dividend        4    4[COMMON] unsigned long 
  7052 ;; Auto vars:     Size  Location     Type
  7053 ;;  quotient        4    9[COMMON] unsigned long 
  7054 ;;  counter         1   13[COMMON] unsigned char 
  7055 ;; Return value:  Size  Location     Type
  7056 ;;                  4    0[COMMON] unsigned long 
  7057 ;; Registers used:
  7058 ;;		wreg, status,2, status,0
  7059 ;; Tracked objects:
  7060 ;;		On entry : 0/0
  7061 ;;		On exit  : 0/0
  7062 ;;		Unchanged: 0/0
  7063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7064 ;;      Params:         8       0       0       0       0
  7065 ;;      Locals:         5       0       0       0       0
  7066 ;;      Temps:          1       0       0       0       0
  7067 ;;      Totals:        14       0       0       0       0
  7068 ;;Total ram usage:       14 bytes
  7069 ;; Hardware stack levels used:    1
  7070 ;; This function calls:
  7071 ;;		Nothing
  7072 ;; This function is called by:
  7073 ;;		_sprintf
  7074 ;; This function uses a non-reentrant model
  7075 ;;
  7076                           
  7077                           
  7078                           ;psect for function ___lldiv
  7079  12B5                     ___lldiv:	
  7080                           
  7081                           ;incstack = 0
  7082                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7083  12B5  3000               	movlw	0
  7084  12B6  00FC               	movwf	___lldiv@quotient+3
  7085  12B7  3000               	movlw	0
  7086  12B8  00FB               	movwf	___lldiv@quotient+2
  7087  12B9  3000               	movlw	0
  7088  12BA  00FA               	movwf	___lldiv@quotient+1
  7089  12BB  3000               	movlw	0
  7090  12BC  00F9               	movwf	___lldiv@quotient
  7091  12BD  0873               	movf	___lldiv@divisor+3,w
  7092  12BE  0472               	iorwf	___lldiv@divisor+2,w
  7093  12BF  0471               	iorwf	___lldiv@divisor+1,w
  7094  12C0  0470               	iorwf	___lldiv@divisor,w
  7095  12C1  1903               	skipnz
  7096  12C2  2B0A               	goto	l2617
  7097  12C3  01FD               	clrf	___lldiv@counter
  7098  12C4  0AFD               	incf	___lldiv@counter,f
  7099  12C5                     l2603:	
  7100  12C5  1BF3               	btfsc	___lldiv@divisor+3,7
  7101  12C6  2AD5               	goto	l2605
  7102  12C7  3001               	movlw	1
  7103  12C8  00F8               	movwf	??___lldiv
  7104  12C9                     u3505:	
  7105  12C9  1003               	clrc
  7106  12CA  0DF0               	rlf	___lldiv@divisor,f
  7107  12CB  0DF1               	rlf	___lldiv@divisor+1,f
  7108  12CC  0DF2               	rlf	___lldiv@divisor+2,f
  7109  12CD  0DF3               	rlf	___lldiv@divisor+3,f
  7110  12CE  0BF8               	decfsz	??___lldiv,f
  7111  12CF  2AC9               	goto	u3505
  7112  12D0  3001               	movlw	1
  7113  12D1  00F8               	movwf	??___lldiv
  7114  12D2  0878               	movf	??___lldiv,w
  7115  12D3  07FD               	addwf	___lldiv@counter,f
  7116  12D4  2AC5               	goto	l2603
  7117  12D5                     l2605:	
  7118  12D5  3001               	movlw	1
  7119  12D6  00F8               	movwf	??___lldiv
  7120  12D7                     u3525:	
  7121  12D7  1003               	clrc
  7122  12D8  0DF9               	rlf	___lldiv@quotient,f
  7123  12D9  0DFA               	rlf	___lldiv@quotient+1,f
  7124  12DA  0DFB               	rlf	___lldiv@quotient+2,f
  7125  12DB  0DFC               	rlf	___lldiv@quotient+3,f
  7126  12DC  0BF8               	decfsz	??___lldiv,f
  7127  12DD  2AD7               	goto	u3525
  7128  12DE  0873               	movf	___lldiv@divisor+3,w
  7129  12DF  0277               	subwf	___lldiv@dividend+3,w
  7130  12E0  1D03               	skipz
  7131  12E1  2AEC               	goto	u3535
  7132  12E2  0872               	movf	___lldiv@divisor+2,w
  7133  12E3  0276               	subwf	___lldiv@dividend+2,w
  7134  12E4  1D03               	skipz
  7135  12E5  2AEC               	goto	u3535
  7136  12E6  0871               	movf	___lldiv@divisor+1,w
  7137  12E7  0275               	subwf	___lldiv@dividend+1,w
  7138  12E8  1D03               	skipz
  7139  12E9  2AEC               	goto	u3535
  7140  12EA  0870               	movf	___lldiv@divisor,w
  7141  12EB  0274               	subwf	___lldiv@dividend,w
  7142  12EC                     u3535:	
  7143  12EC  1C03               	skipc
  7144  12ED  2AFD               	goto	l2613
  7145  12EE  0870               	movf	___lldiv@divisor,w
  7146  12EF  02F4               	subwf	___lldiv@dividend,f
  7147  12F0  0871               	movf	___lldiv@divisor+1,w
  7148  12F1  1C03               	skipc
  7149  12F2  0F71               	incfsz	___lldiv@divisor+1,w
  7150  12F3  02F5               	subwf	___lldiv@dividend+1,f
  7151  12F4  0872               	movf	___lldiv@divisor+2,w
  7152  12F5  1C03               	skipc
  7153  12F6  0F72               	incfsz	___lldiv@divisor+2,w
  7154  12F7  02F6               	subwf	___lldiv@dividend+2,f
  7155  12F8  0873               	movf	___lldiv@divisor+3,w
  7156  12F9  1C03               	skipc
  7157  12FA  0F73               	incfsz	___lldiv@divisor+3,w
  7158  12FB  02F7               	subwf	___lldiv@dividend+3,f
  7159  12FC  1479               	bsf	___lldiv@quotient,0
  7160  12FD                     l2613:	
  7161  12FD  3001               	movlw	1
  7162  12FE                     u3545:	
  7163  12FE  1003               	clrc
  7164  12FF  0CF3               	rrf	___lldiv@divisor+3,f
  7165  1300  0CF2               	rrf	___lldiv@divisor+2,f
  7166  1301  0CF1               	rrf	___lldiv@divisor+1,f
  7167  1302  0CF0               	rrf	___lldiv@divisor,f
  7168  1303  3EFF               	addlw	-1
  7169  1304  1D03               	skipz
  7170  1305  2AFE               	goto	u3545
  7171  1306  3001               	movlw	1
  7172  1307  02FD               	subwf	___lldiv@counter,f
  7173  1308  1D03               	btfss	3,2
  7174  1309  2AD5               	goto	l2605
  7175  130A                     l2617:	
  7176  130A  087C               	movf	___lldiv@quotient+3,w
  7177  130B  00F3               	movwf	?___lldiv+3
  7178  130C  087B               	movf	___lldiv@quotient+2,w
  7179  130D  00F2               	movwf	?___lldiv+2
  7180  130E  087A               	movf	___lldiv@quotient+1,w
  7181  130F  00F1               	movwf	?___lldiv+1
  7182  1310  0879               	movf	___lldiv@quotient,w
  7183  1311  00F0               	movwf	?___lldiv
  7184  1312  0008               	return
  7185  1313                     __end_of___lldiv:	
  7186                           
  7187                           	psect	text20
  7188  14D3                     __ptext20:	
  7189 ;; *************** function ___fttol *****************
  7190 ;; Defined at:
  7191 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\fttol.c"
  7192 ;; Parameters:    Size  Location     Type
  7193 ;;  f1              3   32[BANK0 ] float 
  7194 ;; Auto vars:     Size  Location     Type
  7195 ;;  lval            4   41[BANK0 ] unsigned long 
  7196 ;;  exp1            1   45[BANK0 ] unsigned char 
  7197 ;;  sign1           1   40[BANK0 ] unsigned char 
  7198 ;; Return value:  Size  Location     Type
  7199 ;;                  4   32[BANK0 ] long 
  7200 ;; Registers used:
  7201 ;;		wreg, status,2, status,0
  7202 ;; Tracked objects:
  7203 ;;		On entry : 0/0
  7204 ;;		On exit  : 0/0
  7205 ;;		Unchanged: 0/0
  7206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7207 ;;      Params:         0       4       0       0       0
  7208 ;;      Locals:         0       6       0       0       0
  7209 ;;      Temps:          0       4       0       0       0
  7210 ;;      Totals:         0      14       0       0       0
  7211 ;;Total ram usage:       14 bytes
  7212 ;; Hardware stack levels used:    1
  7213 ;; This function calls:
  7214 ;;		Nothing
  7215 ;; This function is called by:
  7216 ;;		_sprintf
  7217 ;; This function uses a non-reentrant model
  7218 ;;
  7219                           
  7220                           
  7221                           ;psect for function ___fttol
  7222  14D3                     ___fttol:	
  7223                           
  7224                           ;incstack = 0
  7225                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  7226  14D3  1283               	bcf	3,5	;RP0=0, select bank0
  7227  14D4  1303               	bcf	3,6	;RP1=0, select bank0
  7228  14D5  0840               	movf	___fttol@f1,w
  7229  14D6  00C4               	movwf	??___fttol
  7230  14D7  0841               	movf	___fttol@f1+1,w
  7231  14D8  00C5               	movwf	??___fttol+1
  7232  14D9  0842               	movf	___fttol@f1+2,w
  7233  14DA  00C6               	movwf	??___fttol+2
  7234  14DB  1003               	clrc
  7235  14DC  0D45               	rlf	??___fttol+1,w
  7236  14DD  0D46               	rlf	??___fttol+2,w
  7237  14DE  00C7               	movwf	??___fttol+3
  7238  14DF  0847               	movf	??___fttol+3,w
  7239  14E0  00CD               	movwf	___fttol@exp1
  7240  14E1  084D               	movf	___fttol@exp1,w
  7241  14E2  1D03               	btfss	3,2
  7242  14E3  2CED               	goto	l2561
  7243  14E4  3000               	movlw	0
  7244  14E5  00C3               	movwf	?___fttol+3
  7245  14E6  3000               	movlw	0
  7246  14E7  00C2               	movwf	?___fttol+2
  7247  14E8  3000               	movlw	0
  7248  14E9  00C1               	movwf	?___fttol+1
  7249  14EA  3000               	movlw	0
  7250  14EB  00C0               	movwf	?___fttol
  7251  14EC  0008               	return
  7252  14ED                     l2561:	
  7253  14ED  0840               	movf	___fttol@f1,w
  7254  14EE  00C4               	movwf	??___fttol
  7255  14EF  0841               	movf	___fttol@f1+1,w
  7256  14F0  00C5               	movwf	??___fttol+1
  7257  14F1  0842               	movf	___fttol@f1+2,w
  7258  14F2  00C6               	movwf	??___fttol+2
  7259  14F3  3017               	movlw	23
  7260  14F4                     u3405:	
  7261  14F4  1003               	clrc
  7262  14F5  0CC6               	rrf	??___fttol+2,f
  7263  14F6  0CC5               	rrf	??___fttol+1,f
  7264  14F7  0CC4               	rrf	??___fttol,f
  7265  14F8  3EFF               	addlw	-1
  7266  14F9  1D03               	skipz
  7267  14FA  2CF4               	goto	u3405
  7268  14FB  0844               	movf	??___fttol,w
  7269  14FC  00C7               	movwf	??___fttol+3
  7270  14FD  0847               	movf	??___fttol+3,w
  7271  14FE  00C8               	movwf	___fttol@sign1
  7272  14FF  17C1               	bsf	___fttol@f1+1,7
  7273  1500  30FF               	movlw	255
  7274  1501  05C0               	andwf	___fttol@f1,f
  7275  1502  30FF               	movlw	255
  7276  1503  05C1               	andwf	___fttol@f1+1,f
  7277  1504  3000               	movlw	0
  7278  1505  05C2               	andwf	___fttol@f1+2,f
  7279  1506  0840               	movf	___fttol@f1,w
  7280  1507  00C9               	movwf	___fttol@lval
  7281  1508  0841               	movf	___fttol@f1+1,w
  7282  1509  00CA               	movwf	___fttol@lval+1
  7283  150A  0842               	movf	___fttol@f1+2,w
  7284  150B  00CB               	movwf	___fttol@lval+2
  7285  150C  01CC               	clrf	___fttol@lval+3
  7286  150D  308E               	movlw	142
  7287  150E  02CD               	subwf	___fttol@exp1,f
  7288  150F  1FCD               	btfss	___fttol@exp1,7
  7289  1510  2D2F               	goto	l2581
  7290  1511  084D               	movf	___fttol@exp1,w
  7291  1512  3A80               	xorlw	128
  7292  1513  3E8F               	addlw	143
  7293  1514  1803               	skipnc
  7294  1515  2D1F               	goto	l2579
  7295  1516  3000               	movlw	0
  7296  1517  00C3               	movwf	?___fttol+3
  7297  1518  3000               	movlw	0
  7298  1519  00C2               	movwf	?___fttol+2
  7299  151A  3000               	movlw	0
  7300  151B  00C1               	movwf	?___fttol+1
  7301  151C  3000               	movlw	0
  7302  151D  00C0               	movwf	?___fttol
  7303  151E  0008               	return
  7304  151F                     l2579:	
  7305  151F  3001               	movlw	1
  7306  1520                     u3435:	
  7307  1520  1003               	clrc
  7308  1521  0CCC               	rrf	___fttol@lval+3,f
  7309  1522  0CCB               	rrf	___fttol@lval+2,f
  7310  1523  0CCA               	rrf	___fttol@lval+1,f
  7311  1524  0CC9               	rrf	___fttol@lval,f
  7312  1525  3EFF               	addlw	-1
  7313  1526  1D03               	skipz
  7314  1527  2D20               	goto	u3435
  7315  1528  3001               	movlw	1
  7316  1529  00C4               	movwf	??___fttol
  7317  152A  0844               	movf	??___fttol,w
  7318  152B  07CD               	addwf	___fttol@exp1,f
  7319  152C  1903               	btfsc	3,2
  7320  152D  2D4A               	goto	l2589
  7321  152E  2D1F               	goto	l2579
  7322  152F                     l2581:	
  7323  152F  3018               	movlw	24
  7324  1530  024D               	subwf	___fttol@exp1,w
  7325  1531  1C03               	skipc
  7326  1532  2D47               	goto	l668
  7327  1533  3000               	movlw	0
  7328  1534  00C3               	movwf	?___fttol+3
  7329  1535  3000               	movlw	0
  7330  1536  00C2               	movwf	?___fttol+2
  7331  1537  3000               	movlw	0
  7332  1538  00C1               	movwf	?___fttol+1
  7333  1539  3000               	movlw	0
  7334  153A  00C0               	movwf	?___fttol
  7335  153B  0008               	return
  7336  153C                     l2587:	
  7337  153C  3001               	movlw	1
  7338  153D  00C4               	movwf	??___fttol
  7339  153E                     u3465:	
  7340  153E  1003               	clrc
  7341  153F  0DC9               	rlf	___fttol@lval,f
  7342  1540  0DCA               	rlf	___fttol@lval+1,f
  7343  1541  0DCB               	rlf	___fttol@lval+2,f
  7344  1542  0DCC               	rlf	___fttol@lval+3,f
  7345  1543  0BC4               	decfsz	??___fttol,f
  7346  1544  2D3E               	goto	u3465
  7347  1545  3001               	movlw	1
  7348  1546  02CD               	subwf	___fttol@exp1,f
  7349  1547                     l668:	
  7350  1547  084D               	movf	___fttol@exp1,w
  7351  1548  1D03               	btfss	3,2
  7352  1549  2D3C               	goto	l2587
  7353  154A                     l2589:	
  7354  154A  0848               	movf	___fttol@sign1,w
  7355  154B  1903               	btfsc	3,2
  7356  154C  2D58               	goto	l2593
  7357  154D  09C9               	comf	___fttol@lval,f
  7358  154E  09CA               	comf	___fttol@lval+1,f
  7359  154F  09CB               	comf	___fttol@lval+2,f
  7360  1550  09CC               	comf	___fttol@lval+3,f
  7361  1551  0AC9               	incf	___fttol@lval,f
  7362  1552  1903               	skipnz
  7363  1553  0ACA               	incf	___fttol@lval+1,f
  7364  1554  1903               	skipnz
  7365  1555  0ACB               	incf	___fttol@lval+2,f
  7366  1556  1903               	skipnz
  7367  1557  0ACC               	incf	___fttol@lval+3,f
  7368  1558                     l2593:	
  7369  1558  084C               	movf	___fttol@lval+3,w
  7370  1559  00C3               	movwf	?___fttol+3
  7371  155A  084B               	movf	___fttol@lval+2,w
  7372  155B  00C2               	movwf	?___fttol+2
  7373  155C  084A               	movf	___fttol@lval+1,w
  7374  155D  00C1               	movwf	?___fttol+1
  7375  155E  0849               	movf	___fttol@lval,w
  7376  155F  00C0               	movwf	?___fttol
  7377  1560  0008               	return
  7378  1561                     __end_of___fttol:	
  7379                           
  7380                           	psect	text21
  7381  1EDE                     __ptext21:	
  7382 ;; *************** function ___ftsub *****************
  7383 ;; Defined at:
  7384 ;;		line 18 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\ftsub.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;  f2              3   52[BANK0 ] float 
  7387 ;;  f1              3   55[BANK0 ] float 
  7388 ;; Auto vars:     Size  Location     Type
  7389 ;;		None
  7390 ;; Return value:  Size  Location     Type
  7391 ;;                  3   52[BANK0 ] float 
  7392 ;; Registers used:
  7393 ;;		wreg, status,2, status,0, pclath, cstack
  7394 ;; Tracked objects:
  7395 ;;		On entry : 0/0
  7396 ;;		On exit  : 0/0
  7397 ;;		Unchanged: 0/0
  7398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7399 ;;      Params:         0       6       0       0       0
  7400 ;;      Locals:         0       0       0       0       0
  7401 ;;      Temps:          0       0       0       0       0
  7402 ;;      Totals:         0       6       0       0       0
  7403 ;;Total ram usage:        6 bytes
  7404 ;; Hardware stack levels used:    1
  7405 ;; Hardware stack levels required when called:    2
  7406 ;; This function calls:
  7407 ;;		___ftadd
  7408 ;; This function is called by:
  7409 ;;		_sprintf
  7410 ;; This function uses a non-reentrant model
  7411 ;;
  7412                           
  7413                           
  7414                           ;psect for function ___ftsub
  7415  1EDE                     ___ftsub:	
  7416                           
  7417                           ;incstack = 0
  7418                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  7419  1EDE  1283               	bcf	3,5	;RP0=0, select bank0
  7420  1EDF  1303               	bcf	3,6	;RP1=0, select bank0
  7421  1EE0  0856               	movf	___ftsub@f2+2,w
  7422  1EE1  0455               	iorwf	___ftsub@f2+1,w
  7423  1EE2  0454               	iorwf	___ftsub@f2,w
  7424  1EE3  1903               	skipnz
  7425  1EE4  2EE7               	goto	l2551
  7426  1EE5  3080               	movlw	128
  7427  1EE6  06D6               	xorwf	___ftsub@f2+2,f
  7428  1EE7                     l2551:	
  7429  1EE7  0857               	movf	___ftsub@f1,w
  7430  1EE8  00C7               	movwf	___ftadd@f1
  7431  1EE9  0858               	movf	___ftsub@f1+1,w
  7432  1EEA  00C8               	movwf	___ftadd@f1+1
  7433  1EEB  0859               	movf	___ftsub@f1+2,w
  7434  1EEC  00C9               	movwf	___ftadd@f1+2
  7435  1EED  0854               	movf	___ftsub@f2,w
  7436  1EEE  00CA               	movwf	___ftadd@f2
  7437  1EEF  0855               	movf	___ftsub@f2+1,w
  7438  1EF0  00CB               	movwf	___ftadd@f2+1
  7439  1EF1  0856               	movf	___ftsub@f2+2,w
  7440  1EF2  00CC               	movwf	___ftadd@f2+2
  7441  1EF3  160A  118A  26F7   	fcall	___ftadd
  7442  1EF6  1283               	bcf	3,5	;RP0=0, select bank0
  7443  1EF7  1303               	bcf	3,6	;RP1=0, select bank0
  7444  1EF8  0847               	movf	?___ftadd,w
  7445  1EF9  00D4               	movwf	?___ftsub
  7446  1EFA  0848               	movf	?___ftadd+1,w
  7447  1EFB  00D5               	movwf	?___ftsub+1
  7448  1EFC  0849               	movf	?___ftadd+2,w
  7449  1EFD  00D6               	movwf	?___ftsub+2
  7450  1EFE  0008               	return
  7451  1EFF                     __end_of___ftsub:	
  7452                           
  7453                           	psect	text22
  7454  16F7                     __ptext22:	
  7455 ;; *************** function ___ftadd *****************
  7456 ;; Defined at:
  7457 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\ftadd.c"
  7458 ;; Parameters:    Size  Location     Type
  7459 ;;  f1              3   39[BANK0 ] float 
  7460 ;;  f2              3   42[BANK0 ] float 
  7461 ;; Auto vars:     Size  Location     Type
  7462 ;;  exp1            1   51[BANK0 ] unsigned char 
  7463 ;;  exp2            1   50[BANK0 ] unsigned char 
  7464 ;;  sign            1   49[BANK0 ] unsigned char 
  7465 ;; Return value:  Size  Location     Type
  7466 ;;                  3   39[BANK0 ] float 
  7467 ;; Registers used:
  7468 ;;		wreg, status,2, status,0, pclath, cstack
  7469 ;; Tracked objects:
  7470 ;;		On entry : 0/0
  7471 ;;		On exit  : 0/0
  7472 ;;		Unchanged: 0/0
  7473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7474 ;;      Params:         0       6       0       0       0
  7475 ;;      Locals:         0       3       0       0       0
  7476 ;;      Temps:          0       4       0       0       0
  7477 ;;      Totals:         0      13       0       0       0
  7478 ;;Total ram usage:       13 bytes
  7479 ;; Hardware stack levels used:    1
  7480 ;; Hardware stack levels required when called:    1
  7481 ;; This function calls:
  7482 ;;		___ftpack
  7483 ;; This function is called by:
  7484 ;;		_sprintf
  7485 ;;		___ftsub
  7486 ;; This function uses a non-reentrant model
  7487 ;;
  7488                           
  7489                           
  7490                           ;psect for function ___ftadd
  7491  16F7                     ___ftadd:	
  7492                           
  7493                           ;incstack = 0
  7494                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  7495  16F7  1283               	bcf	3,5	;RP0=0, select bank0
  7496  16F8  1303               	bcf	3,6	;RP1=0, select bank0
  7497  16F9  0847               	movf	___ftadd@f1,w
  7498  16FA  00CD               	movwf	??___ftadd
  7499  16FB  0848               	movf	___ftadd@f1+1,w
  7500  16FC  00CE               	movwf	??___ftadd+1
  7501  16FD  0849               	movf	___ftadd@f1+2,w
  7502  16FE  00CF               	movwf	??___ftadd+2
  7503  16FF  1003               	clrc
  7504  1700  0D4E               	rlf	??___ftadd+1,w
  7505  1701  0D4F               	rlf	??___ftadd+2,w
  7506  1702  00D0               	movwf	??___ftadd+3
  7507  1703  0850               	movf	??___ftadd+3,w
  7508  1704  00D3               	movwf	___ftadd@exp1
  7509  1705  084A               	movf	___ftadd@f2,w
  7510  1706  00CD               	movwf	??___ftadd
  7511  1707  084B               	movf	___ftadd@f2+1,w
  7512  1708  00CE               	movwf	??___ftadd+1
  7513  1709  084C               	movf	___ftadd@f2+2,w
  7514  170A  00CF               	movwf	??___ftadd+2
  7515  170B  1003               	clrc
  7516  170C  0D4E               	rlf	??___ftadd+1,w
  7517  170D  0D4F               	rlf	??___ftadd+2,w
  7518  170E  00D0               	movwf	??___ftadd+3
  7519  170F  0850               	movf	??___ftadd+3,w
  7520  1710  00D2               	movwf	___ftadd@exp2
  7521  1711  0853               	movf	___ftadd@exp1,w
  7522  1712  1903               	btfsc	3,2
  7523  1713  2F20               	goto	l2209
  7524  1714  0852               	movf	___ftadd@exp2,w
  7525  1715  0253               	subwf	___ftadd@exp1,w
  7526  1716  1803               	skipnc
  7527  1717  2F27               	goto	l2213
  7528  1718  0353               	decf	___ftadd@exp1,w
  7529  1719  3AFF               	xorlw	255
  7530  171A  0752               	addwf	___ftadd@exp2,w
  7531  171B  00CD               	movwf	??___ftadd
  7532  171C  3019               	movlw	25
  7533  171D  024D               	subwf	??___ftadd,w
  7534  171E  1C03               	skipc
  7535  171F  2F27               	goto	l2213
  7536  1720                     l2209:	
  7537  1720  084A               	movf	___ftadd@f2,w
  7538  1721  00C7               	movwf	?___ftadd
  7539  1722  084B               	movf	___ftadd@f2+1,w
  7540  1723  00C8               	movwf	?___ftadd+1
  7541  1724  084C               	movf	___ftadd@f2+2,w
  7542  1725  00C9               	movwf	?___ftadd+2
  7543  1726  0008               	return
  7544  1727                     l2213:	
  7545  1727  0852               	movf	___ftadd@exp2,w
  7546  1728  1903               	btfsc	3,2
  7547  1729  0008               	return
  7548  172A  0853               	movf	___ftadd@exp1,w
  7549  172B  0252               	subwf	___ftadd@exp2,w
  7550  172C  1803               	skipnc
  7551  172D  2F36               	goto	l2219
  7552  172E  0352               	decf	___ftadd@exp2,w
  7553  172F  3AFF               	xorlw	255
  7554  1730  0753               	addwf	___ftadd@exp1,w
  7555  1731  00CD               	movwf	??___ftadd
  7556  1732  3019               	movlw	25
  7557  1733  024D               	subwf	??___ftadd,w
  7558  1734  1803               	btfsc	3,0
  7559  1735  0008               	return
  7560  1736                     l2219:	
  7561  1736  3006               	movlw	6
  7562  1737  00CD               	movwf	??___ftadd
  7563  1738  084D               	movf	??___ftadd,w
  7564  1739  00D1               	movwf	___ftadd@sign
  7565  173A  1BC9               	btfsc	___ftadd@f1+2,7
  7566  173B  17D1               	bsf	___ftadd@sign,7
  7567  173C  1BCC               	btfsc	___ftadd@f2+2,7
  7568  173D  1751               	bsf	___ftadd@sign,6
  7569  173E  17C8               	bsf	___ftadd@f1+1,7
  7570  173F  30FF               	movlw	255
  7571  1740  05C7               	andwf	___ftadd@f1,f
  7572  1741  30FF               	movlw	255
  7573  1742  05C8               	andwf	___ftadd@f1+1,f
  7574  1743  3000               	movlw	0
  7575  1744  05C9               	andwf	___ftadd@f1+2,f
  7576  1745  17CB               	bsf	___ftadd@f2+1,7
  7577  1746  30FF               	movlw	255
  7578  1747  05CA               	andwf	___ftadd@f2,f
  7579  1748  30FF               	movlw	255
  7580  1749  05CB               	andwf	___ftadd@f2+1,f
  7581  174A  3000               	movlw	0
  7582  174B  05CC               	andwf	___ftadd@f2+2,f
  7583  174C  0852               	movf	___ftadd@exp2,w
  7584  174D  0253               	subwf	___ftadd@exp1,w
  7585  174E  1803               	skipnc
  7586  174F  2F76               	goto	l2241
  7587  1750                     l2231:	
  7588  1750  3001               	movlw	1
  7589  1751                     u2655:	
  7590  1751  1003               	clrc
  7591  1752  0DCA               	rlf	___ftadd@f2,f
  7592  1753  0DCB               	rlf	___ftadd@f2+1,f
  7593  1754  0DCC               	rlf	___ftadd@f2+2,f
  7594  1755  3EFF               	addlw	-1
  7595  1756  1D03               	skipz
  7596  1757  2F51               	goto	u2655
  7597  1758  3001               	movlw	1
  7598  1759  02D2               	subwf	___ftadd@exp2,f
  7599  175A  0852               	movf	___ftadd@exp2,w
  7600  175B  0653               	xorwf	___ftadd@exp1,w
  7601  175C  1903               	skipnz
  7602  175D  2F71               	goto	l2239
  7603  175E  3001               	movlw	1
  7604  175F  02D1               	subwf	___ftadd@sign,f
  7605  1760  0851               	movf	___ftadd@sign,w
  7606  1761  3907               	andlw	7
  7607  1762  1903               	btfsc	3,2
  7608  1763  2F71               	goto	l2239
  7609  1764  2F50               	goto	l2231
  7610  1765                     l2237:	
  7611  1765  3001               	movlw	1
  7612  1766                     u2685:	
  7613  1766  1003               	clrc
  7614  1767  0CC9               	rrf	___ftadd@f1+2,f
  7615  1768  0CC8               	rrf	___ftadd@f1+1,f
  7616  1769  0CC7               	rrf	___ftadd@f1,f
  7617  176A  3EFF               	addlw	-1
  7618  176B  1D03               	skipz
  7619  176C  2F66               	goto	u2685
  7620  176D  3001               	movlw	1
  7621  176E  00CD               	movwf	??___ftadd
  7622  176F  084D               	movf	??___ftadd,w
  7623  1770  07D3               	addwf	___ftadd@exp1,f
  7624  1771                     l2239:	
  7625  1771  0853               	movf	___ftadd@exp1,w
  7626  1772  0652               	xorwf	___ftadd@exp2,w
  7627  1773  1903               	btfsc	3,2
  7628  1774  2F9F               	goto	l591
  7629  1775  2F65               	goto	l2237
  7630  1776                     l2241:	
  7631  1776  0853               	movf	___ftadd@exp1,w
  7632  1777  0252               	subwf	___ftadd@exp2,w
  7633  1778  1803               	skipnc
  7634  1779  2F9F               	goto	l591
  7635  177A                     l2243:	
  7636  177A  3001               	movlw	1
  7637  177B                     u2715:	
  7638  177B  1003               	clrc
  7639  177C  0DC7               	rlf	___ftadd@f1,f
  7640  177D  0DC8               	rlf	___ftadd@f1+1,f
  7641  177E  0DC9               	rlf	___ftadd@f1+2,f
  7642  177F  3EFF               	addlw	-1
  7643  1780  1D03               	skipz
  7644  1781  2F7B               	goto	u2715
  7645  1782  3001               	movlw	1
  7646  1783  02D3               	subwf	___ftadd@exp1,f
  7647  1784  0852               	movf	___ftadd@exp2,w
  7648  1785  0653               	xorwf	___ftadd@exp1,w
  7649  1786  1903               	skipnz
  7650  1787  2F9B               	goto	l2251
  7651  1788  3001               	movlw	1
  7652  1789  02D1               	subwf	___ftadd@sign,f
  7653  178A  0851               	movf	___ftadd@sign,w
  7654  178B  3907               	andlw	7
  7655  178C  1903               	btfsc	3,2
  7656  178D  2F9B               	goto	l2251
  7657  178E  2F7A               	goto	l2243
  7658  178F                     l2249:	
  7659  178F  3001               	movlw	1
  7660  1790                     u2745:	
  7661  1790  1003               	clrc
  7662  1791  0CCC               	rrf	___ftadd@f2+2,f
  7663  1792  0CCB               	rrf	___ftadd@f2+1,f
  7664  1793  0CCA               	rrf	___ftadd@f2,f
  7665  1794  3EFF               	addlw	-1
  7666  1795  1D03               	skipz
  7667  1796  2F90               	goto	u2745
  7668  1797  3001               	movlw	1
  7669  1798  00CD               	movwf	??___ftadd
  7670  1799  084D               	movf	??___ftadd,w
  7671  179A  07D2               	addwf	___ftadd@exp2,f
  7672  179B                     l2251:	
  7673  179B  0853               	movf	___ftadd@exp1,w
  7674  179C  0652               	xorwf	___ftadd@exp2,w
  7675  179D  1D03               	skipz
  7676  179E  2F8F               	goto	l2249
  7677  179F                     l591:	
  7678  179F  1FD1               	btfss	___ftadd@sign,7
  7679  17A0  2FB1               	goto	l2255
  7680  17A1  30FF               	movlw	255
  7681  17A2  06C7               	xorwf	___ftadd@f1,f
  7682  17A3  30FF               	movlw	255
  7683  17A4  06C8               	xorwf	___ftadd@f1+1,f
  7684  17A5  30FF               	movlw	255
  7685  17A6  06C9               	xorwf	___ftadd@f1+2,f
  7686  17A7  3001               	movlw	1
  7687  17A8  07C7               	addwf	___ftadd@f1,f
  7688  17A9  3000               	movlw	0
  7689  17AA  1803               	skipnc
  7690  17AB  3001               	movlw	1
  7691  17AC  07C8               	addwf	___ftadd@f1+1,f
  7692  17AD  3000               	movlw	0
  7693  17AE  1803               	skipnc
  7694  17AF  3001               	movlw	1
  7695  17B0  07C9               	addwf	___ftadd@f1+2,f
  7696  17B1                     l2255:	
  7697  17B1  1F51               	btfss	___ftadd@sign,6
  7698  17B2  2FC3               	goto	l2259
  7699  17B3  30FF               	movlw	255
  7700  17B4  06CA               	xorwf	___ftadd@f2,f
  7701  17B5  30FF               	movlw	255
  7702  17B6  06CB               	xorwf	___ftadd@f2+1,f
  7703  17B7  30FF               	movlw	255
  7704  17B8  06CC               	xorwf	___ftadd@f2+2,f
  7705  17B9  3001               	movlw	1
  7706  17BA  07CA               	addwf	___ftadd@f2,f
  7707  17BB  3000               	movlw	0
  7708  17BC  1803               	skipnc
  7709  17BD  3001               	movlw	1
  7710  17BE  07CB               	addwf	___ftadd@f2+1,f
  7711  17BF  3000               	movlw	0
  7712  17C0  1803               	skipnc
  7713  17C1  3001               	movlw	1
  7714  17C2  07CC               	addwf	___ftadd@f2+2,f
  7715  17C3                     l2259:	
  7716  17C3  01D1               	clrf	___ftadd@sign
  7717  17C4  0847               	movf	___ftadd@f1,w
  7718  17C5  07CA               	addwf	___ftadd@f2,f
  7719  17C6  0848               	movf	___ftadd@f1+1,w
  7720  17C7  1103               	clrz
  7721  17C8  1803               	skipnc
  7722  17C9  0A48               	incf	___ftadd@f1+1,w
  7723  17CA  1D03               	btfss	3,2
  7724  17CB  07CB               	addwf	___ftadd@f2+1,f
  7725  17CC  0849               	movf	___ftadd@f1+2,w
  7726  17CD  1103               	clrz
  7727  17CE  1803               	skipnc
  7728  17CF  0A49               	incf	___ftadd@f1+2,w
  7729  17D0  1D03               	btfss	3,2
  7730  17D1  07CC               	addwf	___ftadd@f2+2,f
  7731  17D2  1FCC               	btfss	___ftadd@f2+2,7
  7732  17D3  2FE6               	goto	l2269
  7733  17D4  30FF               	movlw	255
  7734  17D5  06CA               	xorwf	___ftadd@f2,f
  7735  17D6  30FF               	movlw	255
  7736  17D7  06CB               	xorwf	___ftadd@f2+1,f
  7737  17D8  30FF               	movlw	255
  7738  17D9  06CC               	xorwf	___ftadd@f2+2,f
  7739  17DA  3001               	movlw	1
  7740  17DB  07CA               	addwf	___ftadd@f2,f
  7741  17DC  3000               	movlw	0
  7742  17DD  1803               	skipnc
  7743  17DE  3001               	movlw	1
  7744  17DF  07CB               	addwf	___ftadd@f2+1,f
  7745  17E0  3000               	movlw	0
  7746  17E1  1803               	skipnc
  7747  17E2  3001               	movlw	1
  7748  17E3  07CC               	addwf	___ftadd@f2+2,f
  7749  17E4  01D1               	clrf	___ftadd@sign
  7750  17E5  0AD1               	incf	___ftadd@sign,f
  7751  17E6                     l2269:	
  7752  17E6  084A               	movf	___ftadd@f2,w
  7753  17E7  00F0               	movwf	___ftpack@arg
  7754  17E8  084B               	movf	___ftadd@f2+1,w
  7755  17E9  00F1               	movwf	___ftpack@arg+1
  7756  17EA  084C               	movf	___ftadd@f2+2,w
  7757  17EB  00F2               	movwf	___ftpack@arg+2
  7758  17EC  0853               	movf	___ftadd@exp1,w
  7759  17ED  00CD               	movwf	??___ftadd
  7760  17EE  084D               	movf	??___ftadd,w
  7761  17EF  00F3               	movwf	___ftpack@exp
  7762  17F0  0851               	movf	___ftadd@sign,w
  7763  17F1  00CE               	movwf	??___ftadd+1
  7764  17F2  084E               	movf	??___ftadd+1,w
  7765  17F3  00F4               	movwf	___ftpack@sign
  7766  17F4  160A  118A  237E   	fcall	___ftpack
  7767  17F7  0870               	movf	?___ftpack,w
  7768  17F8  1283               	bcf	3,5	;RP0=0, select bank0
  7769  17F9  1303               	bcf	3,6	;RP1=0, select bank0
  7770  17FA  00C7               	movwf	?___ftadd
  7771  17FB  0871               	movf	?___ftpack+1,w
  7772  17FC  00C8               	movwf	?___ftadd+1
  7773  17FD  0872               	movf	?___ftpack+2,w
  7774  17FE  00C9               	movwf	?___ftadd+2
  7775  17FF  0008               	return
  7776  1800                     __end_of___ftadd:	
  7777                           
  7778                           	psect	text23
  7779  137E                     __ptext23:	
  7780 ;; *************** function ___ftpack *****************
  7781 ;; Defined at:
  7782 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\float.c"
  7783 ;; Parameters:    Size  Location     Type
  7784 ;;  arg             3    0[COMMON] unsigned um
  7785 ;;  exp             1    3[COMMON] unsigned char 
  7786 ;;  sign            1    4[COMMON] unsigned char 
  7787 ;; Auto vars:     Size  Location     Type
  7788 ;;		None
  7789 ;; Return value:  Size  Location     Type
  7790 ;;                  3    0[COMMON] float 
  7791 ;; Registers used:
  7792 ;;		wreg, status,2, status,0
  7793 ;; Tracked objects:
  7794 ;;		On entry : 0/0
  7795 ;;		On exit  : 0/0
  7796 ;;		Unchanged: 0/0
  7797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7798 ;;      Params:         5       0       0       0       0
  7799 ;;      Locals:         0       0       0       0       0
  7800 ;;      Temps:          3       0       0       0       0
  7801 ;;      Totals:         8       0       0       0       0
  7802 ;;Total ram usage:        8 bytes
  7803 ;; Hardware stack levels used:    1
  7804 ;; This function calls:
  7805 ;;		Nothing
  7806 ;; This function is called by:
  7807 ;;		___ftadd
  7808 ;;		___ftmul
  7809 ;;		___lltoft
  7810 ;; This function uses a non-reentrant model
  7811 ;;
  7812                           
  7813                           
  7814                           ;psect for function ___ftpack
  7815  137E                     ___ftpack:	
  7816                           
  7817                           ;incstack = 0
  7818                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7819  137E  0873               	movf	___ftpack@exp,w
  7820  137F  1903               	btfsc	3,2
  7821  1380  2B86               	goto	l2069
  7822  1381  0872               	movf	___ftpack@arg+2,w
  7823  1382  0471               	iorwf	___ftpack@arg+1,w
  7824  1383  0470               	iorwf	___ftpack@arg,w
  7825  1384  1D03               	skipz
  7826  1385  2B99               	goto	l2075
  7827  1386                     l2069:	
  7828  1386  3000               	movlw	0
  7829  1387  00F0               	movwf	?___ftpack
  7830  1388  3000               	movlw	0
  7831  1389  00F1               	movwf	?___ftpack+1
  7832  138A  3000               	movlw	0
  7833  138B  00F2               	movwf	?___ftpack+2
  7834  138C  0008               	return
  7835  138D                     l2073:	
  7836  138D  3001               	movlw	1
  7837  138E  00F5               	movwf	??___ftpack
  7838  138F  0875               	movf	??___ftpack,w
  7839  1390  07F3               	addwf	___ftpack@exp,f
  7840  1391  3001               	movlw	1
  7841  1392                     u2245:	
  7842  1392  1003               	clrc
  7843  1393  0CF2               	rrf	___ftpack@arg+2,f
  7844  1394  0CF1               	rrf	___ftpack@arg+1,f
  7845  1395  0CF0               	rrf	___ftpack@arg,f
  7846  1396  3EFF               	addlw	-1
  7847  1397  1D03               	skipz
  7848  1398  2B92               	goto	u2245
  7849  1399                     l2075:	
  7850  1399  30FE               	movlw	254
  7851  139A  0572               	andwf	___ftpack@arg+2,w
  7852  139B  1903               	btfsc	3,2
  7853  139C  2BB4               	goto	l560
  7854  139D  2B8D               	goto	l2073
  7855  139E                     l2077:	
  7856  139E  3001               	movlw	1
  7857  139F  00F5               	movwf	??___ftpack
  7858  13A0  0875               	movf	??___ftpack,w
  7859  13A1  07F3               	addwf	___ftpack@exp,f
  7860  13A2  3001               	movlw	1
  7861  13A3  07F0               	addwf	___ftpack@arg,f
  7862  13A4  3000               	movlw	0
  7863  13A5  1803               	skipnc
  7864  13A6  3001               	movlw	1
  7865  13A7  07F1               	addwf	___ftpack@arg+1,f
  7866  13A8  3000               	movlw	0
  7867  13A9  1803               	skipnc
  7868  13AA  3001               	movlw	1
  7869  13AB  07F2               	addwf	___ftpack@arg+2,f
  7870  13AC  3001               	movlw	1
  7871  13AD                     u2265:	
  7872  13AD  1003               	clrc
  7873  13AE  0CF2               	rrf	___ftpack@arg+2,f
  7874  13AF  0CF1               	rrf	___ftpack@arg+1,f
  7875  13B0  0CF0               	rrf	___ftpack@arg,f
  7876  13B1  3EFF               	addlw	-1
  7877  13B2  1D03               	skipz
  7878  13B3  2BAD               	goto	u2265
  7879  13B4                     l560:	
  7880  13B4  30FF               	movlw	255
  7881  13B5  0572               	andwf	___ftpack@arg+2,w
  7882  13B6  1903               	btfsc	3,2
  7883  13B7  2BC3               	goto	l2085
  7884  13B8  2B9E               	goto	l2077
  7885  13B9                     l2083:	
  7886  13B9  3001               	movlw	1
  7887  13BA  02F3               	subwf	___ftpack@exp,f
  7888  13BB  3001               	movlw	1
  7889  13BC                     u2285:	
  7890  13BC  1003               	clrc
  7891  13BD  0DF0               	rlf	___ftpack@arg,f
  7892  13BE  0DF1               	rlf	___ftpack@arg+1,f
  7893  13BF  0DF2               	rlf	___ftpack@arg+2,f
  7894  13C0  3EFF               	addlw	-1
  7895  13C1  1D03               	skipz
  7896  13C2  2BBC               	goto	u2285
  7897  13C3                     l2085:	
  7898  13C3  1BF1               	btfsc	___ftpack@arg+1,7
  7899  13C4  2BC9               	goto	l567
  7900  13C5  3002               	movlw	2
  7901  13C6  0273               	subwf	___ftpack@exp,w
  7902  13C7  1803               	skipnc
  7903  13C8  2BB9               	goto	l2083
  7904  13C9                     l567:	
  7905  13C9  1873               	btfsc	___ftpack@exp,0
  7906  13CA  2BD1               	goto	l568
  7907  13CB  30FF               	movlw	255
  7908  13CC  05F0               	andwf	___ftpack@arg,f
  7909  13CD  307F               	movlw	127
  7910  13CE  05F1               	andwf	___ftpack@arg+1,f
  7911  13CF  30FF               	movlw	255
  7912  13D0  05F2               	andwf	___ftpack@arg+2,f
  7913  13D1                     l568:	
  7914  13D1  1003               	clrc
  7915  13D2  0CF3               	rrf	___ftpack@exp,f
  7916  13D3  0873               	movf	___ftpack@exp,w
  7917  13D4  00F5               	movwf	??___ftpack
  7918  13D5  01F6               	clrf	??___ftpack+1
  7919  13D6  01F7               	clrf	??___ftpack+2
  7920  13D7  3010               	movlw	16
  7921  13D8                     u2325:	
  7922  13D8  1003               	clrc
  7923  13D9  0DF5               	rlf	??___ftpack,f
  7924  13DA  0DF6               	rlf	??___ftpack+1,f
  7925  13DB  0DF7               	rlf	??___ftpack+2,f
  7926  13DC  3EFF               	addlw	-1
  7927  13DD  1D03               	skipz
  7928  13DE  2BD8               	goto	u2325
  7929  13DF  0875               	movf	??___ftpack,w
  7930  13E0  04F0               	iorwf	___ftpack@arg,f
  7931  13E1  0876               	movf	??___ftpack+1,w
  7932  13E2  04F1               	iorwf	___ftpack@arg+1,f
  7933  13E3  0877               	movf	??___ftpack+2,w
  7934  13E4  04F2               	iorwf	___ftpack@arg+2,f
  7935  13E5  0874               	movf	___ftpack@sign,w
  7936  13E6  1903               	btfsc	3,2
  7937  13E7  0008               	return
  7938  13E8  17F2               	bsf	___ftpack@arg+2,7
  7939  13E9  0008               	return
  7940  13EA                     __end_of___ftpack:	
  7941                           
  7942                           	psect	text24
  7943  1E61                     __ptext24:	
  7944 ;; *************** function ___ftneg *****************
  7945 ;; Defined at:
  7946 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\ftneg.c"
  7947 ;; Parameters:    Size  Location     Type
  7948 ;;  f1              3    0[COMMON] float 
  7949 ;; Auto vars:     Size  Location     Type
  7950 ;;		None
  7951 ;; Return value:  Size  Location     Type
  7952 ;;                  3    0[COMMON] float 
  7953 ;; Registers used:
  7954 ;;		wreg
  7955 ;; Tracked objects:
  7956 ;;		On entry : 0/0
  7957 ;;		On exit  : 0/0
  7958 ;;		Unchanged: 0/0
  7959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7960 ;;      Params:         3       0       0       0       0
  7961 ;;      Locals:         0       0       0       0       0
  7962 ;;      Temps:          0       0       0       0       0
  7963 ;;      Totals:         3       0       0       0       0
  7964 ;;Total ram usage:        3 bytes
  7965 ;; Hardware stack levels used:    1
  7966 ;; This function calls:
  7967 ;;		Nothing
  7968 ;; This function is called by:
  7969 ;;		_sprintf
  7970 ;; This function uses a non-reentrant model
  7971 ;;
  7972                           
  7973                           
  7974                           ;psect for function ___ftneg
  7975  1E61                     ___ftneg:	
  7976                           
  7977                           ;incstack = 0
  7978                           ; Regs used in ___ftneg: [wreg]
  7979  1E61  0872               	movf	___ftneg@f1+2,w
  7980  1E62  0471               	iorwf	___ftneg@f1+1,w
  7981  1E63  0470               	iorwf	___ftneg@f1,w
  7982  1E64  1903               	skipnz
  7983  1E65  0008               	return
  7984  1E66  3080               	movlw	128
  7985  1E67  06F2               	xorwf	___ftneg@f1+2,f
  7986  1E68  0008               	return
  7987  1E69                     __end_of___ftneg:	
  7988                           
  7989                           	psect	text25
  7990  0003                     __ptext25:	
  7991 ;; *************** function ___ftge *****************
  7992 ;; Defined at:
  7993 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\ftge.c"
  7994 ;; Parameters:    Size  Location     Type
  7995 ;;  ff1             3    0[COMMON] float 
  7996 ;;  ff2             3    3[COMMON] float 
  7997 ;; Auto vars:     Size  Location     Type
  7998 ;;		None
  7999 ;; Return value:  Size  Location     Type
  8000 ;;		None               void
  8001 ;; Registers used:
  8002 ;;		wreg, status,2, status,0
  8003 ;; Tracked objects:
  8004 ;;		On entry : 0/0
  8005 ;;		On exit  : 0/0
  8006 ;;		Unchanged: 0/0
  8007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8008 ;;      Params:         6       0       0       0       0
  8009 ;;      Locals:         0       0       0       0       0
  8010 ;;      Temps:          6       0       0       0       0
  8011 ;;      Totals:        12       0       0       0       0
  8012 ;;Total ram usage:       12 bytes
  8013 ;; Hardware stack levels used:    1
  8014 ;; This function calls:
  8015 ;;		Nothing
  8016 ;; This function is called by:
  8017 ;;		_sprintf
  8018 ;; This function uses a non-reentrant model
  8019 ;;
  8020                           
  8021                           
  8022                           ;psect for function ___ftge
  8023  0003                     ___ftge:	
  8024                           
  8025                           ;incstack = 0
  8026                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8027  0003  1FF2               	btfss	___ftge@ff1+2,7
  8028  0004  282A               	goto	l2523
  8029  0005  3000               	movlw	0
  8030  0006  00F6               	movwf	??___ftge
  8031  0007  3000               	movlw	0
  8032  0008  00F7               	movwf	??___ftge+1
  8033  0009  3080               	movlw	128
  8034  000A  00F8               	movwf	??___ftge+2
  8035  000B  0970               	comf	___ftge@ff1,w
  8036  000C  00F9               	movwf	??___ftge+3
  8037  000D  0971               	comf	___ftge@ff1+1,w
  8038  000E  00FA               	movwf	??___ftge+4
  8039  000F  0972               	comf	___ftge@ff1+2,w
  8040  0010  00FB               	movwf	??___ftge+5
  8041  0011  0AF9               	incf	??___ftge+3,f
  8042  0012  1903               	skipnz
  8043  0013  0AFA               	incf	??___ftge+4,f
  8044  0014  1903               	skipnz
  8045  0015  0AFB               	incf	??___ftge+5,f
  8046  0016  0879               	movf	??___ftge+3,w
  8047  0017  07F6               	addwf	??___ftge,f
  8048  0018  087A               	movf	??___ftge+4,w
  8049  0019  1803               	skipnc
  8050  001A  0F7A               	incfsz	??___ftge+4,w
  8051  001B  281D               	goto	u3331
  8052  001C  281E               	goto	u3332
  8053  001D                     u3331:	
  8054  001D  07F7               	addwf	??___ftge+1,f
  8055  001E                     u3332:	
  8056  001E  087B               	movf	??___ftge+5,w
  8057  001F  1803               	skipnc
  8058  0020  0F7B               	incfsz	??___ftge+5,w
  8059  0021  2823               	goto	u3333
  8060  0022  2824               	goto	u3334
  8061  0023                     u3333:	
  8062  0023  07F8               	addwf	??___ftge+2,f
  8063  0024                     u3334:	
  8064  0024  0876               	movf	??___ftge,w
  8065  0025  00F0               	movwf	___ftge@ff1
  8066  0026  0877               	movf	??___ftge+1,w
  8067  0027  00F1               	movwf	___ftge@ff1+1
  8068  0028  0878               	movf	??___ftge+2,w
  8069  0029  00F2               	movwf	___ftge@ff1+2
  8070  002A                     l2523:	
  8071  002A  1FF5               	btfss	___ftge@ff2+2,7
  8072  002B  2851               	goto	l2527
  8073  002C  3000               	movlw	0
  8074  002D  00F6               	movwf	??___ftge
  8075  002E  3000               	movlw	0
  8076  002F  00F7               	movwf	??___ftge+1
  8077  0030  3080               	movlw	128
  8078  0031  00F8               	movwf	??___ftge+2
  8079  0032  0973               	comf	___ftge@ff2,w
  8080  0033  00F9               	movwf	??___ftge+3
  8081  0034  0974               	comf	___ftge@ff2+1,w
  8082  0035  00FA               	movwf	??___ftge+4
  8083  0036  0975               	comf	___ftge@ff2+2,w
  8084  0037  00FB               	movwf	??___ftge+5
  8085  0038  0AF9               	incf	??___ftge+3,f
  8086  0039  1903               	skipnz
  8087  003A  0AFA               	incf	??___ftge+4,f
  8088  003B  1903               	skipnz
  8089  003C  0AFB               	incf	??___ftge+5,f
  8090  003D  0879               	movf	??___ftge+3,w
  8091  003E  07F6               	addwf	??___ftge,f
  8092  003F  087A               	movf	??___ftge+4,w
  8093  0040  1803               	skipnc
  8094  0041  0F7A               	incfsz	??___ftge+4,w
  8095  0042  2844               	goto	u3351
  8096  0043  2845               	goto	u3352
  8097  0044                     u3351:	
  8098  0044  07F7               	addwf	??___ftge+1,f
  8099  0045                     u3352:	
  8100  0045  087B               	movf	??___ftge+5,w
  8101  0046  1803               	skipnc
  8102  0047  0F7B               	incfsz	??___ftge+5,w
  8103  0048  284A               	goto	u3353
  8104  0049  284B               	goto	u3354
  8105  004A                     u3353:	
  8106  004A  07F8               	addwf	??___ftge+2,f
  8107  004B                     u3354:	
  8108  004B  0876               	movf	??___ftge,w
  8109  004C  00F3               	movwf	___ftge@ff2
  8110  004D  0877               	movf	??___ftge+1,w
  8111  004E  00F4               	movwf	___ftge@ff2+1
  8112  004F  0878               	movf	??___ftge+2,w
  8113  0050  00F5               	movwf	___ftge@ff2+2
  8114  0051                     l2527:	
  8115  0051  3080               	movlw	128
  8116  0052  06F2               	xorwf	___ftge@ff1+2,f
  8117  0053  3080               	movlw	128
  8118  0054  06F5               	xorwf	___ftge@ff2+2,f
  8119  0055  0875               	movf	___ftge@ff2+2,w
  8120  0056  0272               	subwf	___ftge@ff1+2,w
  8121  0057  1D03               	skipz
  8122  0058  0008               	return
  8123  0059  0874               	movf	___ftge@ff2+1,w
  8124  005A  0271               	subwf	___ftge@ff1+1,w
  8125  005B  1D03               	skipz
  8126  005C  0008               	return
  8127  005D  0873               	movf	___ftge@ff2,w
  8128  005E  0270               	subwf	___ftge@ff1,w
  8129  005F  0008               	return
  8130  0060                     __end_of___ftge:	
  8131                           
  8132                           	psect	text26
  8133  1F20                     __ptext26:	
  8134 ;; *************** function _LCD_Writestr *****************
  8135 ;; Defined at:
  8136 ;;		line 203 in file "hd44780sz.c"
  8137 ;; Parameters:    Size  Location     Type
  8138 ;;  s               2    4[COMMON] PTR const unsigned char 
  8139 ;;		 -> LCD_Writeflo@buf(20), STR_7(16), STR_6(17), STR_5(9), 
  8140 ;;		 -> STR_4(9), STR_3(11), STR_2(16), STR_1(13), 
  8141 ;; Auto vars:     Size  Location     Type
  8142 ;;		None
  8143 ;; Return value:  Size  Location     Type
  8144 ;;                  1    wreg      void 
  8145 ;; Registers used:
  8146 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8147 ;; Tracked objects:
  8148 ;;		On entry : 0/0
  8149 ;;		On exit  : 0/0
  8150 ;;		Unchanged: 0/0
  8151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8152 ;;      Params:         2       0       0       0       0
  8153 ;;      Locals:         0       0       0       0       0
  8154 ;;      Temps:          0       0       0       0       0
  8155 ;;      Totals:         2       0       0       0       0
  8156 ;;Total ram usage:        2 bytes
  8157 ;; Hardware stack levels used:    1
  8158 ;; Hardware stack levels required when called:    4
  8159 ;; This function calls:
  8160 ;;		_LCD_Putchar
  8161 ;; This function is called by:
  8162 ;;		_main
  8163 ;;		_LCD_Writeflo
  8164 ;; This function uses a non-reentrant model
  8165 ;;
  8166                           
  8167                           
  8168                           ;psect for function _LCD_Writestr
  8169  1F20                     _LCD_Writestr:	
  8170  1F20                     l2683:	
  8171                           ;hd44780sz.c: 205: while(*s)
  8172                           
  8173                           ;incstack = 0
  8174                           ; Regs used in _LCD_Writestr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8175                           
  8176  1F20  0875               	movf	LCD_Writestr@s+1,w
  8177  1F21  1283               	bcf	3,5	;RP0=0, select bank0
  8178  1F22  1303               	bcf	3,6	;RP1=0, select bank0
  8179  1F23  00FF               	movwf	127
  8180  1F24  0874               	movf	LCD_Writestr@s,w
  8181  1F25  0084               	movwf	4
  8182  1F26  160A  118A  2000  160A  158A  	fcall	stringtab
  8183  1F2B  3A00               	xorlw	0
  8184  1F2C  1903               	btfsc	3,2
  8185  1F2D  0008               	return
  8186                           
  8187                           ;hd44780sz.c: 206: {
  8188                           ;hd44780sz.c: 207: LCD_Putchar(*s++);
  8189  1F2E  0875               	movf	LCD_Writestr@s+1,w
  8190  1F2F  1283               	bcf	3,5	;RP0=0, select bank0
  8191  1F30  1303               	bcf	3,6	;RP1=0, select bank0
  8192  1F31  00FF               	movwf	127
  8193  1F32  0874               	movf	LCD_Writestr@s,w
  8194  1F33  0084               	movwf	4
  8195  1F34  160A  118A  2000  160A  158A  	fcall	stringtab
  8196  1F39  160A  158A  2669  160A  158A  	fcall	_LCD_Putchar
  8197  1F3E  3001               	movlw	1
  8198  1F3F  07F4               	addwf	LCD_Writestr@s,f
  8199  1F40  1803               	skipnc
  8200  1F41  0AF5               	incf	LCD_Writestr@s+1,f
  8201  1F42  2F20               	goto	l2683
  8202  1F43                     __end_of_LCD_Writestr:	
  8203                           
  8204                           	psect	text27
  8205  145C                     __ptext27:	
  8206 ;; *************** function _LCD_Init *****************
  8207 ;; Defined at:
  8208 ;;		line 53 in file "hd44780sz.c"
  8209 ;; Parameters:    Size  Location     Type
  8210 ;;		None
  8211 ;; Auto vars:     Size  Location     Type
  8212 ;;		None
  8213 ;; Return value:  Size  Location     Type
  8214 ;;                  1    wreg      void 
  8215 ;; Registers used:
  8216 ;;		wreg, status,2, status,0, pclath, cstack
  8217 ;; Tracked objects:
  8218 ;;		On entry : 0/0
  8219 ;;		On exit  : 0/0
  8220 ;;		Unchanged: 0/0
  8221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8222 ;;      Params:         0       0       0       0       0
  8223 ;;      Locals:         0       0       0       0       0
  8224 ;;      Temps:          3       0       0       0       0
  8225 ;;      Totals:         3       0       0       0       0
  8226 ;;Total ram usage:        3 bytes
  8227 ;; Hardware stack levels used:    1
  8228 ;; Hardware stack levels required when called:    4
  8229 ;; This function calls:
  8230 ;;		__LCD_Command
  8231 ;;		__LCD_Isbusy
  8232 ;;		__LCD_Nibble
  8233 ;;		__LCD_Strobe
  8234 ;; This function is called by:
  8235 ;;		_main
  8236 ;; This function uses a non-reentrant model
  8237 ;;
  8238                           
  8239                           
  8240                           ;psect for function _LCD_Init
  8241  145C                     _LCD_Init:	
  8242                           
  8243                           ;hd44780sz.c: 56: TRISDbits.TRISD2=0;
  8244                           
  8245                           ;incstack = 0
  8246                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  8247  145C  1683               	bsf	3,5	;RP0=1, select bank1
  8248  145D  1303               	bcf	3,6	;RP1=0, select bank1
  8249  145E  1108               	bcf	8,2	;volatile
  8250                           
  8251                           ;hd44780sz.c: 57: TRISDbits.TRISD1=0;
  8252  145F  1088               	bcf	8,1	;volatile
  8253                           
  8254                           ;hd44780sz.c: 58: TRISDbits.TRISD3=0;
  8255  1460  1188               	bcf	8,3	;volatile
  8256                           
  8257                           ;hd44780sz.c: 59: TRISDbits.TRISD7=0;
  8258  1461  1388               	bcf	8,7	;volatile
  8259                           
  8260                           ;hd44780sz.c: 60: TRISDbits.TRISD6=0;
  8261  1462  1308               	bcf	8,6	;volatile
  8262                           
  8263                           ;hd44780sz.c: 61: TRISDbits.TRISD5=0;
  8264  1463  1288               	bcf	8,5	;volatile
  8265                           
  8266                           ;hd44780sz.c: 62: TRISDbits.TRISD4=0;
  8267  1464  1208               	bcf	8,4	;volatile
  8268                           
  8269                           ;hd44780sz.c: 64: TRISCbits.TRISC1=0;
  8270  1465  1087               	bcf	7,1	;volatile
  8271                           
  8272                           ;hd44780sz.c: 67: PORTDbits.RD2=0;
  8273  1466  1283               	bcf	3,5	;RP0=0, select bank0
  8274  1467  1303               	bcf	3,6	;RP1=0, select bank0
  8275  1468  1108               	bcf	8,2	;volatile
  8276                           
  8277                           ;hd44780sz.c: 68: PORTDbits.RD1=0;
  8278  1469  1088               	bcf	8,1	;volatile
  8279                           
  8280                           ;hd44780sz.c: 69: PORTDbits.RD3=0;
  8281  146A  1188               	bcf	8,3	;volatile
  8282                           
  8283                           ;hd44780sz.c: 70: _delay((unsigned long)((60)*(20000000/4000.0)));
  8284  146B  3002               	movlw	2
  8285  146C  00F7               	movwf	??_LCD_Init+2
  8286  146D  3086               	movlw	134
  8287  146E  00F6               	movwf	??_LCD_Init+1
  8288  146F  3099               	movlw	153
  8289  1470  00F5               	movwf	??_LCD_Init
  8290  1471                     u4437:	
  8291  1471  0BF5               	decfsz	??_LCD_Init,f
  8292  1472  2C71               	goto	u4437
  8293  1473  0BF6               	decfsz	??_LCD_Init+1,f
  8294  1474  2C71               	goto	u4437
  8295  1475  0BF7               	decfsz	??_LCD_Init+2,f
  8296  1476  2C71               	goto	u4437
  8297                           
  8298                           ;hd44780sz.c: 71: _LCD_Nibble(0b0011);
  8299  1477  3003               	movlw	3
  8300  1478  160A  158A  26BE  160A  118A  	fcall	__LCD_Nibble
  8301                           
  8302                           ;hd44780sz.c: 72: _delay((unsigned long)((10)*(20000000/4000.0)));
  8303  147D  3041               	movlw	65
  8304  147E  00F6               	movwf	??_LCD_Init+1
  8305  147F  30EE               	movlw	238
  8306  1480  00F5               	movwf	??_LCD_Init
  8307  1481                     u4447:	
  8308  1481  0BF5               	decfsz	??_LCD_Init,f
  8309  1482  2C81               	goto	u4447
  8310  1483  0BF6               	decfsz	??_LCD_Init+1,f
  8311  1484  2C81               	goto	u4447
  8312  1485  0000               	nop
  8313                           
  8314                           ;hd44780sz.c: 73: _LCD_Strobe();
  8315  1486  160A  158A  2672  160A  118A  	fcall	__LCD_Strobe
  8316                           
  8317                           ;hd44780sz.c: 74: _delay((unsigned long)((150)*(20000000/4000000.0)));
  8318  148B  30F9               	movlw	249
  8319  148C  00F5               	movwf	??_LCD_Init
  8320  148D                     u4457:	
  8321  148D  0BF5               	decfsz	??_LCD_Init,f
  8322  148E  2C8D               	goto	u4457
  8323  148F  2C90               	nop2
  8324                           
  8325                           ;hd44780sz.c: 75: _LCD_Strobe();
  8326  1490  160A  158A  2672  160A  118A  	fcall	__LCD_Strobe
  8327                           
  8328                           ;hd44780sz.c: 76: _delay((unsigned long)((5)*(20000000/4000000.0)));
  8329  1495  3008               	movlw	8
  8330  1496  00F5               	movwf	??_LCD_Init
  8331  1497                     u4467:	
  8332  1497  0BF5               	decfsz	??_LCD_Init,f
  8333  1498  2C97               	goto	u4467
  8334                           
  8335                           ;hd44780sz.c: 77: _LCD_Nibble(0b0010);
  8336  1499  3002               	movlw	2
  8337  149A  160A  158A  26BE  160A  118A  	fcall	__LCD_Nibble
  8338  149F                     l2949:	
  8339                           ;hd44780sz.c: 79: while (_LCD_Isbusy());
  8340                           
  8341  149F  160A  158A  2795  160A  118A  	fcall	__LCD_Isbusy
  8342  14A4  3A00               	xorlw	0
  8343  14A5  1D03               	skipz
  8344  14A6  2C9F               	goto	l2949
  8345                           
  8346                           ;hd44780sz.c: 84: _LCD_Command(0x28);
  8347  14A7  3028               	movlw	40
  8348  14A8  00F3               	movwf	__LCD_Command@cmd
  8349  14A9  3000               	movlw	0
  8350  14AA  00F4               	movwf	__LCD_Command@cmd+1
  8351  14AB  160A  158A  2651  160A  118A  	fcall	__LCD_Command
  8352                           
  8353                           ;hd44780sz.c: 86: _LCD_Command(0x08);
  8354  14B0  3008               	movlw	8
  8355  14B1  00F3               	movwf	__LCD_Command@cmd
  8356  14B2  3000               	movlw	0
  8357  14B3  00F4               	movwf	__LCD_Command@cmd+1
  8358  14B4  160A  158A  2651  160A  118A  	fcall	__LCD_Command
  8359                           
  8360                           ;hd44780sz.c: 87: _LCD_Command(0x01);
  8361  14B9  3001               	movlw	1
  8362  14BA  00F3               	movwf	__LCD_Command@cmd
  8363  14BB  3000               	movlw	0
  8364  14BC  00F4               	movwf	__LCD_Command@cmd+1
  8365  14BD  160A  158A  2651  160A  118A  	fcall	__LCD_Command
  8366                           
  8367                           ;hd44780sz.c: 88: _LCD_Command(0x06);
  8368  14C2  3006               	movlw	6
  8369  14C3  00F3               	movwf	__LCD_Command@cmd
  8370  14C4  3000               	movlw	0
  8371  14C5  00F4               	movwf	__LCD_Command@cmd+1
  8372  14C6  160A  158A  2651  160A  118A  	fcall	__LCD_Command
  8373                           
  8374                           ;hd44780sz.c: 89: _LCD_Command(0x0C);
  8375  14CB  300C               	movlw	12
  8376  14CC  00F3               	movwf	__LCD_Command@cmd
  8377  14CD  3000               	movlw	0
  8378  14CE  00F4               	movwf	__LCD_Command@cmd+1
  8379  14CF  160A  158A  2651   	fcall	__LCD_Command
  8380  14D2  0008               	return
  8381  14D3                     __end_of_LCD_Init:	
  8382                           
  8383                           	psect	text28
  8384  1207                     __ptext28:	
  8385 ;; *************** function _LCD_Goto *****************
  8386 ;; Defined at:
  8387 ;;		line 93 in file "hd44780sz.c"
  8388 ;; Parameters:    Size  Location     Type
  8389 ;;  row             1    wreg     char 
  8390 ;;  col             1    5[COMMON] char 
  8391 ;; Auto vars:     Size  Location     Type
  8392 ;;  row             1    7[COMMON] char 
  8393 ;; Return value:  Size  Location     Type
  8394 ;;                  1    wreg      void 
  8395 ;; Registers used:
  8396 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8397 ;; Tracked objects:
  8398 ;;		On entry : 0/0
  8399 ;;		On exit  : 0/0
  8400 ;;		Unchanged: 0/0
  8401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8402 ;;      Params:         1       0       0       0       0
  8403 ;;      Locals:         1       0       0       0       0
  8404 ;;      Temps:          1       0       0       0       0
  8405 ;;      Totals:         3       0       0       0       0
  8406 ;;Total ram usage:        3 bytes
  8407 ;; Hardware stack levels used:    1
  8408 ;; Hardware stack levels required when called:    4
  8409 ;; This function calls:
  8410 ;;		__LCD_Command
  8411 ;; This function is called by:
  8412 ;;		_main
  8413 ;; This function uses a non-reentrant model
  8414 ;;
  8415                           
  8416                           
  8417                           ;psect for function _LCD_Goto
  8418  1207                     _LCD_Goto:	
  8419                           
  8420                           ;incstack = 0
  8421                           ; Regs used in _LCD_Goto: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8422                           ;LCD_Goto@row stored from wreg
  8423  1207  00F7               	movwf	LCD_Goto@row
  8424                           
  8425                           ;hd44780sz.c: 95: if (row>2)
  8426  1208  0877               	movf	LCD_Goto@row,w
  8427  1209  3A80               	xorlw	128
  8428  120A  3E7D               	addlw	-131
  8429  120B  1C03               	skipc
  8430  120C  2A11               	goto	l115
  8431                           
  8432                           ;hd44780sz.c: 96: {
  8433                           ;hd44780sz.c: 97: row=2;
  8434  120D  3002               	movlw	2
  8435  120E  00F6               	movwf	??_LCD_Goto
  8436  120F  0876               	movf	??_LCD_Goto,w
  8437  1210  00F7               	movwf	LCD_Goto@row
  8438  1211                     l115:	
  8439                           
  8440                           ;hd44780sz.c: 98: }
  8441                           ;hd44780sz.c: 99: if (col>16)
  8442  1211  0875               	movf	LCD_Goto@col,w
  8443  1212  3A80               	xorlw	128
  8444  1213  3E6F               	addlw	-145
  8445  1214  1C03               	skipc
  8446  1215  2A4B               	goto	l2973
  8447                           
  8448                           ;hd44780sz.c: 100: {
  8449                           ;hd44780sz.c: 101: col=16;
  8450  1216  3010               	movlw	16
  8451  1217  00F6               	movwf	??_LCD_Goto
  8452  1218  0876               	movf	??_LCD_Goto,w
  8453  1219  00F5               	movwf	LCD_Goto@col
  8454                           
  8455                           ;hd44780sz.c: 102: }
  8456                           ;hd44780sz.c: 104: switch(row)
  8457  121A  2A4B               	goto	l2973
  8458  121B                     l2963:	
  8459                           ;hd44780sz.c: 105: {
  8460                           ;hd44780sz.c: 106: case 1:
  8461                           
  8462                           
  8463                           ;hd44780sz.c: 107: _LCD_Command((0x80-1)+col);
  8464  121B  307F               	movlw	127
  8465  121C  0775               	addwf	LCD_Goto@col,w
  8466  121D  00F3               	movwf	__LCD_Command@cmd
  8467  121E  01F4               	clrf	__LCD_Command@cmd+1
  8468  121F  1803               	skipnc
  8469  1220  0AF4               	incf	__LCD_Command@cmd+1,f
  8470  1221  1BF5               	btfsc	LCD_Goto@col,7
  8471  1222  03F4               	decf	__LCD_Command@cmd+1,f
  8472  1223  160A  158A  2651   	fcall	__LCD_Command
  8473                           
  8474                           ;hd44780sz.c: 108: break;
  8475  1226  0008               	return
  8476  1227                     l2965:	
  8477                           ;hd44780sz.c: 110: case 2:
  8478                           
  8479                           
  8480                           ;hd44780sz.c: 111: _LCD_Command((0xC0-1)+col);
  8481  1227  30BF               	movlw	191
  8482  1228  0775               	addwf	LCD_Goto@col,w
  8483  1229  00F3               	movwf	__LCD_Command@cmd
  8484  122A  01F4               	clrf	__LCD_Command@cmd+1
  8485  122B  1803               	skipnc
  8486  122C  0AF4               	incf	__LCD_Command@cmd+1,f
  8487  122D  1BF5               	btfsc	LCD_Goto@col,7
  8488  122E  03F4               	decf	__LCD_Command@cmd+1,f
  8489  122F  160A  158A  2651   	fcall	__LCD_Command
  8490                           
  8491                           ;hd44780sz.c: 112: break;
  8492  1232  0008               	return
  8493  1233                     l2967:	
  8494                           ;hd44780sz.c: 114: case 3:
  8495                           
  8496                           
  8497                           ;hd44780sz.c: 115: _LCD_Command((0x90-1)+col);
  8498  1233  308F               	movlw	143
  8499  1234  0775               	addwf	LCD_Goto@col,w
  8500  1235  00F3               	movwf	__LCD_Command@cmd
  8501  1236  01F4               	clrf	__LCD_Command@cmd+1
  8502  1237  1803               	skipnc
  8503  1238  0AF4               	incf	__LCD_Command@cmd+1,f
  8504  1239  1BF5               	btfsc	LCD_Goto@col,7
  8505  123A  03F4               	decf	__LCD_Command@cmd+1,f
  8506  123B  160A  158A  2651   	fcall	__LCD_Command
  8507                           
  8508                           ;hd44780sz.c: 116: break;
  8509  123E  0008               	return
  8510  123F                     l2969:	
  8511                           ;hd44780sz.c: 118: case 4:
  8512                           
  8513                           
  8514                           ;hd44780sz.c: 119: _LCD_Command((0xD0-1)+col);
  8515  123F  30CF               	movlw	207
  8516  1240  0775               	addwf	LCD_Goto@col,w
  8517  1241  00F3               	movwf	__LCD_Command@cmd
  8518  1242  01F4               	clrf	__LCD_Command@cmd+1
  8519  1243  1803               	skipnc
  8520  1244  0AF4               	incf	__LCD_Command@cmd+1,f
  8521  1245  1BF5               	btfsc	LCD_Goto@col,7
  8522  1246  03F4               	decf	__LCD_Command@cmd+1,f
  8523  1247  160A  158A  2651   	fcall	__LCD_Command
  8524                           
  8525                           ;hd44780sz.c: 121: }
  8526                           
  8527                           ;hd44780sz.c: 120: break;
  8528  124A  0008               	return
  8529  124B                     l2973:	
  8530  124B  0877               	movf	LCD_Goto@row,w
  8531                           
  8532                           ; Switch size 1, requested type "space"
  8533                           ; Number of cases is 4, Range of values is 1 to 4
  8534                           ; switch strategies available:
  8535                           ; Name         Instructions Cycles
  8536                           ; simple_byte           13     7 (average)
  8537                           ; direct_byte           23    11 (fixed)
  8538                           ; jumptable            263     9 (fixed)
  8539                           ;	Chosen strategy is simple_byte
  8540  124C  3A01               	xorlw	1	; case 1
  8541  124D  1903               	skipnz
  8542  124E  2A1B               	goto	l2963
  8543  124F  3A03               	xorlw	3	; case 2
  8544  1250  1903               	skipnz
  8545  1251  2A27               	goto	l2965
  8546  1252  3A01               	xorlw	1	; case 3
  8547  1253  1903               	skipnz
  8548  1254  2A33               	goto	l2967
  8549  1255  3A07               	xorlw	7	; case 4
  8550  1256  1903               	skipnz
  8551  1257  2A3F               	goto	l2969
  8552  1258  2A59               	goto	l123
  8553  1259                     l123:	
  8554  1259  0008               	return
  8555  125A                     __end_of_LCD_Goto:	
  8556                           
  8557                           	psect	text29
  8558  0805                     __ptext29:	
  8559 ;; *************** function _LCD_Customchar *****************
  8560 ;; Defined at:
  8561 ;;		line 236 in file "hd44780sz.c"
  8562 ;; Parameters:    Size  Location     Type
  8563 ;;  pos             1    wreg     char 
  8564 ;;  b               2    5[COMMON] PTR const unsigned char 
  8565 ;;		 -> ghost(8), dot(8), pacmanl(8), pacmanr(8), 
  8566 ;;		 -> sad(8), smile(8), teschio(8), sole(8), 
  8567 ;;		 -> invader(8), cuore(8), stop(8), play(8), 
  8568 ;; Auto vars:     Size  Location     Type
  8569 ;;  pos             1   10[COMMON] char 
  8570 ;;  u               1   11[COMMON] char 
  8571 ;; Return value:  Size  Location     Type
  8572 ;;                  1    wreg      void 
  8573 ;; Registers used:
  8574 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8575 ;; Tracked objects:
  8576 ;;		On entry : 0/0
  8577 ;;		On exit  : 0/0
  8578 ;;		Unchanged: 0/0
  8579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8580 ;;      Params:         2       0       0       0       0
  8581 ;;      Locals:         2       0       0       0       0
  8582 ;;      Temps:          3       0       0       0       0
  8583 ;;      Totals:         7       0       0       0       0
  8584 ;;Total ram usage:        7 bytes
  8585 ;; Hardware stack levels used:    1
  8586 ;; Hardware stack levels required when called:    4
  8587 ;; This function calls:
  8588 ;;		_LCD_Putchar
  8589 ;;		__LCD_Command
  8590 ;; This function is called by:
  8591 ;;		_main
  8592 ;; This function uses a non-reentrant model
  8593 ;;
  8594                           
  8595                           
  8596                           ;psect for function _LCD_Customchar
  8597  0805                     _LCD_Customchar:	
  8598                           
  8599                           ;incstack = 0
  8600                           ; Regs used in _LCD_Customchar: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8601                           ;LCD_Customchar@pos stored from wreg
  8602  0805  00FA               	movwf	LCD_Customchar@pos
  8603                           
  8604                           ;hd44780sz.c: 238: if (pos>7) {return;}
  8605  0806  087A               	movf	LCD_Customchar@pos,w
  8606  0807  3A80               	xorlw	128
  8607  0808  3E78               	addlw	-136
  8608  0809  1803               	btfsc	3,0
  8609  080A  0008               	return
  8610                           
  8611                           ;hd44780sz.c: 239: int8_t u;
  8612                           ;hd44780sz.c: 240: _LCD_Command(0x08);
  8613  080B  3008               	movlw	8
  8614  080C  00F3               	movwf	__LCD_Command@cmd
  8615  080D  3000               	movlw	0
  8616  080E  00F4               	movwf	__LCD_Command@cmd+1
  8617  080F  160A  158A  2651  120A  158A  	fcall	__LCD_Command
  8618                           
  8619                           ;hd44780sz.c: 241: _LCD_Command(0x40+(pos*8));
  8620  0814  087A               	movf	LCD_Customchar@pos,w
  8621  0815  00F7               	movwf	??_LCD_Customchar
  8622  0816  01F8               	clrf	??_LCD_Customchar+1
  8623  0817  1BF7               	btfsc	??_LCD_Customchar,7
  8624  0818  03F8               	decf	??_LCD_Customchar+1,f
  8625  0819  1003               	clrc
  8626  081A  0DF7               	rlf	??_LCD_Customchar,f
  8627  081B  0DF8               	rlf	??_LCD_Customchar+1,f
  8628  081C  1003               	clrc
  8629  081D  0DF7               	rlf	??_LCD_Customchar,f
  8630  081E  0DF8               	rlf	??_LCD_Customchar+1,f
  8631  081F  1003               	clrc
  8632  0820  0DF7               	rlf	??_LCD_Customchar,f
  8633  0821  0DF8               	rlf	??_LCD_Customchar+1,f
  8634  0822  0877               	movf	??_LCD_Customchar,w
  8635  0823  3E40               	addlw	64
  8636  0824  00F3               	movwf	__LCD_Command@cmd
  8637  0825  0878               	movf	??_LCD_Customchar+1,w
  8638  0826  1803               	skipnc
  8639  0827  3E01               	addlw	1
  8640  0828  3E00               	addlw	0
  8641  0829  00F4               	movwf	__LCD_Command@cmd+1
  8642  082A  160A  158A  2651  120A  158A  	fcall	__LCD_Command
  8643                           
  8644                           ;hd44780sz.c: 242: for (u=0; u<8; u++)
  8645  082F  01FB               	clrf	LCD_Customchar@u
  8646  0830  087B               	movf	LCD_Customchar@u,w
  8647  0831  3A80               	xorlw	128
  8648  0832  3E78               	addlw	-136
  8649  0833  1803               	btfsc	3,0
  8650  0834  2859               	goto	l3023
  8651  0835                     l3017:	
  8652                           
  8653                           ;hd44780sz.c: 243: {
  8654                           ;hd44780sz.c: 244: LCD_Putchar(b[u]);
  8655  0835  087B               	movf	LCD_Customchar@u,w
  8656  0836  0775               	addwf	LCD_Customchar@b,w
  8657  0837  00F8               	movwf	??_LCD_Customchar+1
  8658  0838  0876               	movf	LCD_Customchar@b+1,w
  8659  0839  00F7               	movwf	??_LCD_Customchar
  8660  083A  1803               	skipnc
  8661  083B  0AF7               	incf	??_LCD_Customchar,f
  8662  083C  1BFB               	btfsc	LCD_Customchar@u,7
  8663  083D  03F7               	decf	??_LCD_Customchar,f
  8664  083E  0877               	movf	??_LCD_Customchar,w
  8665  083F  00F9               	movwf	??_LCD_Customchar+2
  8666  0840  0879               	movf	??_LCD_Customchar+2,w
  8667  0841  1283               	bcf	3,5	;RP0=0, select bank0
  8668  0842  1303               	bcf	3,6	;RP1=0, select bank0
  8669  0843  00FF               	movwf	127
  8670  0844  0878               	movf	??_LCD_Customchar+1,w
  8671  0845  0084               	movwf	4
  8672  0846  160A  118A  2000  120A  158A  	fcall	stringtab
  8673  084B  160A  158A  2669  120A  158A  	fcall	_LCD_Putchar
  8674  0850  3001               	movlw	1
  8675  0851  00F7               	movwf	??_LCD_Customchar
  8676  0852  0877               	movf	??_LCD_Customchar,w
  8677  0853  07FB               	addwf	LCD_Customchar@u,f
  8678  0854  087B               	movf	LCD_Customchar@u,w
  8679  0855  3A80               	xorlw	128
  8680  0856  3E78               	addlw	-136
  8681  0857  1C03               	skipc
  8682  0858  2835               	goto	l3017
  8683  0859                     l3023:	
  8684                           
  8685                           ;hd44780sz.c: 245: }
  8686                           ;hd44780sz.c: 246: _LCD_Command(0x01);
  8687  0859  3001               	movlw	1
  8688  085A  00F3               	movwf	__LCD_Command@cmd
  8689  085B  3000               	movlw	0
  8690  085C  00F4               	movwf	__LCD_Command@cmd+1
  8691  085D  160A  158A  2651  120A  158A  	fcall	__LCD_Command
  8692                           
  8693                           ;hd44780sz.c: 247: _LCD_Command(0x0C);
  8694  0862  300C               	movlw	12
  8695  0863  00F3               	movwf	__LCD_Command@cmd
  8696  0864  3000               	movlw	0
  8697  0865  00F4               	movwf	__LCD_Command@cmd+1
  8698  0866  160A  158A  2651   	fcall	__LCD_Command
  8699  0869  0008               	return
  8700  086A                     __end_of_LCD_Customchar:	
  8701                           
  8702                           	psect	text30
  8703  1E69                     __ptext30:	
  8704 ;; *************** function _LCD_Putchar *****************
  8705 ;; Defined at:
  8706 ;;		line 146 in file "hd44780sz.c"
  8707 ;; Parameters:    Size  Location     Type
  8708 ;;  c               1    wreg     unsigned char 
  8709 ;; Auto vars:     Size  Location     Type
  8710 ;;  c               1    3[COMMON] unsigned char 
  8711 ;; Return value:  Size  Location     Type
  8712 ;;                  1    wreg      void 
  8713 ;; Registers used:
  8714 ;;		wreg, status,2, status,0, pclath, cstack
  8715 ;; Tracked objects:
  8716 ;;		On entry : 0/0
  8717 ;;		On exit  : 0/0
  8718 ;;		Unchanged: 0/0
  8719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8720 ;;      Params:         0       0       0       0       0
  8721 ;;      Locals:         1       0       0       0       0
  8722 ;;      Temps:          0       0       0       0       0
  8723 ;;      Totals:         1       0       0       0       0
  8724 ;;Total ram usage:        1 bytes
  8725 ;; Hardware stack levels used:    1
  8726 ;; Hardware stack levels required when called:    3
  8727 ;; This function calls:
  8728 ;;		__LCD_Sendbyte
  8729 ;; This function is called by:
  8730 ;;		_main
  8731 ;;		_LCD_Writeuns
  8732 ;;		_LCD_Writesig
  8733 ;;		_LCD_Writestr
  8734 ;;		_LCD_Customchar
  8735 ;; This function uses a non-reentrant model
  8736 ;;
  8737                           
  8738                           
  8739                           ;psect for function _LCD_Putchar
  8740  1E69                     _LCD_Putchar:	
  8741                           
  8742                           ;incstack = 0
  8743                           ; Regs used in _LCD_Putchar: [wreg+status,2+status,0+pclath+cstack]
  8744                           ;LCD_Putchar@c stored from wreg
  8745  1E69  00F3               	movwf	LCD_Putchar@c
  8746                           
  8747                           ;hd44780sz.c: 148: PORTDbits.RD2=1;
  8748  1E6A  1283               	bcf	3,5	;RP0=0, select bank0
  8749  1E6B  1303               	bcf	3,6	;RP1=0, select bank0
  8750  1E6C  1508               	bsf	8,2	;volatile
  8751                           
  8752                           ;hd44780sz.c: 149: _LCD_Sendbyte(c);
  8753  1E6D  0873               	movf	LCD_Putchar@c,w
  8754  1E6E  160A  118A  2159   	fcall	__LCD_Sendbyte
  8755  1E71  0008               	return
  8756  1E72                     __end_of_LCD_Putchar:	
  8757                           
  8758                           	psect	text31
  8759  1E59                     __ptext31:	
  8760 ;; *************** function _LCD_Clear *****************
  8761 ;; Defined at:
  8762 ;;		line 125 in file "hd44780sz.c"
  8763 ;; Parameters:    Size  Location     Type
  8764 ;;		None
  8765 ;; Auto vars:     Size  Location     Type
  8766 ;;		None
  8767 ;; Return value:  Size  Location     Type
  8768 ;;                  1    wreg      void 
  8769 ;; Registers used:
  8770 ;;		wreg, status,2, status,0, pclath, cstack
  8771 ;; Tracked objects:
  8772 ;;		On entry : 0/0
  8773 ;;		On exit  : 0/0
  8774 ;;		Unchanged: 0/0
  8775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8776 ;;      Params:         0       0       0       0       0
  8777 ;;      Locals:         0       0       0       0       0
  8778 ;;      Temps:          0       0       0       0       0
  8779 ;;      Totals:         0       0       0       0       0
  8780 ;;Total ram usage:        0 bytes
  8781 ;; Hardware stack levels used:    1
  8782 ;; Hardware stack levels required when called:    4
  8783 ;; This function calls:
  8784 ;;		__LCD_Command
  8785 ;; This function is called by:
  8786 ;;		_main
  8787 ;; This function uses a non-reentrant model
  8788 ;;
  8789                           
  8790                           
  8791                           ;psect for function _LCD_Clear
  8792  1E59                     _LCD_Clear:	
  8793                           
  8794                           ;hd44780sz.c: 127: _LCD_Command(0x01);
  8795                           
  8796                           ;incstack = 0
  8797                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  8798  1E59  3001               	movlw	1
  8799  1E5A  00F3               	movwf	__LCD_Command@cmd
  8800  1E5B  3000               	movlw	0
  8801  1E5C  00F4               	movwf	__LCD_Command@cmd+1
  8802  1E5D  160A  158A  2651   	fcall	__LCD_Command
  8803  1E60  0008               	return
  8804  1E61                     __end_of_LCD_Clear:	
  8805                           
  8806                           	psect	text32
  8807  1E51                     __ptext32:	
  8808 ;; *************** function __LCD_Command *****************
  8809 ;; Defined at:
  8810 ;;		line 313 in file "hd44780sz.c"
  8811 ;; Parameters:    Size  Location     Type
  8812 ;;  cmd             2    3[COMMON] int 
  8813 ;; Auto vars:     Size  Location     Type
  8814 ;;		None
  8815 ;; Return value:  Size  Location     Type
  8816 ;;                  1    wreg      void 
  8817 ;; Registers used:
  8818 ;;		wreg, status,2, status,0, pclath, cstack
  8819 ;; Tracked objects:
  8820 ;;		On entry : 0/0
  8821 ;;		On exit  : 0/0
  8822 ;;		Unchanged: 0/0
  8823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8824 ;;      Params:         2       0       0       0       0
  8825 ;;      Locals:         0       0       0       0       0
  8826 ;;      Temps:          0       0       0       0       0
  8827 ;;      Totals:         2       0       0       0       0
  8828 ;;Total ram usage:        2 bytes
  8829 ;; Hardware stack levels used:    1
  8830 ;; Hardware stack levels required when called:    3
  8831 ;; This function calls:
  8832 ;;		__LCD_Sendbyte
  8833 ;; This function is called by:
  8834 ;;		_LCD_Init
  8835 ;;		_LCD_Goto
  8836 ;;		_LCD_Clear
  8837 ;;		_LCD_Customchar
  8838 ;; This function uses a non-reentrant model
  8839 ;;
  8840                           
  8841                           
  8842                           ;psect for function __LCD_Command
  8843  1E51                     __LCD_Command:	
  8844                           
  8845                           ;hd44780sz.c: 315: PORTDbits.RD2=0;
  8846                           
  8847                           ;incstack = 0
  8848                           ; Regs used in __LCD_Command: [wreg+status,2+status,0+pclath+cstack]
  8849  1E51  1283               	bcf	3,5	;RP0=0, select bank0
  8850  1E52  1303               	bcf	3,6	;RP1=0, select bank0
  8851  1E53  1108               	bcf	8,2	;volatile
  8852                           
  8853                           ;hd44780sz.c: 316: _LCD_Sendbyte((char)cmd);
  8854  1E54  0873               	movf	__LCD_Command@cmd,w
  8855  1E55  160A  118A  2159   	fcall	__LCD_Sendbyte
  8856  1E58  0008               	return
  8857  1E59                     __end_of__LCD_Command:	
  8858                           
  8859                           	psect	text33
  8860  1159                     __ptext33:	
  8861 ;; *************** function __LCD_Sendbyte *****************
  8862 ;; Defined at:
  8863 ;;		line 304 in file "hd44780sz.c"
  8864 ;; Parameters:    Size  Location     Type
  8865 ;;  b               1    wreg     unsigned char 
  8866 ;; Auto vars:     Size  Location     Type
  8867 ;;  b               1    2[COMMON] unsigned char 
  8868 ;; Return value:  Size  Location     Type
  8869 ;;                  1    wreg      void 
  8870 ;; Registers used:
  8871 ;;		wreg, status,2, status,0, pclath, cstack
  8872 ;; Tracked objects:
  8873 ;;		On entry : 0/0
  8874 ;;		On exit  : 0/0
  8875 ;;		Unchanged: 0/0
  8876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8877 ;;      Params:         0       0       0       0       0
  8878 ;;      Locals:         1       0       0       0       0
  8879 ;;      Temps:          0       0       0       0       0
  8880 ;;      Totals:         1       0       0       0       0
  8881 ;;Total ram usage:        1 bytes
  8882 ;; Hardware stack levels used:    1
  8883 ;; Hardware stack levels required when called:    2
  8884 ;; This function calls:
  8885 ;;		__LCD_Isbusy
  8886 ;;		__LCD_Nibble
  8887 ;; This function is called by:
  8888 ;;		_LCD_Putchar
  8889 ;;		__LCD_Command
  8890 ;; This function uses a non-reentrant model
  8891 ;;
  8892                           
  8893                           
  8894                           ;psect for function __LCD_Sendbyte
  8895  1159                     __LCD_Sendbyte:	
  8896                           
  8897                           ;incstack = 0
  8898                           ; Regs used in __LCD_Sendbyte: [wreg+status,2+status,0+pclath+cstack]
  8899                           ;__LCD_Sendbyte@b stored from wreg
  8900  1159  00F2               	movwf	__LCD_Sendbyte@b
  8901  115A                     l2099:	
  8902                           ;hd44780sz.c: 306: while (_LCD_Isbusy());
  8903                           
  8904  115A  160A  158A  2795  160A  118A  	fcall	__LCD_Isbusy
  8905  115F  3A00               	xorlw	0
  8906  1160  1D03               	skipz
  8907  1161  295A               	goto	l2099
  8908                           
  8909                           ;hd44780sz.c: 307: _LCD_Nibble(b);
  8910  1162  0872               	movf	__LCD_Sendbyte@b,w
  8911  1163  160A  158A  26BE  160A  118A  	fcall	__LCD_Nibble
  8912                           
  8913                           ;hd44780sz.c: 308: b <<= 4;
  8914  1168  0EF2               	swapf	__LCD_Sendbyte@b,f
  8915  1169  30F0               	movlw	240
  8916  116A  05F2               	andwf	__LCD_Sendbyte@b,f
  8917                           
  8918                           ;hd44780sz.c: 309: _LCD_Nibble(b);
  8919  116B  0872               	movf	__LCD_Sendbyte@b,w
  8920  116C  160A  158A  26BE   	fcall	__LCD_Nibble
  8921  116F  0008               	return
  8922  1170                     __end_of__LCD_Sendbyte:	
  8923                           
  8924                           	psect	text34
  8925  1EBE                     __ptext34:	
  8926 ;; *************** function __LCD_Nibble *****************
  8927 ;; Defined at:
  8928 ;;		line 261 in file "hd44780sz.c"
  8929 ;; Parameters:    Size  Location     Type
  8930 ;;  nibble          1    wreg     unsigned char 
  8931 ;; Auto vars:     Size  Location     Type
  8932 ;;  nibble          1    1[COMMON] unsigned char 
  8933 ;; Return value:  Size  Location     Type
  8934 ;;                  1    wreg      void 
  8935 ;; Registers used:
  8936 ;;		wreg, status,2, status,0, pclath, cstack
  8937 ;; Tracked objects:
  8938 ;;		On entry : 0/0
  8939 ;;		On exit  : 0/0
  8940 ;;		Unchanged: 0/0
  8941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8942 ;;      Params:         0       0       0       0       0
  8943 ;;      Locals:         1       0       0       0       0
  8944 ;;      Temps:          0       0       0       0       0
  8945 ;;      Totals:         1       0       0       0       0
  8946 ;;Total ram usage:        1 bytes
  8947 ;; Hardware stack levels used:    1
  8948 ;; Hardware stack levels required when called:    1
  8949 ;; This function calls:
  8950 ;;		__LCD_Strobe
  8951 ;; This function is called by:
  8952 ;;		_LCD_Init
  8953 ;;		__LCD_Sendbyte
  8954 ;; This function uses a non-reentrant model
  8955 ;;
  8956                           
  8957                           
  8958                           ;psect for function __LCD_Nibble
  8959  1EBE                     __LCD_Nibble:	
  8960                           
  8961                           ;incstack = 0
  8962                           ; Regs used in __LCD_Nibble: [wreg+status,2+status,0+pclath+cstack]
  8963                           ;__LCD_Nibble@nibble stored from wreg
  8964  1EBE  00F1               	movwf	__LCD_Nibble@nibble
  8965                           
  8966                           ;hd44780sz.c: 264: if (nibble & 0b10000000)
  8967  1EBF  1FF1               	btfss	__LCD_Nibble@nibble,7
  8968  1EC0  2EC5               	goto	l181
  8969                           
  8970                           ;hd44780sz.c: 265: {
  8971                           ;hd44780sz.c: 266: PORTDbits.RD7=1;
  8972  1EC1  1283               	bcf	3,5	;RP0=0, select bank0
  8973  1EC2  1303               	bcf	3,6	;RP1=0, select bank0
  8974  1EC3  1788               	bsf	8,7	;volatile
  8975                           
  8976                           ;hd44780sz.c: 267: }
  8977  1EC4  2EC8               	goto	l182
  8978  1EC5                     l181:	
  8979                           
  8980                           ;hd44780sz.c: 268: else
  8981                           ;hd44780sz.c: 269: {
  8982                           ;hd44780sz.c: 270: PORTDbits.RD7=0;
  8983  1EC5  1283               	bcf	3,5	;RP0=0, select bank0
  8984  1EC6  1303               	bcf	3,6	;RP1=0, select bank0
  8985  1EC7  1388               	bcf	8,7	;volatile
  8986  1EC8                     l182:	
  8987                           
  8988                           ;hd44780sz.c: 271: }
  8989                           ;hd44780sz.c: 273: if (nibble & 0b01000000)
  8990  1EC8  1F71               	btfss	__LCD_Nibble@nibble,6
  8991  1EC9  2ECC               	goto	l183
  8992                           
  8993                           ;hd44780sz.c: 274: {
  8994                           ;hd44780sz.c: 275: PORTDbits.RD6=1;
  8995  1ECA  1708               	bsf	8,6	;volatile
  8996                           
  8997                           ;hd44780sz.c: 276: }
  8998  1ECB  2ECD               	goto	l184
  8999  1ECC                     l183:	
  9000                           
  9001                           ;hd44780sz.c: 277: else
  9002                           ;hd44780sz.c: 278: {
  9003                           ;hd44780sz.c: 279: PORTDbits.RD6=0;
  9004  1ECC  1308               	bcf	8,6	;volatile
  9005  1ECD                     l184:	
  9006                           
  9007                           ;hd44780sz.c: 280: }
  9008                           ;hd44780sz.c: 282: if (nibble & 0b00100000)
  9009  1ECD  1EF1               	btfss	__LCD_Nibble@nibble,5
  9010  1ECE  2ED1               	goto	l185
  9011                           
  9012                           ;hd44780sz.c: 283: {
  9013                           ;hd44780sz.c: 284: PORTDbits.RD5=1;
  9014  1ECF  1688               	bsf	8,5	;volatile
  9015                           
  9016                           ;hd44780sz.c: 285: }
  9017  1ED0  2ED2               	goto	l186
  9018  1ED1                     l185:	
  9019                           
  9020                           ;hd44780sz.c: 286: else
  9021                           ;hd44780sz.c: 287: {
  9022                           ;hd44780sz.c: 288: PORTDbits.RD5=0;
  9023  1ED1  1288               	bcf	8,5	;volatile
  9024  1ED2                     l186:	
  9025                           
  9026                           ;hd44780sz.c: 289: }
  9027                           ;hd44780sz.c: 291: if (nibble & 0b00010000)
  9028  1ED2  1E71               	btfss	__LCD_Nibble@nibble,4
  9029  1ED3  2ED6               	goto	l187
  9030                           
  9031                           ;hd44780sz.c: 292: {
  9032                           ;hd44780sz.c: 293: PORTDbits.RD4=1;
  9033  1ED4  1608               	bsf	8,4	;volatile
  9034                           
  9035                           ;hd44780sz.c: 294: }
  9036  1ED5  2ED7               	goto	l188
  9037  1ED6                     l187:	
  9038                           
  9039                           ;hd44780sz.c: 295: else
  9040                           ;hd44780sz.c: 296: {
  9041                           ;hd44780sz.c: 297: PORTDbits.RD4=0;
  9042  1ED6  1208               	bcf	8,4	;volatile
  9043  1ED7                     l188:	
  9044                           
  9045                           ;hd44780sz.c: 298: }
  9046                           ;hd44780sz.c: 299: _delay((unsigned long)((1)*(20000000/4000000.0)));
  9047  1ED7  2ED8               	nop2	;2 cycle nop
  9048  1ED8  2ED9               	nop2	;2 cycle nop
  9049  1ED9  0000               	nop
  9050                           
  9051                           ;hd44780sz.c: 300: _LCD_Strobe();
  9052  1EDA  160A  158A  2672   	fcall	__LCD_Strobe
  9053  1EDD  0008               	return
  9054  1EDE                     __end_of__LCD_Nibble:	
  9055                           
  9056                           	psect	text35
  9057  1F95                     __ptext35:	
  9058 ;; *************** function __LCD_Isbusy *****************
  9059 ;; Defined at:
  9060 ;;		line 320 in file "hd44780sz.c"
  9061 ;; Parameters:    Size  Location     Type
  9062 ;;		None
  9063 ;; Auto vars:     Size  Location     Type
  9064 ;;		None
  9065 ;; Return value:  Size  Location     Type
  9066 ;;                  1    wreg      unsigned char 
  9067 ;; Registers used:
  9068 ;;		wreg, status,2, status,0, pclath, cstack
  9069 ;; Tracked objects:
  9070 ;;		On entry : 0/0
  9071 ;;		On exit  : 0/0
  9072 ;;		Unchanged: 0/0
  9073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9074 ;;      Params:         0       0       0       0       0
  9075 ;;      Locals:         0       0       0       0       0
  9076 ;;      Temps:          0       0       0       0       0
  9077 ;;      Totals:         0       0       0       0       0
  9078 ;;Total ram usage:        0 bytes
  9079 ;; Hardware stack levels used:    1
  9080 ;; Hardware stack levels required when called:    1
  9081 ;; This function calls:
  9082 ;;		__LCD_Strobe
  9083 ;; This function is called by:
  9084 ;;		_LCD_Init
  9085 ;;		__LCD_Sendbyte
  9086 ;; This function uses a non-reentrant model
  9087 ;;
  9088                           
  9089                           
  9090                           ;psect for function __LCD_Isbusy
  9091  1F95                     __LCD_Isbusy:	
  9092                           
  9093                           ;hd44780sz.c: 322: static bool busyFlag;
  9094                           ;hd44780sz.c: 323: static bool tempRS;
  9095                           ;hd44780sz.c: 325: TRISDbits.TRISD7=1;
  9096                           
  9097                           ;incstack = 0
  9098                           ; Regs used in __LCD_Isbusy: [wreg+status,2+status,0+pclath+cstack]
  9099  1F95  1683               	bsf	3,5	;RP0=1, select bank1
  9100  1F96  1303               	bcf	3,6	;RP1=0, select bank1
  9101  1F97  1788               	bsf	8,7	;volatile
  9102                           
  9103                           ;hd44780sz.c: 326: TRISDbits.TRISD6=1;
  9104  1F98  1708               	bsf	8,6	;volatile
  9105                           
  9106                           ;hd44780sz.c: 327: TRISDbits.TRISD5=1;
  9107  1F99  1688               	bsf	8,5	;volatile
  9108                           
  9109                           ;hd44780sz.c: 328: TRISDbits.TRISD4=1;
  9110  1F9A  1608               	bsf	8,4	;volatile
  9111                           
  9112                           ;hd44780sz.c: 329: tempRS = PORTDbits.RD2;
  9113  1F9B  3000               	movlw	0
  9114  1F9C  1283               	bcf	3,5	;RP0=0, select bank0
  9115  1F9D  1303               	bcf	3,6	;RP1=0, select bank0
  9116  1F9E  1908               	btfsc	8,2	;volatile
  9117  1F9F  3001               	movlw	1
  9118  1FA0  00ED               	movwf	__LCD_Isbusy@tempRS
  9119                           
  9120                           ;hd44780sz.c: 330: PORTDbits.RD1=1;
  9121  1FA1  1488               	bsf	8,1	;volatile
  9122                           
  9123                           ;hd44780sz.c: 331: PORTDbits.RD2=0;
  9124  1FA2  1108               	bcf	8,2	;volatile
  9125                           
  9126                           ;hd44780sz.c: 332: PORTDbits.RD3=1;
  9127  1FA3  1588               	bsf	8,3	;volatile
  9128                           
  9129                           ;hd44780sz.c: 333: _delay((unsigned long)((1)*(20000000/4000000.0)));
  9130  1FA4  2FA5               	nop2	;2 cycle nop
  9131  1FA5  2FA6               	nop2	;2 cycle nop
  9132  1FA6  0000               	nop
  9133                           
  9134                           ;hd44780sz.c: 334: busyFlag=PORTDbits.RD7;
  9135  1FA7  3000               	movlw	0
  9136  1FA8  1283               	bcf	3,5	;RP0=0, select bank0
  9137  1FA9  1303               	bcf	3,6	;RP1=0, select bank0
  9138  1FAA  1B88               	btfsc	8,7	;volatile
  9139  1FAB  3001               	movlw	1
  9140  1FAC  00EE               	movwf	__LCD_Isbusy@busyFlag
  9141                           
  9142                           ;hd44780sz.c: 335: PORTDbits.RD3=0;
  9143  1FAD  1188               	bcf	8,3	;volatile
  9144                           
  9145                           ;hd44780sz.c: 336: _delay((unsigned long)((1)*(20000000/4000000.0)));
  9146  1FAE  2FAF               	nop2	;2 cycle nop
  9147  1FAF  2FB0               	nop2	;2 cycle nop
  9148  1FB0  0000               	nop
  9149                           
  9150                           ;hd44780sz.c: 337: _LCD_Strobe();
  9151  1FB1  160A  158A  2672   	fcall	__LCD_Strobe
  9152                           
  9153                           ;hd44780sz.c: 339: TRISDbits.TRISD7=0;
  9154  1FB4  1683               	bsf	3,5	;RP0=1, select bank1
  9155  1FB5  1303               	bcf	3,6	;RP1=0, select bank1
  9156  1FB6  1388               	bcf	8,7	;volatile
  9157                           
  9158                           ;hd44780sz.c: 340: TRISDbits.TRISD6=0;
  9159  1FB7  1308               	bcf	8,6	;volatile
  9160                           
  9161                           ;hd44780sz.c: 341: TRISDbits.TRISD5=0;
  9162  1FB8  1288               	bcf	8,5	;volatile
  9163                           
  9164                           ;hd44780sz.c: 342: TRISDbits.TRISD4=0;
  9165  1FB9  1208               	bcf	8,4	;volatile
  9166                           
  9167                           ;hd44780sz.c: 343: PORTDbits.RD1=0;
  9168  1FBA  1283               	bcf	3,5	;RP0=0, select bank0
  9169  1FBB  1303               	bcf	3,6	;RP1=0, select bank0
  9170  1FBC  1088               	bcf	8,1	;volatile
  9171                           
  9172                           ;hd44780sz.c: 344: PORTDbits.RD2=tempRS;
  9173  1FBD  0C6D               	rrf	__LCD_Isbusy@tempRS,w
  9174  1FBE  1C03               	skipc
  9175  1FBF  1108               	bcf	8,2	;volatile
  9176  1FC0  1803               	skipnc
  9177  1FC1  1508               	bsf	8,2	;volatile
  9178                           
  9179                           ;hd44780sz.c: 345: return (busyFlag);
  9180  1FC2  086E               	movf	__LCD_Isbusy@busyFlag,w
  9181  1FC3  0008               	return
  9182  1FC4                     __end_of__LCD_Isbusy:	
  9183                           
  9184                           	psect	text36
  9185  1E72                     __ptext36:	
  9186 ;; *************** function __LCD_Strobe *****************
  9187 ;; Defined at:
  9188 ;;		line 253 in file "hd44780sz.c"
  9189 ;; Parameters:    Size  Location     Type
  9190 ;;		None
  9191 ;; Auto vars:     Size  Location     Type
  9192 ;;		None
  9193 ;; Return value:  Size  Location     Type
  9194 ;;                  1    wreg      void 
  9195 ;; Registers used:
  9196 ;;		wreg
  9197 ;; Tracked objects:
  9198 ;;		On entry : 0/0
  9199 ;;		On exit  : 0/0
  9200 ;;		Unchanged: 0/0
  9201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9202 ;;      Params:         0       0       0       0       0
  9203 ;;      Locals:         0       0       0       0       0
  9204 ;;      Temps:          1       0       0       0       0
  9205 ;;      Totals:         1       0       0       0       0
  9206 ;;Total ram usage:        1 bytes
  9207 ;; Hardware stack levels used:    1
  9208 ;; This function calls:
  9209 ;;		Nothing
  9210 ;; This function is called by:
  9211 ;;		_LCD_Init
  9212 ;;		__LCD_Nibble
  9213 ;;		__LCD_Isbusy
  9214 ;; This function uses a non-reentrant model
  9215 ;;
  9216                           
  9217                           
  9218                           ;psect for function __LCD_Strobe
  9219  1E72                     __LCD_Strobe:	
  9220                           
  9221                           ;hd44780sz.c: 255: PORTDbits.RD3=1;
  9222                           
  9223                           ;incstack = 0
  9224                           ; Regs used in __LCD_Strobe: [wreg]
  9225  1E72  1283               	bcf	3,5	;RP0=0, select bank0
  9226  1E73  1303               	bcf	3,6	;RP1=0, select bank0
  9227  1E74  1588               	bsf	8,3	;volatile
  9228                           
  9229                           ;hd44780sz.c: 256: _delay((unsigned long)((2)*(20000000/4000000.0)));
  9230  1E75  3003               	movlw	3
  9231  1E76  00F0               	movwf	??__LCD_Strobe
  9232  1E77                     u4477:	
  9233  1E77  0BF0               	decfsz	??__LCD_Strobe,f
  9234  1E78  2E77               	goto	u4477
  9235                           
  9236                           ;hd44780sz.c: 257: PORTDbits.RD3=0;
  9237  1E79  1283               	bcf	3,5	;RP0=0, select bank0
  9238  1E7A  1303               	bcf	3,6	;RP1=0, select bank0
  9239  1E7B  1188               	bcf	8,3	;volatile
  9240  1E7C  0008               	return
  9241  1E7D                     __end_of__LCD_Strobe:	
  9242                           
  9243                           	psect	text37
  9244  1E7D                     __ptext37:	
  9245 ;; *************** function _LCD_Backlight *****************
  9246 ;; Defined at:
  9247 ;;		line 132 in file "hd44780sz.c"
  9248 ;; Parameters:    Size  Location     Type
  9249 ;;  backlight       1    wreg     unsigned char 
  9250 ;; Auto vars:     Size  Location     Type
  9251 ;;  backlight       1    0[COMMON] unsigned char 
  9252 ;; Return value:  Size  Location     Type
  9253 ;;                  1    wreg      void 
  9254 ;; Registers used:
  9255 ;;		wreg, status,2, status,0
  9256 ;; Tracked objects:
  9257 ;;		On entry : 0/0
  9258 ;;		On exit  : 0/0
  9259 ;;		Unchanged: 0/0
  9260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9261 ;;      Params:         0       0       0       0       0
  9262 ;;      Locals:         1       0       0       0       0
  9263 ;;      Temps:          0       0       0       0       0
  9264 ;;      Totals:         1       0       0       0       0
  9265 ;;Total ram usage:        1 bytes
  9266 ;; Hardware stack levels used:    1
  9267 ;; This function calls:
  9268 ;;		Nothing
  9269 ;; This function is called by:
  9270 ;;		_main
  9271 ;; This function uses a non-reentrant model
  9272 ;;
  9273                           
  9274                           
  9275                           ;psect for function _LCD_Backlight
  9276  1E7D                     _LCD_Backlight:	
  9277                           
  9278                           ;incstack = 0
  9279                           ; Regs used in _LCD_Backlight: [wreg+status,2+status,0]
  9280                           ;LCD_Backlight@backlight stored from wreg
  9281  1E7D  00F0               	movwf	LCD_Backlight@backlight
  9282                           
  9283                           ;hd44780sz.c: 134: if (backlight)
  9284  1E7E  0870               	movf	LCD_Backlight@backlight,w
  9285  1E7F  1903               	btfsc	3,2
  9286  1E80  2E85               	goto	l129
  9287                           
  9288                           ;hd44780sz.c: 135: {
  9289                           ;hd44780sz.c: 136: PORTCbits.RC1=1;
  9290  1E81  1283               	bcf	3,5	;RP0=0, select bank0
  9291  1E82  1303               	bcf	3,6	;RP1=0, select bank0
  9292  1E83  1487               	bsf	7,1	;volatile
  9293                           
  9294                           ;hd44780sz.c: 137: }
  9295  1E84  0008               	return
  9296  1E85                     l129:	
  9297                           
  9298                           ;hd44780sz.c: 138: else
  9299                           ;hd44780sz.c: 139: {
  9300                           ;hd44780sz.c: 140: PORTCbits.RC1=0;
  9301  1E85  1283               	bcf	3,5	;RP0=0, select bank0
  9302  1E86  1303               	bcf	3,6	;RP1=0, select bank0
  9303  1E87  1087               	bcf	7,1	;volatile
  9304  1E88  0008               	return
  9305  1E89                     __end_of_LCD_Backlight:	
  9306  007E                     btemp	set	126	;btemp
  9307  007E                     wtemp0	set	126


Data Sizes:
    Strings     111
    Constant    214
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     77      79
    BANK1            80     58      58
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_11(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), STR_8(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> LCD_Writeflo@buf(BANK1[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    LCD_Customchar@b	PTR const unsigned char  size(2) Largest target is 8
		 -> ghost(CODE[8]), dot(CODE[8]), pacmanl(CODE[8]), pacmanr(CODE[8]), 
		 -> sad(CODE[8]), smile(CODE[8]), teschio(CODE[8]), sole(CODE[8]), 
		 -> invader(CODE[8]), cuore(CODE[8]), stop(CODE[8]), play(CODE[8]), 

    LCD_Writestr@s	PTR const unsigned char  size(2) Largest target is 20
		 -> LCD_Writeflo@buf(BANK1[20]), STR_7(CODE[16]), STR_6(CODE[17]), STR_5(CODE[9]), 
		 -> STR_4(CODE[9]), STR_3(CODE[11]), STR_2(CODE[16]), STR_1(CODE[13]), 


Critical Paths under _main in COMMON

    _LCD_Writesig->_LCD_Writeuns
    _LCD_Writeuns->___lwdiv
    _sprintf->___lldiv
    _sprintf->___lltoft
    _sprintf->__div_to_l_
    _scale->___bmul
    _fround->___bmul
    ___ftmul->___bmul
    ___bmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___ftsub->___lltoft
    _LCD_Writestr->_LCD_Putchar
    _LCD_Init->__LCD_Command
    _LCD_Goto->__LCD_Command
    _LCD_Customchar->__LCD_Command
    _LCD_Putchar->__LCD_Sendbyte
    _LCD_Clear->__LCD_Command
    __LCD_Command->__LCD_Sendbyte
    __LCD_Sendbyte->__LCD_Nibble
    __LCD_Nibble->__LCD_Strobe
    __LCD_Isbusy->__LCD_Strobe

Critical Paths under _main in BANK0

    _main->_LCD_Writeflo
    _LCD_Writesig->_LCD_Writeuns
    _LCD_Writeflo->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___bmul
    ___bmul->___awdiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _main in BANK1

    _main->_LCD_Writeflo
    _LCD_Writeflo->_sprintf

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0   54527
                                             74 BANK0      3     3      0
                                             43 BANK1     15    15      0
                      _LCD_Backlight
                          _LCD_Clear
                     _LCD_Customchar
                           _LCD_Goto
                           _LCD_Init
                        _LCD_Putchar
                       _LCD_Writeflo
                       _LCD_Writesig
                       _LCD_Writestr
                       _LCD_Writeuns
                           _settings
 ---------------------------------------------------------------------------------
 (1) _settings                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Writesig                                         2     0      2    5055
                                              5 BANK0      2     0      2
                        _LCD_Putchar
                       _LCD_Writeuns
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _LCD_Writeuns                                         9     7      2    2797
                                              8 COMMON     4     2      2
                                              0 BANK0      5     5      0
                        _LCD_Putchar
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     290
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _LCD_Writeflo                                        25    21      4   39358
                                             69 BANK0      5     1      4
                                             23 BANK1     20    20      0
                       _LCD_Writestr
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             41    36      5   37976
                                             58 BANK0     11     6      5
                                              0 BANK1     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                                9     6      3    8180
                                             23 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              16    13      3    7982
                                             23 BANK0     16    13      3
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    4149
                                              7 BANK0     16    10      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                             ___bmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     560
                                             12 COMMON     1     1      0
                                              4 BANK0      3     2      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4    1448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1580
                                              7 COMMON     5     1      4
                                              0 BANK0      4     4      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         16    10      6     431
                                              0 COMMON    10     4      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          20    14      6     574
                                              0 COMMON    14     8      6
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1972
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             6     2      4    2164
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     543
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     418
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     444
                                             32 BANK0     14    10      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3322
                                             52 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3127
                                             39 BANK0     13     7      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2031
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     109
                                              0 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                              12     6      6     648
                                              0 COMMON    12     6      6
 ---------------------------------------------------------------------------------
 (1) _LCD_Writestr                                         2     0      2     712
                                              4 COMMON     2     0      2
                        _LCD_Putchar
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             3     3      0    1139
                                              5 COMMON     3     3      0
                       __LCD_Command
                        __LCD_Isbusy
                        __LCD_Nibble
                        __LCD_Strobe
 ---------------------------------------------------------------------------------
 (1) _LCD_Goto                                             3     2      1    1783
                                              5 COMMON     3     2      1
                       __LCD_Command
 ---------------------------------------------------------------------------------
 (1) _LCD_Customchar                                       7     5      2    2108
                                              5 COMMON     7     5      2
                        _LCD_Putchar
                       __LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Putchar                                          1     1      0     155
                                              3 COMMON     1     1      0
                      __LCD_Sendbyte
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0    1051
                       __LCD_Command
 ---------------------------------------------------------------------------------
 (2) __LCD_Command                                         2     0      2    1051
                                              3 COMMON     2     0      2
                      __LCD_Sendbyte
 ---------------------------------------------------------------------------------
 (3) __LCD_Sendbyte                                        1     1      0     133
                                              2 COMMON     1     1      0
                        __LCD_Isbusy
                        __LCD_Nibble
 ---------------------------------------------------------------------------------
 (4) __LCD_Nibble                                          1     1      0      88
                                              1 COMMON     1     1      0
                        __LCD_Strobe
 ---------------------------------------------------------------------------------
 (4) __LCD_Isbusy                                          0     0      0       0
                        __LCD_Strobe
 ---------------------------------------------------------------------------------
 (5) __LCD_Strobe                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Backlight                                        1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Backlight
   _LCD_Clear
     __LCD_Command
       __LCD_Sendbyte
         __LCD_Isbusy
           __LCD_Strobe
         __LCD_Nibble
           __LCD_Strobe
   _LCD_Customchar
     _LCD_Putchar
       __LCD_Sendbyte
         __LCD_Isbusy
           __LCD_Strobe
         __LCD_Nibble
           __LCD_Strobe
     __LCD_Command
       __LCD_Sendbyte
         __LCD_Isbusy
           __LCD_Strobe
         __LCD_Nibble
           __LCD_Strobe
   _LCD_Goto
     __LCD_Command
       __LCD_Sendbyte
         __LCD_Isbusy
           __LCD_Strobe
         __LCD_Nibble
           __LCD_Strobe
   _LCD_Init
     __LCD_Command
       __LCD_Sendbyte
         __LCD_Isbusy
           __LCD_Strobe
         __LCD_Nibble
           __LCD_Strobe
     __LCD_Isbusy
       __LCD_Strobe
     __LCD_Nibble
       __LCD_Strobe
     __LCD_Strobe
   _LCD_Putchar
     __LCD_Sendbyte
       __LCD_Isbusy
         __LCD_Strobe
       __LCD_Nibble
         __LCD_Strobe
   _LCD_Writeflo
     _LCD_Writestr
       _LCD_Putchar
         __LCD_Sendbyte
           __LCD_Isbusy
             __LCD_Strobe
           __LCD_Nibble
             __LCD_Strobe
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftpack (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___bmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___bmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             ___ftpack (ARG)
       ___lldiv
       ___llmod
       ___lltoft
         ___ftpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___bmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           ___ftpack (ARG)
   _LCD_Writesig
     _LCD_Putchar
       __LCD_Sendbyte
         __LCD_Isbusy
           __LCD_Strobe
         __LCD_Nibble
           __LCD_Strobe
     _LCD_Writeuns
       _LCD_Putchar
         __LCD_Sendbyte
           __LCD_Isbusy
             __LCD_Strobe
           __LCD_Nibble
             __LCD_Strobe
       ___lwdiv
       ___wmul
     ___wmul
   _LCD_Writestr
     _LCD_Putchar
       __LCD_Sendbyte
         __LCD_Isbusy
           __LCD_Strobe
         __LCD_Nibble
           __LCD_Strobe
   _LCD_Writeuns
     _LCD_Putchar
       __LCD_Sendbyte
         __LCD_Isbusy
           __LCD_Strobe
         __LCD_Nibble
           __LCD_Strobe
     ___lwdiv
     ___wmul
   _settings

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      97       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4D      4F       5       98.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     3A      3A       7       72.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      97      12        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Oct 06 16:39:22 2017

                      pc 0002           ___bmul@product 0025              __CFG_CP$OFF 0000  
         _LCD_Customchar 0805                       l71 0F74             ___awdiv@sign 0021  
                     fsr 0004      ___wmul@multiplicand 0072             ___ftadd@exp1 0053  
           ___ftadd@exp2 0052             ___ftadd@sign 0051                      l123 1259  
                    l115 1211                      l129 1E85                      l145 135B  
                    l251 0228                      l244 01DB                      l181 1EC5  
                    l182 1EC8                      l183 1ECC                      l184 1ECD  
                    l185 1ED1                      l186 1ED2                      l187 1ED6  
                    l188 1ED7                      l540 013D                      l292 0787  
                    l382 1F09                      l294 07CF                      l560 13B4  
                    l617 1593                      l627 1618                      l548 0186  
                    l567 13C9                      l591 179F                      l568 13D1  
                    l668 1547             __CFG_CPD$OFF 0000                      _dot 1090  
                    _sad 10A8                      fsr0 0004                      indf 0000  
           ?_LCD_Putchar 0070             ___awmod@sign 0076             __CFG_FOSC$HS 0000  
            _sprintf$818 00A0             __CFG_LVP$OFF 0000                     l2113 1EA1  
                   l3001 1444                     l3003 1454                     l2213 1727  
                   l2109 1E9B                     l2301 16A1                     l3023 0859  
                   l2231 1750                     l2135 1271                     l3017 0835  
                   l2073 138D                     l2241 1776                     l2209 1720  
                   l2161 12B0                     l2153 129D                     l2145 1279  
                   l2129 1266                     l2313 16C9                     l2083 13B9  
                   l2075 1399                     l2251 179B                     l2243 177A  
                   l2219 1736                     l2147 1287                     l3203 0FFA  
                   l3027 0CF7                     l2085 13C3                     l2077 139E  
                   l2069 1386                     l2237 1765                     l2501 0189  
                   l2421 15B4                     l2157 12A8                     l2173 117A  
                   l2309 16B9                     l3133 0EDC                     l2255 17B1  
                   l2239 1771                     l2407 157B                     l2191 11A3  
                   l3151 0F18                     l2249 178F                     l2441 1600  
                   l2185 1187                     l2177 1181                     l2345 09E6  
                   l2337 0954                     l2361 0AEC                     l3161 0F49  
                   l3145 0F05                     l2099 115A                     l2523 002A  
                   l2259 17C3                     l2603 12C5                     l2507 1F01  
                   l2187 1195                     l2195 11AE                     l2371 0B85  
                   l2269 17E6                     l2613 12FD                     l2605 12D5  
                   l2429 15D4                     l2285 1652                     l2527 0051  
                   l2551 1EE7                     l2447 160D                     l2439 15F0  
                   l2199 11B6                     l2279 163C                     l2367 0B62  
                   l2703 132A                     l3191 0FB8                     l3159 0F24  
                   l2561 14ED                     l2617 130A                     l2633 11F1  
                   l2465 00A0                     l2449 161B                     l2297 1691  
                   l2385 0CC4                     l2801 03D7                     l2705 1338  
                   l2627 11C3                     l2491 015E                     l2475 00E7  
                   l2459 0081                     l2379 0C4E                     l2581 152F  
                   l2629 11D3                     l2637 11FE                     l2645 1F6E  
                   l2493 016E                     l2397 1E95                     l2813 042C  
                   l2733 01BE                     l2661 1FCC                     l2647 1F80  
                   l2823 046E                     l2751 022A                     l2663 1FDA  
                   l2593 1558                     l2833 04E3                     l2809 0415  
                   l2753 0246                     l2745 0222                     l2673 1FFB  
                   l2683 1F20                     l2587 153C                     l2579 151F  
                   l2499 017B                     l2907 07AD                     l2827 04DD  
                   l2915 019D                     l2589 154A                     l2861 05E2  
                   l2853 0558                     l2917 07F3                     l2669 1FF0  
                   l2693 131B                     l2855 05C9                     l2839 0537  
                   l2759 025E                     l2695 131F                     l2793 0374  
                   l2785 0307                     l2769 029D                     l2697 1323  
                   l2963 121B                     l2891 0757                     l2875 062F  
                   l2867 05FC                     l2699 1325                     l2965 1227  
                   l2973 124B                     l2949 149F                     l2797 0391  
                   l2981 1F62                     l2967 1233                     l2991 13FA  
                   l2969 123F                     l2897 0770                     l2993 140B  
                   l2899 0775                     l2995 141E                     l2987 13F4  
                   l2997 1431                     STR_1 1119                     STR_2 1109  
                   STR_3 1126                     STR_4 1131                     STR_5 113A  
                   STR_6 10E8                     STR_7 10F9                     STR_8 1143  
                   STR_9 1148                     u3115 15F1                     u2325 13D8  
                   u2245 1392                     u2405 127C                     u4005 05EB  
                   u3055 15B6                     u4015 05F8                     u2265 13AD  
                   u3305 1F11                     u3145 160F                     u3065 15C7  
                   u2425 1288                     u2505 118A                     u4105 07C6  
                   u3331 001D                     u3235 015F                     u3075 15D5  
                   u2435 1294                     u4035 06A3                     u3332 001E  
                   u3333 0023                     u2285 13BC                     u3405 14F4  
                   u2445 129E                     u2525 119B                     u4045 0719  
                   u3334 0024                     u3351 0044                     u2535 11A4  
                   u3352 0045                     u3353 004A                     u3505 12C9  
                   u3265 017D                     u3185 00E9                     u3354 004B  
                   u2715 177B                     u3435 1520                     u3195 0118  
                   u4315 0F38                     u3525 12D7                     u3605 11F2  
                   u2655 1751                     u3535 12EC                     u3295 1F0A  
                   u4095 07A0                     u4407 0F8B                     u2745 1790  
                   u3465 153E                     u3545 12FE                     u3625 1F73  
                   u2825 165E                     u4417 0FA2                     u2915 16CA  
                   u2835 1670                     u4427 0FE7                     u4437 1471  
                   u2685 1766                     u2925 16D2                     u4357 0D19  
                   u4447 1481                     u3575 11C7                     u3655 1FCF  
                   u4367 0D5A                     u4457 148D                     u2865 16A2  
                   u4377 0DE7                     u4467 1497                     u3595 11E1  
                   u2875 16AA                     u3915 0413                     u3835 02B7  
                   u3675 1FDB                     u4387 0E90                     u4477 1E77  
                   u3685 1FE7                     u4397 0F61                     u3695 1FF1  
                   u3945 04E8                     u3955 0529                     u3875 039C  
                   u3885 03E2                     u3985 0567             __CFG_WRT$OFF 0000  
                   _main 0CE7             ___ftpack@arg 0070       __size_of_LCD_Clear 0008  
           ___ftpack@exp 0073                     _play 10E0                     _sole 10C0  
                   btemp 007E                     _stop 10D8              main@numeroa 00CB  
            main@numerob 00CE              main@numeroc 00D1                     start 0000  
          __CFG_IESO$OFF 0000              LCD_Goto@col 0075        ___bmul@multiplier 0026  
            LCD_Goto@row 0077            __CFG_MCLRE$ON 0000            ?_LCD_Writeflo 0065  
           ___ftmul@cntr 0035            ?_LCD_Writesig 0025            ?_LCD_Writeuns 0078  
          ?_LCD_Writestr 0074             ___ftmul@sign 0036   __end_of_LCD_Customchar 086A  
           ___fttol@exp1 004D             ___fttol@lval 0049         __end_of_LCD_Init 14D3  
       __end_of_LCD_Goto 125A                    ?_main 0070          __end_of___awdiv 12B5  
        __end_of___ftadd 1800                    STR_10 114D                    STR_11 1152  
          __CFG_WDTE$OFF 0000          __end_of___awmod 11BB          __end_of___ftneg 1E69  
                  _ANSEL 0188          __end_of___lldiv 1313          __end_of___ftmul 16F7  
        ___awdiv@divisor 0077          __end_of___llmod 1207          __end_of___ftsub 1EFF  
        __end_of___fttol 1561          __end_of___lwdiv 2000              __LCD_Nibble 1EBE  
        ___awdiv@counter 0020              __LCD_Isbusy 1F95                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _TRISD 0088  
                  _TRISE 0089            __CFG_PWRTE$ON 0000             ___lltoft@exp 007D  
         __CFG_FCMEN$OFF 0000              __LCD_Strobe 1E72          __end_of_pacmanl 10A0  
        __end_of_pacmanr 10A8          __end_of_dpowers 103A                    _ghost 1088  
                  _cuore 10D0                    _scale 0A1C          __end_of_isdigit 1E97  
        __end_of_invader 10D0            ___ftpack@sign 0074                    _smile 10B0  
                  main@a 00D9                    main@b 00D7                    main@c 00D6  
         __CFG_BOREN$OFF 0000                    pclath 000A          __end_of_teschio 10C0  
                  status 0003                    wtemp0 007E          __end_of_sprintf 07F8  
        LCD_Customchar@b 0075          LCD_Customchar@u 007B          ??_LCD_Backlight 0070  
  __size_of__LCD_Command 0008           ??_LCD_Writeflo 0069           ??_LCD_Writesig 007C  
         ??_LCD_Writeuns 007A           ??_LCD_Writestr 0076          __initialization 07F8  
        ?_LCD_Customchar 0075             __end_of_main 1000             __end_of_play 10E8  
           __end_of_sole 10C8             __end_of_stop 10E0                   ??_main 006A  
          ___fttol@sign1 0048        __end_of_LCD_Clear 1E61     __size_of__tdiv_to_l_ 00C3  
       ___llmod@dividend 0074                   ?_scale 0037         ___awdiv@dividend 0079  
       __end_of___ftpack 13EA                   _ANSELH 0189             __LCD_Command 1E51  
       __end_of___lltoft 1F95             LCD_Putchar@c 0073         __end_of__powers_ 1061  
                 ___bmul 1E97                   ___ftge 0003                   ___wmul 1EFF  
              ??___awdiv 007B                ??___ftadd 004D                ??___awmod 0074  
              ??___ftneg 0073                ??___lldiv 0078                ??___ftmul 002D  
              ??___llmod 0078                ??___ftsub 007E                ??___fttol 0044  
              ??___lwdiv 0074                   _fround 086A         ___awdiv@quotient 0022  
        ___awmod@divisor 0070          ___awmod@counter 0075    ___ftmul@f3_as_product 0032  
              ??_isdigit 0070         __end_of_settings 1EBE     __size_of_LCD_Putchar 0009  
              ??_sprintf 005F  __end_of__initialization 07FC                ?_LCD_Init 0070  
              ?_LCD_Goto 0075               ___ftadd@f1 0047               ___ftadd@f2 004A  
             ___ftge@ff1 0070               ___ftge@ff2 0073               ___ftneg@f1 0070  
    ___bmul@multiplicand 0024               ___ftmul@f1 0027               ___ftmul@f2 002A  
             ___ftsub@f1 0057               ___ftsub@f2 0054               ___fttol@f1 0040  
         __pcstackCOMMON 0070               ___lltoft@c 0078            __end_of_ghost 1090  
          __end_of_cuore 10D8            __end_of_scale 0CE7   __size_of__LCD_Sendbyte 0017  
          __end_of_smile 10B8               __div_to_l_ 0060     __end_of_LCD_Writeflo 145C  
   __end_of_LCD_Writesig 1F6A     __end_of_LCD_Writeuns 137E     __end_of_LCD_Writestr 1F43  
        __div_to_l_@exp1 0025          __div_to_l_@cntr 0024                  ??_scale 003A  
        __div_to_l_@quot 0020               __pbssBANK0 006D               ??_LCD_Init 0075  
             ??_LCD_Goto 0076            __div_to_l_@f1 0070            __div_to_l_@f2 0073  
             __pmaintext 0CE7                  ?___bmul 0024                  ?___ftge 0070  
                ?___wmul 0070     __LCD_Isbusy@busyFlag 006E                  ?_fround 0037  
              ?___ftpack 0070                ?___lltoft 0078             ?__LCD_Nibble 0070  
           ?__LCD_Isbusy 0070             ?__LCD_Strobe 0070               __stringtab 1000  
          __LCD_Sendbyte 1159         ??_LCD_Customchar 0077        __end_of__npowers_ 1088  
              ?_settings 0070          __size_of___bmul 0013          __size_of___ftge 005D  
                ___awdiv 125A                  ___ftadd 16F7                  ___awmod 1170  
                ___ftneg 1E61                  ___lldiv 12B5          __size_of___wmul 0021  
                ___ftmul 1624                  ___llmod 11BB                  ___ftsub 1EDE  
                ___fttol 14D3               _fround$815 0043                  ___lwdiv 1FC4  
             _fround$816 0040            LCD_Writeflo@c 0065            LCD_Writeflo@p 0068  
          LCD_Writesig@c 0025            LCD_Writeuns@c 0078            LCD_Writeuns@i 0024  
          LCD_Writeuns@k 0021            LCD_Writestr@s 0074               ??___ftpack 0075  
        __size_of_fround 01B2               ??___lltoft 007C                  __ptext1 1EAA  
                __ptext2 1F43                  __ptext3 1313                  __ptext4 1FC4  
                __ptext5 13EA                  __ptext6 0192                  __ptext7 0A1C  
                __ptext8 1E89                  __ptext9 086A              ?__div_to_l_ 0070  
                _pacmanl 1098                  _pacmanr 10A0                  _dpowers 1012  
                _isdigit 1E89                  _invader 10C8         ___awmod@dividend 0072  
                _teschio 10B8                _LCD_Clear 1E59           ?__LCD_Sendbyte 0070  
                _sprintf 0192     end_of_initialization 07FC          ___lldiv@divisor 0070  
        ___lldiv@counter 007D    __end_of_LCD_Backlight 1E89               ??_settings 0070  
           __pstringtext 1000           __tdiv_to_l_@f1 0070           __tdiv_to_l_@f2 0073  
          ??__tdiv_to_l_ 0076    __size_of_LCD_Writeflo 0072                _PORTCbits 0007  
              _PORTDbits 0008    __size_of_LCD_Writesig 0027    __size_of_LCD_Writeuns 006B  
  __size_of_LCD_Writestr 0023        LCD_Customchar@pos 007A                _TRISCbits 0087  
              _TRISDbits 0088               ?_LCD_Clear 0070          __LCD_Sendbyte@b 0072  
      __size_of_LCD_Init 0077        __size_of_LCD_Goto 0053      __size_of__div_to_l_ 0132  
            ___ftmul@exp 0031             _LCD_Writeflo 13EA             _LCD_Writesig 1F43  
           _LCD_Writeuns 1313             _LCD_Writestr 1F20           __end_of___bmul 1EAA  
         __end_of___ftge 0060           __end_of___wmul 1F20           __end_of_fround 0A1C  
          ??_LCD_Putchar 0073      start_initialization 07F8     __size_of__LCD_Nibble 0020  
        ??__LCD_Sendbyte 0072      __end_of__tdiv_to_l_ 1624     __size_of__LCD_Isbusy 002F  
            __end_of_dot 1098              __end_of_sad 10B0     __size_of__LCD_Strobe 000B  
        ___llmod@divisor 0070          ___llmod@counter 0079                 ??___bmul 007C  
               ??___ftge 0076       __LCD_Nibble@nibble 0071                 ??___wmul 0074  
               ??_fround 003A            sprintf@tmpval 00AC               fround@prec 0046  
      __size_of___ftpack 006C        __size_of___lltoft 002B                ___latbits 0002  
          __pcstackBANK0 0020            __pcstackBANK1 00A0              ??_LCD_Clear 0075  
      LCD_Writeuns@wrote 0020          LCD_Writeflo@buf 00B7      __end_of_LCD_Putchar 1E72  
            sprintf@flag 00A4              sprintf@fval 00B3              sprintf@prec 00B0  
       ___lwdiv@dividend 0072                 ?___awdiv 0077                 ?___ftadd 0047  
               ?___awmod 0070                 ?___ftneg 0070                 ?___lldiv 0070  
               ?___ftmul 0027                 ?___llmod 0070                 ?___ftsub 0054  
              __npowers_ 1061                 ?___fttol 0040                 ?___lwdiv 0070  
      __size_of_settings 0014              __tdiv_to_l_ 1561             ??__div_to_l_ 0076  
               ?_isdigit 0070                _scale$817 003C         ___lwdiv@quotient 0075  
               ?_sprintf 005A           __size_of_scale 02CB            ?__LCD_Command 0073  
               _LCD_Init 145C                 _LCD_Goto 1207           ___wmul@product 0074  
     __end_of__div_to_l_ 0192                main@b_163 00D4               _ADCON0bits 001F  
            __stringbase 1012        ___wmul@multiplier 0070              _LCD_Putchar 1E69  
         ??__LCD_Command 0075         __size_of___awdiv 005B         __size_of___ftadd 0109  
       __size_of___awmod 004B         __size_of___ftneg 0008         __size_of___lldiv 005E  
       __size_of___ftmul 00D3         __size_of___llmod 004C         __size_of___ftsub 0021  
       __size_of___fttol 008E  __size_of_LCD_Customchar 0065         __size_of___lwdiv 003C  
               ___ftpack 137E       __end_of__stringtab 1012                 ___lltoft 1F6A  
            _isdigit$611 0070               sprintf@exp 00AA               sprintf@val 00A6  
         LCD_Writeuns@t1 0023         __size_of_isdigit 000E         __LCD_Command@cmd 0073  
        ___lwdiv@divisor 0070          ___lwdiv@counter 0077                 __ptext10 1624  
               __ptext11 1E97                 __ptext20 14D3                 __ptext12 1170  
               __ptext21 1EDE                 __ptext13 125A                 __ptext30 1E69  
               __ptext22 16F7                 __ptext14 1561                 __ptext31 1E59  
               __ptext23 137E                 __ptext15 0060                 __ptext32 1E51  
               __ptext24 1E61                 __ptext16 1EFF                 __ptext33 1159  
               __ptext25 0003                 __ptext17 1F6A                 __ptext34 1EBE  
               __ptext26 1F20                 __ptext18 11BB                 __ptext35 1F95  
               __ptext27 145C                 __ptext19 12B5                 __ptext36 1E72  
               __ptext28 1207                 __ptext37 1E7D                 __ptext29 0805  
 __size_of_LCD_Backlight 000C        __CFG_BOR4V$BOR21V 0000                 __powers_ 103A  
     __LCD_Isbusy@tempRS 006D         __size_of_sprintf 0666            __size_of_main 0319  
               _settings 1EAA                 main@posD 00D5                 main@posU 00D8  
          ??__LCD_Nibble 0071            ??__LCD_Isbusy 0071            ??__LCD_Strobe 0070  
               isdigit@c 0071                 scale@scl 003F    __end_of__LCD_Sendbyte 1170  
              sprintf@ap 00A3         __tdiv_to_l_@exp1 0025         __tdiv_to_l_@cntr 0024  
              sprintf@sp 00B2         __tdiv_to_l_@quot 0020         ___lldiv@dividend 0074  
              stringcode 100A            _LCD_Backlight 1E7D     __end_of__LCD_Command 1E59  
           ?__tdiv_to_l_ 0070                 sprintf@c 00B6                 sprintf@f 005A  
       ___lldiv@quotient 0079                 stringtab 1000      __end_of__LCD_Nibble 1EDE  
    __end_of__LCD_Isbusy 1FC4      __end_of__LCD_Strobe 1E7D   LCD_Backlight@backlight 0070  
         ?_LCD_Backlight 0070  
